<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Networks学习笔记</title>
      <link href="2022/07/21/network-xue-xi-bi-ji/"/>
      <url>2022/07/21/network-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Networks学习笔记"><a href="#Networks学习笔记" class="headerlink" title="Networks学习笔记"></a>Networks学习笔记</h1><h2 id="第二部分——网络理论基础"><a href="#第二部分——网络理论基础" class="headerlink" title="第二部分——网络理论基础"></a>第二部分——网络理论基础</h2><h3 id="1-网络数学模型"><a href="#1-网络数学模型" class="headerlink" title="1.网络数学模型"></a>1.网络数学模型</h3><h4 id="1-无环图-Acyclic-Network"><a href="#1-无环图-Acyclic-Network" class="headerlink" title="1) 无环图(Acyclic Network)"></a>1) 无环图(Acyclic Network)</h4><ul><li><p>Acyclic Network：一些有向网络中不含环的部分。（典型的如引文网络）</p></li><li><p>由于self-edge也是环，所以Acyclic Network不含自环。</p></li><li><p>Acyclic Network中至少一个节点仅有进入的连边而没有走出的连边。（反证法+游走法证明）</p></li><li><p>Acyclic Network所有边都可以画成向下指(point downward)的形式。</p></li><li><p>可视化Acyclic Network的方法：</p></li></ul><blockquote><p>First, we search through the network for a node with no outgoing edges. There could be more than one such node, in which case we choose whichever one we like. Let us call this node 1. We now remove node 1 from the network, along with any edges attached to it, then we repeat the process, finding another node with no outgoing edges in the remaining network. We call this node 2, remove it from the network along with its edges, and so forth. After all nodes have been numbered and removed, we put the network back together again and draw a picture of it by placing the nodes in numerical order from bottom to top of the page and then drawing the directed edges in the appropriate positions between them. Every node has outgoing edges only to lower numbered nodes—those drawn below it in the picture—because it had no outgoing edges at the time it was removed from the network, so all its original outgoing edges (if it ever had any) must have been connected to nodes that were removed earlier. Thus all edges in the final picture must be pointing downward.</p></blockquote><ul><li>无环图和有环图检测算法：</li></ul><blockquote><ol><li>Find a node with no outgoing edges. </li><li>If no such node exists, the network is cyclic. Otherwise, if such a node does exist, remove it and all its ingoing edges from the network.</li><li>If all nodes have been removed, the network is acyclic. Otherwise, go back to step 1.</li></ol></blockquote><h4 id="2-超图-Hypergraphs"><a href="#2-超图-Hypergraphs" class="headerlink" title="2) 超图(Hypergraphs)"></a>2) 超图(Hypergraphs)</h4><ul><li>hyperedges：连接超过两个节点的边。</li><li>超图可以有二分网络的表现形式。</li></ul><h4 id="3-二分图-Bipartite-Network"><a href="#3-二分图-Bipartite-Network" class="headerlink" title="3) 二分图(Bipartite Network)"></a>3) 二分图(Bipartite Network)</h4><ul><li>二分图有两类节点，其中连边只存在两类节点之间。</li><li>有向的二分图在原理上也是可能存在的。（代谢网络）</li></ul><h4 id="4-关联矩阵-Incidence-Matrix-和网络映射-Network-Projection"><a href="#4-关联矩阵-Incidence-Matrix-和网络映射-Network-Projection" class="headerlink" title="4)关联矩阵(Incidence Matrix)和网络映射(Network Projection)"></a>4)关联矩阵(Incidence Matrix)和网络映射(Network Projection)</h4><ul><li><p>关联矩阵：二分图邻接矩阵的等价形式。（0/1归属形式表示）</p></li><li><p>二分图是two-mode的网络映射，但我们可以从两类节点分别考虑而将二分图变成两个one-mode的网络映射：如果同类节点中的两个节点都连接另一类节点中的一个，那么在one-mode映射图中该两个节点之间存在连边，反之不存在。因此在one-mode映射图中只存在一种类别的节点。</p></li></ul><h4 id="5-多层网络-Multilayer-Network"><a href="#5-多层网络-Multilayer-Network" class="headerlink" title="5) 多层网络(Multilayer Network)"></a>5) 多层网络(Multilayer Network)</h4><ul><li><p>多层网络是多个独立的网络，每层代表一种特定类型的节点和它们的连接，以及网络之间的互连边。</p></li><li><p>Multiplex Network是Multilayer Network的特殊情况，即Multiplex Network的每一层节点都表示同一类对象。</p></li></ul><h4 id="6-树-Tree"><a href="#6-树-Tree" class="headerlink" title="6) 树(Tree)"></a>6) 树(Tree)</h4><ul><li>树为不包括环的连通无向网络；也可以由两个或两个以上的部分(components)组成，它们之间互不相连，如果单独的部分没有环路，它也被称为树。如果网络的所有部分都是树，那么完整的网络就叫做森林(forest)。</li><li>任何两个节点对之间只存在一条路径。</li><li>n个节点的树总是刚好有n-1条连边。反之亦然，任何有n个节点和n - 1条连边的连通网络是树。 </li><li>在n个节点上具有最少边数的连通网络始终是树。</li></ul><h4 id="7-平面图-Planar-Graphs"><a href="#7-平面图-Planar-Graphs" class="headerlink" title="7) 平面图(Planar Graphs)"></a>7) 平面图(Planar Graphs)</h4><ul><li>平面网络是指可以在平面上画出没有任何边交叉的网络。</li><li>所有的树都是planar图。</li><li>平面图的例子：路网络、美国州的邻接图。</li><li>四色定理：对平面网络的节点进行着色，使由一条边连接的两个节点颜色不相同。关于总共需要的颜色数我们称之为chromatic number(色数)，定理证明了平面网络的色数永远是4或更少。</li><li>判定平面网络的方法：Kuratowski’s theorem（库拉托夫斯基定理）。</li></ul><h4 id="8-度-Degree"><a href="#8-度-Degree" class="headerlink" title="8) 度(Degree)"></a>8) 度(Degree)</h4><ul><li>无向网络中一个节点的度是与它相连的边的数量。</li><li>无向网络的平均度等于该网络邻接矩阵所有项求和除以节点数。</li><li>所有节点的度数都相同的网络叫做regular networks(正则图)。                                                  </li></ul><h4 id="9-密度-Density-与稀疏度-Sparsity"><a href="#9-密度-Density-与稀疏度-Sparsity" class="headerlink" title="9) 密度(Density)与稀疏度(Sparsity)"></a>9) 密度(Density)与稀疏度(Sparsity)</h4><ul><li>网络的密度等于连边数与最大连边数的比值。其可以被看做是一对节点连接的概率，其大小为0到1之间的数。</li><li>当节点数n变大时，如果密度ρ保持不为零，则网络是稠密的。当网络的密度ρ→0在大n的极限上是稀疏的，并且邻接矩阵中非零元素的比例趋于零。</li><li>网络的平均度=网络密度×(n-1)≈网络密度×n。</li></ul><h4 id="10-有向网络-Directed-Network"><a href="#10-有向网络-Directed-Network" class="headerlink" title="10) 有向网络(Directed Network)"></a>10) 有向网络(Directed Network)</h4><ul><li>度数分为出度和入度。</li><li>有向网络的连边总数为邻接矩阵中的所有项求和。有向网络的平均度与无向网络的平均度存在2倍关系。</li></ul><h4 id="11-游走-Walks-和路径-Paths"><a href="#11-游走-Walks-和路径-Paths" class="headerlink" title="11) 游走(Walks)和路径(Paths)"></a>11) 游走(Walks)和路径(Paths)</h4><ul><li><p>A walk in a network is any sequence of nodes such that every consecutive pair of nodes in the sequence is connected by an edge.</p></li><li><p>Walks that do not intersect themselves are called <strong>paths</strong> or self-avoiding walks, and are important in many areas of network theory.</p></li><li><p>The length of a walk in a network is the number of edges traversed along the walk (not the number of nodes).</p></li><li><p>不同Walks长度的数目可以通过邻接矩阵的不同阶次项求和得到。(p131)</p></li></ul><h4 id="12-最短路径-Shortest-Paths"><a href="#12-最短路径-Shortest-Paths" class="headerlink" title="12) 最短路径(Shortest Paths)"></a>12) 最短路径(Shortest Paths)</h4><ul><li><p>A shortest path in a network, also sometimes called a geodesic path, is the shortest walk between a given pair of nodes.</p></li><li><p>Among all shortest paths between every pair of nodes in the network for which a path actually exists, the <strong>diameter</strong> is the length of the longest one.</p></li></ul><h4 id="13-连通片-Components"><a href="#13-连通片-Components" class="headerlink" title="13) 连通片(Components)"></a>13) 连通片(Components)</h4><ul><li><p>Technically, a component is a subset of the nodes of a network such that there exists at least one path from each member of that subset to each other member, and such that no other node in the network can be added to the subset while preserving this property. (Subsets like this, to which no other node can be added while preserving a given property, are called maximal subsets.)</p></li><li><p>A network in which all nodes belong to the same single component is said to be connected.</p></li><li><p>Two nodes are in the same <strong>weakly connected</strong> <strong>component</strong> if they are connected by one or more paths through the network, where paths are allowed to go either way along any edge.</p></li><li><p>we define A and B to be connected if and only if there exists a directed path both from A to B and from B to A. In that case, A and B are said to be <strong>strongly connected</strong>. We can define components for a directed network using this definition of connection and these are called strongly connected components.</p></li><li><p>Out-components: an out-component is the set of nodes that are reachable via directed paths starting from a specified node A, and including A itself. (Out-component is a property of both the network structure and the starting node)</p></li><li><p>In both the in-component and the out-component ofAis necessarily also in its strongly connected component.</p></li></ul><h4 id="14-独立路径-Independent-paths-连通度-Connectivity-和割集-Cut-Sets"><a href="#14-独立路径-Independent-paths-连通度-Connectivity-和割集-Cut-Sets" class="headerlink" title="14) 独立路径(Independent paths),连通度(Connectivity)和割集(Cut Sets)"></a>14) 独立路径(Independent paths),连通度(Connectivity)和割集(Cut Sets)</h4><ul><li><p>There are two species of independent path: <strong>edge-independent</strong> and <strong>node-independent</strong>. Two paths connecting a given pair of nodes are edge-independent if they share no edges. Two paths are node-independent if they share no nodes, other than their starting and ending nodes.</p></li><li><p>The number of independent paths (either edge- or node-independent) from A to B cannot exceed A’s degree, since every path must leave node A along a different edge. Similarly, the number of paths cannot exceed B’s degree either.</p></li><li><p>The number of independent paths between a pair of nodes is called the connectivity of the nodes.</p></li><li><p><strong>A cut set,</strong> or more properly a node cut set, is a set of nodes whose removal (along with the adjacent edges) will disconnect a specified pair of nodes. (p139)</p></li><li><p><strong>Menger’s theorem</strong> says that the size of the minimum cut set between any pair of nodes in a network is equal to the number of independent paths between the same nodes. (p139)</p></li><li><p><strong>Menger’s theorem and the max-flow/min-cut theorem</strong> tell us that for a pair of nodes in an undirected network three quantities are all numerically equal to each other: the edge connectivity of the pair (i.e., the number of edge-independent paths connecting them), the size of the minimum edge cut set (i.e., the number of edges that must be removed to disconnect them), and the maximum flow between the nodes expressed as a multiple of the maximum flow along each individual edge. (p140)</p></li></ul><h4 id="15-加权网络上的最大流量与割集-Maximum-flows-and-cut-sets-on-weighted-networks"><a href="#15-加权网络上的最大流量与割集-Maximum-flows-and-cut-sets-on-weighted-networks" class="headerlink" title="15) 加权网络上的最大流量与割集 (Maximum flows and cut sets on weighted networks)"></a>15) 加权网络上的最大流量与割集 (Maximum flows and cut sets on weighted networks)</h4><ul><li><p><strong>A minimum edge cut set</strong> is defined as being a cut set such that the sum of the weights on the edges of the set has the minimum possible value.</p></li><li><p>Maximum flow between a given pair of nodes in a network is equal to the sum of the weights on the edges of the minimum edge cut set that separates the same pair of nodes. (p141)</p></li></ul><h4 id="16-图拉普拉斯-Graph-Laplacian"><a href="#16-图拉普拉斯-Graph-Laplacian" class="headerlink" title="16) 图拉普拉斯 (Graph Laplacian)"></a>16) 图拉普拉斯 (Graph Laplacian)</h4><ul><li>The graph Laplacian for a simple undirected, unweighted network is an <code>n × n</code> symmetric matrix <code>L</code> with elements</li></ul><script type="math/tex; mode=display">L_{ij}=\begin{cases}k_i, \ \ \ if \ i=j \\-1,  \ if \ i \ne j \ and \ there \ is \ an\ edge \ between \ nodes \ i \ and \ j \\0 ,\ \ \ \ otherwise\end{cases}</script><ul><li>Another way to write the same thing would be $L_{ij}=k_i\delta_{ij}-A_{ij}$. And $\delta_{ij}$ is <code>Kronecker delta</code>.</li><li><p>We can write $L$ in matrix form as <strong>$L=D-A$</strong>, where $D$ is the diagonal matrix with the node degrees along its diagonal.</p></li><li><p>One can also write a graph Laplacian for weighted networks.</p></li><li>One can also treat multigraphs in the same way.</li><li>No natural extension of the graph Laplacian to networks with self-edges or, more importantly, to directed networks. The Laplacian is only useful for the undirected case.</li></ul><h4 id="17-图拉普拉斯应用——图分割-Graph-Partitioning"><a href="#17-图拉普拉斯应用——图分割-Graph-Partitioning" class="headerlink" title="17) 图拉普拉斯应用——图分割 (Graph Partitioning)"></a>17) 图拉普拉斯应用——图分割 (Graph Partitioning)</h4><ul><li><p>Graph partitioning is the task of dividing the nodes of a network into a set of groups of given sizes so as to minimize the number of edges running between the groups. (p143)</p></li><li><p>The number of edges $R$ running between the two groups, also called the <code>cut size</code>: $R = \frac{1}{2} \Sigma_{i,j\ in\ different\ groups} A_{ij}$. We define a set of quantities $s_i$:</p><script type="math/tex; mode=display">s_{i}=\begin{cases}+1 & if\ node\ i\ belong\ to\ group\ 1 \\-1 & if\ node\ i\ belong\ to\ group\ 2 \\\end{cases}</script><p>Then</p><script type="math/tex; mode=display">\frac{1}{2}(1-s_is_j)=\begin{cases}1 & if\ i\ and\ j\ are\ in\ different\ groups\\0 & if\ i\ and\ j\ are\ in\ the\ same\ groups\\\end{cases}</script><p>which allows us to rewrite $R$:</p><script type="math/tex; mode=display">R=\frac{1}{4}\Sigma_{ij}A_{ij}(1-s_is_j)</script><p>The first term in the sum is </p><script type="math/tex; mode=display">\Sigma_{ij}A_{ij}=\Sigma_ik_i=\Sigma_ik_is^2_i=\Sigma_{ij}k_i\delta_{ij}s_is_j</script><p>Substituting back (4) we then find that</p><script type="math/tex; mode=display">R=\frac{1}{4}\Sigma_{ij}(k_i\delta_{ij}-A_{ij})s_is_j=\frac{1}{4}\Sigma_{ij}L_{ij}s_is_j</script><p>We can be written in matrix form as </p><script type="math/tex; mode=display">R=\frac{1}{4}s^TLs</script></li><li><p>The matrix $L$ specifies the structure of our network, the vector s defines a division of that network into groups, and our goal is to find the vectors that minimizes the cut size for given $L$. We can makes use of the eigenvectors of the graph Laplacian to rapidly find good divisions of the network.</p></li></ul><h4 id="18-图拉普拉斯应用——网络可视化-Network-Visualization"><a href="#18-图拉普拉斯应用——网络可视化-Network-Visualization" class="headerlink" title="18) 图拉普拉斯应用——网络可视化 (Network Visualization)"></a>18) 图拉普拉斯应用——网络可视化 (Network Visualization)</h4><ul><li>The distance between nodes i and j in our simple one-dimensional model is $|x_i−x_j|$ and the squared distance is $(x_i−x_j)^2$. The sum $∆^2$ of the squared distances for all node pairs connected by an edge is then<script type="math/tex; mode=display">\Delta^2=\frac{1}{2}\Sigma_{ij}A_{ij}(x_i-x_j)^2</script>Expanding this expression, we have<script type="math/tex; mode=display">\Delta^2=\frac{1}{2}\Sigma_{ij}A_{ij}(x_i^2-2x_ix_j+x_j^2)=\frac{1}{2}[\Sigma_ik_ix_i^2-2\Sigma_{ij}A_{ij}x_ix_j+\Sigma_{j}k_jx_j^2]\\=\Sigma_{ij}(k_i\delta_{ij}-A_{ij})x_ix_j=\Sigma_{ij}L_{ij}x_ix_j</script>Equation can be written in matrix notation as<script type="math/tex; mode=display">\Delta^2=x^TLx</script></li></ul><h4 id="19-图拉普拉斯应用——随机游走-Random-Walks"><a href="#19-图拉普拉斯应用——随机游走-Random-Walks" class="headerlink" title="19) 图拉普拉斯应用——随机游走(Random Walks)"></a>19) 图拉普拉斯应用——随机游走(Random Walks)</h4><ul><li><p>A <strong>random walk</strong> is a walk across a network created by taking repeated random steps. Starting at any initial node, we choose uniformly at random among the edges attached to that node, move along the chosen edge to the node at its other end, and repeat the process.</p></li><li><p>Let $p_i(t)$ be the probability that the walk is at node $i$ at time $t$. If the walk is at node $j$ at time $t−1$, the probability of taking a step along any particular one of the $k_j$ edges attached to $j$ is $\frac{1}{k_j}$ , so on an undirected network the probability of being at node $i$ on the next step is given by</p><script type="math/tex; mode=display">p_i(t)=\Sigma_j\frac{A_{ij}}{k_j}p_j(t-1)</script><p>or $p(t)=AD^{−1}p(t − 1)$ in matrix form, where $p$ is the vector with elements $p_i$ and, as before, $D$ is the diagonal matrix with the degrees of the nodes down its diagonal.</p><p>In the limit of long time the probability distribution over nodes is given by (11) with $t$ set to infinity: $p_i(∞)=\Sigma_jA_{ij}p_i(∞)/k_j$ , or in matrix form:</p><script type="math/tex; mode=display">p=AD^{-1}p</script><p>where $p$ is shorthand for $p(∞)$. Rearranging, this can also be written as</p><script type="math/tex; mode=display">(I-AD^{-1})p=(D-A)D^{-1}p=LD^{-1}p=0</script><p>Thus $D^{−1p is (any multiple of) an eigenvector of the Laplacian with eigenvalue 0.</p><blockquote><p>On any given step a random walk is equally likely to traverse every edge.</p></blockquote></li></ul><h4 id="20-图拉普拉斯应用——电阻网络-Resistor-Networks"><a href="#20-图拉普拉斯应用——电阻网络-Resistor-Networks" class="headerlink" title="20) 图拉普拉斯应用——电阻网络 (Resistor Networks)"></a>20) 图拉普拉斯应用——电阻网络 (Resistor Networks)</h4><ul><li>Let $V_i$ be the voltage at node $i$, measured relative to any convenient reference potential. Then Kirchhoff’s law says that<script type="math/tex; mode=display">\Sigma_jA_{ij}\frac{V_i-V_j}{R}-I_i=0</script>where $I_i$ represents any current injected into node $i$ by an external current source. In our case this external current is non-zero only for the two nodes $s$ and $t$ connected to the external voltage:<script type="math/tex; mode=display">I_{i}=\begin{cases}+I & for\ i=s \\-I & for\ i=t \\0 & otherwise\end{cases}</script>(14) can be written as $k_iV_i-\Sigma_jA_{ij}V-j=RI_i$ or<script type="math/tex; mode=display">\Sigma_i(\delta_{ij}k_i-A_{ij})V_j=RI_i</script>which in matrix form is <script type="math/tex; mode=display">LV=RI</script>where $L$ is once again the graph Laplacian. This equation is a kind of matrix version of the standard Ohm’s law $V=RI $ for a single resistor, and by solving it for $V$ we can calculate the voltages at every node in the network.</li></ul><h4 id="21-图拉普拉斯的性质-Properties"><a href="#21-图拉普拉斯的性质-Properties" class="headerlink" title="21) 图拉普拉斯的性质 (Properties)"></a>21) 图拉普拉斯的性质 (Properties)</h4><ul><li><p>It has the property that every row of the matrix sums to zero:</p><script type="math/tex; mode=display">\Sigma_jL_{ij}=\Sigma_j(k_i\delta_{ij}-A_{ij})=k_i-k_i=0</script><p>Similarly every column of the matrix also sums to zero.         </p></li><li><p>Since the Laplacian is a real symmetric matrix, it necessarily has real eigenvalues. But we can say more than this: <strong>all the eigenvalues of the Laplacian are also non-negative.</strong></p><p>Let $λ$ be any eigenvalue of the graph Laplacian and let $v$ be the corresponding eigenvector, unit normalized so that $v^Tv=1$. Then $Lv=λv$ and</p><script type="math/tex; mode=display">v^TLv=\lambda v^Tv=\lambda</script><p>We can write</p><script type="math/tex; mode=display">\Sigma_{ij}A_{ij}(v_i-v_j)^2=\Sigma_{ij}A_{ij}(v^2_i-2v_iv_j+v_j^2)\\=\Sigma_ik_iv_i^2-2\Sigma_{ij}A_{ij}v_iv_j+\Sigma_jk_jv_j^2\\=2\Sigma_{ij}(k_i\delta_{ij}-A_{ij})v_iv_j=2\Sigma_{ij}L_{ij}v_iv_j=2v^TLv</script><p>We then get</p><script type="math/tex; mode=display">\lambda=\frac{1}{2}\Sigma_{ij}A_{ij}(v_i-v_j)^2\ge0</script><p>Thus all eigenvalues of the Laplacian are non-negative.</p></li><li><p>In fact the Laplacian always has at least one zero eigenvalue. As we have seen, every row of the matrix sums to zero, which means that the vector <em>$1$</em>$=(1, 1, 1, . . .)$ is always an eigenvector of the Laplacian with eigenvalue zero: $L1=0.$ </p></li><li><p>The determinant of a matrix is the product of its eigenvalues, and hence the determinant of the Laplacian is always zero, so the matrix is <strong>singular</strong>.</p></li><li><p>If a network has only one component then the second smallest eigenvalue will be non-zero.</p></li><li><p>The second smallest eigenvalue of the Laplacian is called the algebraic connectivity of the network or the spectral gap.</p></li><li><p>The second smallest eigenvalue is non-zero if and only if the network is connected.</p></li><li><p>It is a straightforward extension of the same arguments to show that the number of zero eigenvalues of the Laplacian is in fact always exactly equal to the number of components in the network.</p></li></ul><h3 id="2-网络测度指标"><a href="#2-网络测度指标" class="headerlink" title="2. 网络测度指标"></a>2. 网络测度指标</h3><h4 id="1）中心性-Centrality"><a href="#1）中心性-Centrality" class="headerlink" title="1）中心性 (Centrality)"></a>1）中心性 (Centrality)</h4><ul><li>This research addresses the question, “Which are the most important or central nodes in a network?”</li></ul><h5 id="1-1-度中心性-Degree-Centrality"><a href="#1-1-度中心性-Degree-Centrality" class="headerlink" title="[1.1] 度中心性 (Degree Centrality)"></a>[1.1] 度中心性 (Degree Centrality)</h5><ul><li>Degree is sometimes called degree centrality in the social networks literature, to emphasize its use as a centrality measure. (social network &amp; citation network)</li></ul><h5 id="1-2-特征向量中心性-Eigenvector-Centrality"><a href="#1-2-特征向量中心性-Eigenvector-Centrality" class="headerlink" title="[1.2] 特征向量中心性 (Eigenvector Centrality)"></a>[1.2] 特征向量中心性 (Eigenvector Centrality)</h5><ul><li><p>In many circumstances a node’s importance in a network is increased by having connections to other nodes that are themselves important. Eigenvector centrality is an extension of degree centrality that takes this factor into account.</p></li><li><p>Consider an undirected network of n nodes. The eigenvector centrality $x_i$ of node $i$ is defined to be proportional to the sum of the centralities of $i$’s neighbors, so that</p><script type="math/tex; mode=display">\begin{equation}x_i=\kappa^{-1}\sum_{node\ j\ that\ are\ neighbors\ of\ i}x_j\end{equation}</script><p>where we have called the constant of proportionality $\kappa^{-1}$ for reasons that will become clear. For the moment we will leave the value of $\kappa$ arbitrary—we will choose a value shortly.</p><p>An alternative way to write (22) is to make use of the adjacency matrix:</p><script type="math/tex; mode=display">\begin{equation}x_i=\kappa^{-1}\sum_{j=1}^{n}A_{ij}x_j\end{equation}</script><p>This formula can also be written in matrix notation as $x=\kappa^{-1}Ax$, or equivalently</p><script type="math/tex; mode=display">\begin{equation}Ax=\kappa x\end{equation}</script><p>where $x$ is the vector with elements equal to the centrality scores $x_i$ . In other words, $x$ is an eigenvector of the adjacency matrix.</p></li><li><p>With eigenvector centrality defined in this way, a node can achieve high centrality either by having a lot of neighbors with modest centrality, or by having a few neighbors with high centrality.</p></li><li><p>Assuming we want our centrality scores to be non-negative, there is only one choice: $x$ must be the leading eigenvector of the adjacency matrix, i.e., the eigenvector corresponding to the largest (most positive) eigenvalue.</p></li><li><strong>Perron–Frobenius theorem</strong>：for a matrix with all elements non-negative, like the adjacency matrix, there is only one eigenvector that also has all elements non-negative, and that is the leading eigenvector.Every other eigenvector must have at least one negative element.</li><li>This also fixes the value of the constant $\kappa$—it must be equal to the largest eigenvalue.</li><li>A directed network has an adjacency matrix that is, in general, asymmetric. This means it has two sets of eigenvectors, the left eigenvectors and the right eigenvectors, and hence two leading eigenvectors. Which of the two should we use to define the centrality? In most cases the correct answer is to use the right eigenvector. (The reason is that centrality in directed networks is usually bestowed by other nodes that point towards you, rather than by you pointing to others.)</li><li>In mathematical terms, only nodes that are in a strongly connected component of two or more nodes, or the out-component of such a strongly connected component, can have non-zero eigenvector centrality.</li></ul><h5 id="1-3-Katz中心性"><a href="#1-3-Katz中心性" class="headerlink" title="[1.3] Katz中心性"></a>[1.3] Katz中心性</h5><ul><li><p>We simply give each node a small amount of centrality “for free,” regardless of its position in the network or the centrality of its neighbors. In other words, we define</p><script type="math/tex; mode=display">\begin{equation}x_i=\alpha \sum_jA_{ij}x_j+\beta\end{equation}</script><p>where α and β are positive constants. The first term is the normal eigenvector centrality term in which the centralities of the nodes pointing to i are summed, and the second term is the “free” part, the constant extra amount that all nodes receive.</p><p>In matrix terms, it can be written</p><script type="math/tex; mode=display">x=\alpha Ax+\beta 1</script><p>Rearrangeing for x, we then find that </p><script type="math/tex; mode=display">x=\beta (I-\alpha A)^{-1}1</script><p>For convenience we usually set $\beta=1$, giving</p><script type="math/tex; mode=display">x=(I-\alpha A)^{-1}1</script><p>The definition of the Katz centrality contains the parameter $\alpha$, which governs the balance between the eigenvector centrality term and the constant term. </p></li><li><p>Most researchers have employed values($\alpha$) close to the maximum of $1/ \kappa_1$, which places the maximum amount of weight on the eigenvector term and the smallest amount on the constant term.</p></li><li>It allows a node that has many neighbors to have high centrality regardless of whether those neighbors themselves have high centrality, and this could be useful in some applications.</li></ul><h5 id="1-4-PageRank"><a href="#1-4-PageRank" class="headerlink" title="[1.4] PageRank"></a>[1.4] PageRank</h5><ul><li><p>In many cases it means less if a node is only one among many that are pointed to. The centrality gained by virtue of receiving an edge from a prestigious node is diluted by being shared with so many others.</p></li><li><p>We can allow for this by defining a variant of the Katz centrality in which the centrality I derive from my network neighbors is proportional to their centrality divided by their out-degree. Then nodes that point to many others pass only a small amount of centrality on to each of those others, even if their own centrality is high. In mathematical terms this centrality is defined by</p><script type="math/tex; mode=display">x_i=\alpha\sum_jA_{ij}\frac{x_j}{k_j^{out}}+\beta</script><p>In matrix terms, it is then</p><script type="math/tex; mode=display">x=\alpha AD^{-1}x+\beta 1</script><p>with $1$ being again the vector $(1, 1, 1, . . .)$ and $D$ being the diagonal matrix with elements $D_{ii}=max(k^{out}_i , 1)$. Rearranging, we find that $x=\beta (I-\alpha AD^{-1})^{-1}1$, and thus, as before, $\beta$ plays the role only of an unimportant overall multiplier for the centrality. Conventionally, we set $\beta=1$, giving</p><script type="math/tex; mode=display">x=(I-\alpha AD^{-1})^{-1}1</script><p>This centrality measure is commonly known as PageRank, which is a name given it by the Google web search corporation. We can see that the value of $\alpha$ should be less than the inverse of the largest eigenvalue of $AD^{−1}$. For an undirected network this largest eigenvalue turns out to be one, and thus $\alpha$ should be less than one.</p></li></ul><h5 id="1-5-Hubs-and-Authorities"><a href="#1-5-Hubs-and-Authorities" class="headerlink" title="[1.5] Hubs and Authorities"></a>[1.5] Hubs and Authorities</h5><ul><li><p><strong>Authorities</strong> are nodes that contain useful information on a topic of interest and hubs are nodes that tell us where the best authorities are to be found.</p></li><li><p>The concept of hubs and authorities in networks was first put forward by Kleinberg  and developed by him into a centrality algorithm called hyperlink-induced topic search or HITS. The HITS algorithm gives each node $i$ in a directed network two different centrality scores, the authority centrality $x_i$ and the hub centrality $y_i$ , which quantify nodes’ prominence in the two roles. The defining characteristic of a node with high authority centrality is that it is pointed to by many nodes with high hub centrality. Conversely, the defining characteristic of a node with high hub centrality is that it points to many nodes with high authority centrality.</p></li><li><p>In Kleinberg’s approach the authority centrality of a node is defined to be proportional to the sum of the hub centralities of the nodes that point to it:</p><script type="math/tex; mode=display">x_i=\alpha \sum_jA_{ij}y_j</script><p>where $\alpha$ is a constant. Similarly, the hub centrality of a node is proportional to the sum of the authority centralities of the nodes it points to:</p><script type="math/tex; mode=display">y_i=\beta \sum_jA_{ji}x_j</script><p>with $\beta$ another constant. Note that the indices on the matrix element $A_{ji}$ are swapped around in this second equation: it is the nodes that $i$ points to that define its hub centrality.</p><p>In matrix terms these equations can be written as</p><script type="math/tex; mode=display">x=\alpha Ay\\y=\beta A^Tx</script><p>or, combining the two,</p><script type="math/tex; mode=display">AA^Tx=\lambda x</script><p>and</p><script type="math/tex; mode=display">A^TAy=\lambda y</script><p>where $\lambda=(\alpha \beta)^{-1}$. Thus the authority and hub centralities are respectively given by eigenvectors of $AA^T$ and $A^TA$ with the same eigenvalue. It is easily proved, however, that this is the case, and in fact that all eigenvalues are the same for the two matrices. (p169)</p></li><li><p>In the hub and authority approach nodes not cited by any others have authority centrality zero (which is reasonable), but they can still have non-zero hub centrality.</p></li></ul><h5 id="1-6-接近度中心性-Closeness-Centrality"><a href="#1-6-接近度中心性-Closeness-Centrality" class="headerlink" title="[1.6] 接近度中心性 (Closeness Centrality)"></a>[1.6] 接近度中心性 (Closeness Centrality)</h5><ul><li><p>The mean shortest distance from $i$ to every node in the network is</p><script type="math/tex; mode=display">l_i=\frac{1}{n}\sum_jd_{ij}</script><p>The inverse of $l_i$ is called the <em>closeness centrality</em></p><script type="math/tex; mode=display">C_i=\frac{1}{l_i}=\frac{n}{\sum_jd_{ij}}</script></li><li><p>One protential problem with the definition of closeness centrality concerns networks that have more than one component. Perhaps a better solution is to redefine closeness in terms of the harmonic mean distance between nodes, i.e., the average of the inverse distances:</p><script type="math/tex; mode=display">C_i^{\prime}=\frac{1}{n-1}\sum_{j(\ne i)}\frac{1}{d_{ij}}</script><p>First, if $d_{ij}=\infty$ because $i$ and $j$ are in different components, then the corresponding term in the sum is simply zero and drops out. Second, the measure naturally gives more weight to nodes that are close to $i$ than to those far away.</p></li></ul><h5 id="1-7-介数中心性-Betweenness-Centrality"><a href="#1-7-介数中心性-Betweenness-Centrality" class="headerlink" title="[1.7] 介数中心性 (Betweenness Centrality)"></a>[1.7] 介数中心性 (Betweenness Centrality)</h5><ul><li><p>Betweenness centrality may still be a reasonable guide to the influence nodes have over the flow of information between others.</p></li><li><p>Let $n^i_{st}$ be 1 if node $i$ lies on the shortest path from $s$ to $t$ and 0 if it does not or if there is no such path. Then the betweenness centrality $x_i$ is given by</p><script type="math/tex; mode=display">x_i=\sum_{st}n^i_{st}</script><p>Note that this definition counts separately the shortest paths in either direction between each node pair.</p></li><li><p>Extension:if there are two shortest paths between a given pair of nodes, each of them gets weight $\frac{1}{2}$. Then the betweenness of a node is defined to be the sum of the weights of all shortest paths passing through that node.</p></li><li><p>If two or more paths pass through the same node then the betweenness sum includes contributions from each of them.</p></li><li><p>We redefine $n^i_{st}$ to be the number of shortest paths from $s$ to $t$ that pass through $i$ and we define $g_{st}$ to be the total number of shortest paths from $s$ to $t$. Then the betweenness centrality of node $i$ on a general network is</p><script type="math/tex; mode=display">x_i=\sum_{st}\frac{n^i_{st}}{g_{st}}</script><p>where we adopt the convention that $n^i_{st}/g_{st}$ if both $n^i_{st}$ and $g_{st}$ are zero.</p></li><li><p>Betweenness centrality differs from the other centrality measures we have considered in being not principally a measure of how well-connected a node is. Instead it measures how much a node falls “between” others.</p></li><li><p>One natural choice is to normalize the path count by dividing by the total number of (ordered) node pairs, which is $n^2$, so that betweenness becomes the fraction (rather than the number) of paths that run through a given node:</p><script type="math/tex; mode=display">x_i=\frac{1}{n^2}\sum_{st}\frac{n^i_{st}}{g_{st}}</script><p>With this definition, the values of the betweenness lie strictly between zero and one.</p></li><li><p><em>Flow betweenness</em> is a variant of betweenness centrality that uses edge-in- dependent paths between node pairs rather than shortest paths.</p></li><li><p>Another variant is <em>random-walk betweenness</em>, which imagines messages performing random walks across the network between every possible starting point and destination, and the betweenness is defined as the average number of such messages that pass through each node.</p></li></ul><h4 id="2）节点组-Groups-Of-Nodes"><a href="#2）节点组-Groups-Of-Nodes" class="headerlink" title="2）节点组 (Groups Of Nodes)"></a>2）节点组 (Groups Of Nodes)</h4><ul><li>In this section we discuss some simpler concepts of network groups that can be useful for probing and describing the local structure of networks. The primary constructs we look at are cliques, <em>k</em>-cores, and <em>k</em>-components.</li></ul><h5 id="2-1-团-Cliques"><a href="#2-1-团-Cliques" class="headerlink" title="[2.1] 团 (Cliques)"></a>[2.1] 团 (Cliques)</h5><ul><li>A <em>clique</em> is a set of nodes within an undirected network such that every member of the set is connected by an edge to every other.</li><li>The one-mode projection creates a network that is naturally composed of cliques.</li></ul><h5 id="2-2-核-Cores"><a href="#2-2-核-Cores" class="headerlink" title="[2.2] 核 (Cores)"></a>[2.2] 核 (Cores)</h5><ul><li><em>k</em>-core is a connected set of nodes where each is joined to at least <em>k</em> of the others. </li><li>A simple way to find them is to start with a given network and remove from it any nodes that have degree less than <em>k</em>, along with their attached edges, since clearly such nodes cannot under any circumstances be members of a <em>k</em>-core. In so doing, one will normally reduce the degrees of some other nodes in the network—those that were connected to the nodes just removed. So we then go through the network again to see if there are any additional nodes that now have degree less than <em>k</em> and remove those too. And so we proceed, repeatedly pruning the network to remove nodes with degree less than <em>k</em> until no such nodes remain. What is left over will, by definition, be a <em>k</em>-core or a set of <em>k</em>-cores, since each node is connected to at least <em>k</em> others. Note that we are not necessarily left with a <em>single</em> <em>k</em>-core—there’s no guarantee that the network will be connected once we are done pruning it, even if it was connected to start with.</li></ul><h5 id="2-3-连通块与k连通块-Components-amp-k-Components"><a href="#2-3-连通块与k连通块-Components-amp-k-Components" class="headerlink" title="[2.3] 连通块与k连通块 (Components &amp; k-Components)"></a>[2.3] 连通块与k连通块 (Components &amp; k-Components)</h5><ul><li>A <em>k-component</em> (sometimes also called a <em>k-connected component</em>) is a set of nodes such that each is reachable from each of the others by at least <em>k</em> node-independent paths.</li><li><em>k</em>-components are nested within each other.</li><li>So another way of defining a <em>k</em>-component would be to say that it is a subset of a network in which no pair of nodes can be disconnected from each other by removing less than <em>k</em> other nodes.</li><li>One disadvantage of <em>k</em>-components as a definition of node groups, is that for $k\ge3$ they can be non-contiguous.</li><li><em>k</em>-components are sometimes defined slightly differently, to be a set of nodes such that every pair in the set is connected by at least <em>k</em> node-independent paths <em>that themselves are contained entirely within the subset</em>.</li></ul><h4 id="3-传递性-Transitivity-与聚类系数-Clustering-Coefficient"><a href="#3-传递性-Transitivity-与聚类系数-Clustering-Coefficient" class="headerlink" title="3) 传递性(Transitivity)与聚类系数(Clustering Coefficient)"></a>3) 传递性(Transitivity)与聚类系数(Clustering Coefficient)</h4><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Network Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年轻薄本汇总</title>
      <link href="2022/07/10/2022-nian-qing-bo-ben-hui-zong/"/>
      <url>2022/07/10/2022-nian-qing-bo-ben-hui-zong/</url>
      
        <content type="html"><![CDATA[<h1 id="2022年13寸、14寸中高端轻薄本推荐"><a href="#2022年13寸、14寸中高端轻薄本推荐" class="headerlink" title="2022年13寸、14寸中高端轻薄本推荐"></a>2022年13寸、14寸中高端轻薄本推荐</h1><p>本文仅摘录了13寸、14寸基于intel平台且颜值还可以的轻薄win本，供大家做初步的筛选。本文没有列出机子的续航问题，如想了解，可以通过点击对应机子下方的购买链接与京东客服进一步咨询。</p><h2 id="戴尔"><a href="#戴尔" class="headerlink" title="戴尔"></a>戴尔</h2><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">戴尔灵越13pro</th><th style="text-align:center">戴尔XPS 13</th><th style="text-align:center">戴尔XPS 13 Plus</th></tr></thead><tbody><tr><td style="text-align:center">CPU</td><td style="text-align:center">12代i5</td><td style="text-align:center">11代i5</td><td style="text-align:center">12代i7</td></tr><tr><td style="text-align:center">显卡</td><td style="text-align:center">锐炬Xe集显</td><td style="text-align:center">锐炬Xe集显</td><td style="text-align:center">锐炬Xe集显</td></tr><tr><td style="text-align:center">内存</td><td style="text-align:center">16G DDR5</td><td style="text-align:center">16G DDR4x</td><td style="text-align:center">16G DDR5</td></tr><tr><td style="text-align:center">磁盘</td><td style="text-align:center">512G</td><td style="text-align:center">512G</td><td style="text-align:center">512G</td></tr><tr><td style="text-align:center">屏幕</td><td style="text-align:center">13.3寸 / 2.5k</td><td style="text-align:center">13.3寸 / 1k / 雾面屏 or 触控屏</td><td style="text-align:center">13.4寸 / 3.5k OLED / 触摸屏</td></tr><tr><td style="text-align:center">重量</td><td style="text-align:center">1.25kg</td><td style="text-align:center">1.16kg</td><td style="text-align:center">1.26kg</td></tr><tr><td style="text-align:center">接口</td><td style="text-align:center">USB-A 3.2×1、雷电4接口×1、3.5mm耳机接口×1、HDMI1.4接口×1</td><td style="text-align:center">雷电4接口×2、USB-C×1、Micro SD卡槽×1、3.5mm耳机接口×1</td><td style="text-align:center">雷电4接口×1、USB-C接口×1</td></tr><tr><td style="text-align:center">预装操作系统</td><td style="text-align:center">win11</td><td style="text-align:center">win10、win11随机发</td><td style="text-align:center">win11</td></tr><tr><td style="text-align:center">价格</td><td style="text-align:center">5499</td><td style="text-align:center">7499</td><td style="text-align:center">16999</td></tr><tr><td style="text-align:center">外观</td><td style="text-align:center"><a href="https://item.jd.com/10046485435687.html">灵越13pro</a></td><td style="text-align:center"><a href="https://item.jd.com/100024272590.html#crumb-wrap">XPS 13</a></td><td style="text-align:center"><a href="https://item.jd.com/100039364500.html#crumb-wrap">XPS 13 Plus</a></td></tr></tbody></table></div><h2 id="联想小新"><a href="#联想小新" class="headerlink" title="联想小新"></a>联想小新</h2><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">联想小新pro 14</th><th style="text-align:center">联想小新Air14</th><th style="text-align:center">联想小新Air14Plus</th></tr></thead><tbody><tr><td style="text-align:center">CPU</td><td style="text-align:center">12代i5</td><td style="text-align:center">12代i5</td><td style="text-align:center">12代i5</td></tr><tr><td style="text-align:center">显卡</td><td style="text-align:center">锐炬Xe集显</td><td style="text-align:center">锐炬Xe集显</td><td style="text-align:center">锐炬Xe集显</td></tr><tr><td style="text-align:center">内存</td><td style="text-align:center">16G DDR5</td><td style="text-align:center">16G DDR4</td><td style="text-align:center">16G DDR5</td></tr><tr><td style="text-align:center">磁盘</td><td style="text-align:center">512G</td><td style="text-align:center">512G</td><td style="text-align:center">512G</td></tr><tr><td style="text-align:center">屏幕</td><td style="text-align:center">14寸 / 2.8k / 120Hz刷新</td><td style="text-align:center">14寸 / 1k</td><td style="text-align:center">14寸 / 2.2k</td></tr><tr><td style="text-align:center">重量</td><td style="text-align:center">1.3kg</td><td style="text-align:center">1.39kg</td><td style="text-align:center">1.4kg</td></tr><tr><td style="text-align:center">接口</td><td style="text-align:center">雷电4接口×2、USB-A3.2×1、3.5mm耳机接口×1</td><td style="text-align:center">USB-A3.2×2、USB-C×1、HDMI×1、麦克风二合一接口×1、全尺寸SD读卡器×1</td><td style="text-align:center">USB-C×2、USB-A3.2×2、3.5mm耳机接口×1、HDMI2.0×1、全尺寸SD读卡器×1</td></tr><tr><td style="text-align:center">预装操作系统</td><td style="text-align:center">win11</td><td style="text-align:center">win11</td><td style="text-align:center">win11</td></tr><tr><td style="text-align:center">价格</td><td style="text-align:center">5499</td><td style="text-align:center">4999</td><td style="text-align:center">5099</td></tr><tr><td style="text-align:center">外观</td><td style="text-align:center"><a href="https://item.jd.com/100039924870.html#crumb-wrap">小新pro14</a></td><td style="text-align:center"><a href="https://item.jd.com/100023185705.html#none">小新Air</a></td><td style="text-align:center"><a href="https://item.jd.com/100039912930.html#crumb-wrap">小新Airplus</a></td></tr></tbody></table></div><h2 id="联想ThinkPad"><a href="#联想ThinkPad" class="headerlink" title="联想ThinkPad"></a>联想ThinkPad</h2><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">联想ThinkPad 13x</th><th style="text-align:center">联想ThinkPad X1 Nano</th><th style="text-align:center">联想ThinkPad X1 Carbon</th></tr></thead><tbody><tr><td style="text-align:center">CPU</td><td style="text-align:center">11代i5</td><td style="text-align:center">11代i5</td><td style="text-align:center">12代i5</td></tr><tr><td style="text-align:center">显卡</td><td style="text-align:center">锐炬Xe集显</td><td style="text-align:center">锐炬Xe集显</td><td style="text-align:center">锐炬Xe集显</td></tr><tr><td style="text-align:center">内存</td><td style="text-align:center">16G DDR4x</td><td style="text-align:center">16G DDR4x</td><td style="text-align:center">16G DDR5</td></tr><tr><td style="text-align:center">磁盘</td><td style="text-align:center">512G</td><td style="text-align:center">512G</td><td style="text-align:center">512G</td></tr><tr><td style="text-align:center">屏幕</td><td style="text-align:center">13.3寸 / 2.5k</td><td style="text-align:center">13寸 / 2k</td><td style="text-align:center">14寸 / 4k</td></tr><tr><td style="text-align:center">重量</td><td style="text-align:center">1.13kg</td><td style="text-align:center">907g</td><td style="text-align:center">1.12kg</td></tr><tr><td style="text-align:center">接口</td><td style="text-align:center">雷电4接口×2、3.5mm耳机接口×1</td><td style="text-align:center">雷电4接口×2、3.5mm耳机接口×1</td><td style="text-align:center">雷电4接口×2、USB-A3.2×2、3.5mm耳机接口×1、HDMI2.0接口×1</td></tr><tr><td style="text-align:center">预装操作系统</td><td style="text-align:center">win11</td><td style="text-align:center">win10</td><td style="text-align:center">win11</td></tr><tr><td style="text-align:center">价格</td><td style="text-align:center">6299</td><td style="text-align:center">8399</td><td style="text-align:center">10499</td></tr><tr><td style="text-align:center">外观</td><td style="text-align:center"><a href="https://item.jd.com/10043951133734.html#crumb-wrap">ThinkPad13x</a></td><td style="text-align:center"><a href="https://item.jd.com/10047272755960.html">ThinkPadX1 Nano</a></td><td style="text-align:center"><a href="https://item.jd.com/100036787690.html#crumb-wrap">ThinkPadX1 Carbon</a></td></tr></tbody></table></div><h2 id="华硕"><a href="#华硕" class="headerlink" title="华硕"></a>华硕</h2><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">华硕灵耀14</th><th style="text-align:center">华硕灵耀X14</th><th style="text-align:center">华硕灵耀X逍遥</th></tr></thead><tbody><tr><td style="text-align:center">CPU</td><td style="text-align:center">12代i5</td><td style="text-align:center">12代i5</td><td style="text-align:center">11代i5</td></tr><tr><td style="text-align:center">显卡</td><td style="text-align:center">锐炬Xe集显</td><td style="text-align:center">锐炬Xe集显</td><td style="text-align:center">锐炬Xe集显</td></tr><tr><td style="text-align:center">内存</td><td style="text-align:center">16G DDR5</td><td style="text-align:center">16G DDR5</td><td style="text-align:center">16G DDR4x</td></tr><tr><td style="text-align:center">磁盘</td><td style="text-align:center">512G</td><td style="text-align:center">512G</td><td style="text-align:center">512G</td></tr><tr><td style="text-align:center">屏幕</td><td style="text-align:center">14寸 / 2.8k / OLED屏</td><td style="text-align:center">14寸 / 2.5k</td><td style="text-align:center">13.3寸 / 4k / OLED触摸屏</td></tr><tr><td style="text-align:center">重量</td><td style="text-align:center">1.3kg</td><td style="text-align:center">1.3kg</td><td style="text-align:center">1.2kg</td></tr><tr><td style="text-align:center">接口</td><td style="text-align:center">雷电4接口×2、HDMI 2.0×1、USB-A 3.2×1、3.5mm耳机接口×1、Micro SD读卡器×1</td><td style="text-align:center">雷电4接口×2、USB-A3.2×1、HDMI 2.0b×1、3.5mm耳机接口×1、Micro SD读卡器×1</td><td style="text-align:center">雷电4接口×2、HDMI×1、USB-A3.2×1</td></tr><tr><td style="text-align:center">预装操作系统</td><td style="text-align:center">win11</td><td style="text-align:center">win11</td><td style="text-align:center">win11</td></tr><tr><td style="text-align:center">价格</td><td style="text-align:center">5799</td><td style="text-align:center">6699</td><td style="text-align:center">6299</td></tr><tr><td style="text-align:center">外观</td><td style="text-align:center"><a href="https://item.jd.com/100039854828.html">灵耀14</a></td><td style="text-align:center"><a href="https://item.jd.com/10046548271456.html?cu=true&amp;utm_source=www.zhihu.com&amp;utm_medium=tuiguang&amp;utm_campaign=t_1001542270_1003163096_4100473634_3003776250&amp;utm_term=2987aa84c3e1443997549ddb765561e1">灵耀X14</a></td><td style="text-align:center"><a href="https://item.jd.com/100022375481.html?cu=true&amp;utm_source=www.zhihu.com&amp;utm_medium=tuiguang&amp;utm_campaign=t_1001542270_1001340176_123886_3003674740&amp;utm_term=75c5b1009ebe44cf9dbcfc94e316abba#crumb-wrap">灵耀X逍遥</a></td></tr></tbody></table></div><h2 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h2><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">华为MateBook Xpro2022</th></tr></thead><tbody><tr><td style="text-align:center">CPU</td><td style="text-align:center">11代i5</td></tr><tr><td style="text-align:center">显卡</td><td style="text-align:center">锐炬Xe集显</td></tr><tr><td style="text-align:center">内存</td><td style="text-align:center">16G DDR4x</td></tr><tr><td style="text-align:center">磁盘</td><td style="text-align:center">512G</td></tr><tr><td style="text-align:center">屏幕</td><td style="text-align:center">14.2寸 / 3.1k / 90Hz / 触摸屏</td></tr><tr><td style="text-align:center">重量</td><td style="text-align:center">1.38kg</td></tr><tr><td style="text-align:center">接口</td><td style="text-align:center">USB-C×4、3.5mm耳机接口×1、麦克风二合一接口×1</td></tr><tr><td style="text-align:center">预装操作系统</td><td style="text-align:center">win11</td></tr><tr><td style="text-align:center">价格</td><td style="text-align:center">9499</td></tr><tr><td style="text-align:center">外观</td><td style="text-align:center"><a href="https://item.jd.com/100030588214.html#crumb-wrap">MateBook X Pro2022</a></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 电脑测评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑测评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PS学习笔记</title>
      <link href="2022/06/22/ps-xue-xi-bi-ji/"/>
      <url>2022/06/22/ps-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><div class="table-container"><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">Alt+滚轮</td><td style="text-align:center">放大缩小</td></tr><tr><td style="text-align:center">Ctrl+滚轮</td><td style="text-align:center">横向滚动</td></tr><tr><td style="text-align:center">Shift+滚轮</td><td style="text-align:center">纵向滚动</td></tr><tr><td style="text-align:center">Ctrl+N</td><td style="text-align:center">新建文档</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> PS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解锁MacBook的正确方式</title>
      <link href="2022/06/08/jie-suo-macbook-de-zheng-que-fang-shi/"/>
      <url>2022/06/08/jie-suo-macbook-de-zheng-que-fang-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="解锁MacBook的正确方式"><a href="#解锁MacBook的正确方式" class="headerlink" title="解锁MacBook的正确方式"></a>解锁MacBook的正确方式</h1><p>2022年6月7日凌晨1点，苹果2022年WWDC（Apple Worldwide Developers Conference）于线上举办。会上发布了两款搭载M2芯片的机子：全新的MacBook Air和13寸的MacBook Pro，同时也更新了IOS、iPadOS、macOS以及watchOS。作为一个使用win本多年的学生党，早有换mac的想法。那么当下在出现两台新机子的情况下，应该如何选购？本文的适用人群为：出门办公、商务人士或学生党。所以本文默认把2021年发布的MacBook Pro16排除（太重辣），重点比较新发布的MacBook Air、MacBook Pro13以及2021年发布的MacBook Pro14。</p><h2 id="1-升级之处"><a href="#1-升级之处" class="headerlink" title="1.升级之处"></a>1.升级之处</h2><p>这一节，我们来简单说说新发布的两款机子更新在哪？是否只是挤牙膏？</p><h3 id="①MacBook-Air"><a href="#①MacBook-Air" class="headerlink" title="①MacBook Air"></a>①MacBook Air</h3><p>相较于上一代Air，这一代更新可以说是非常大！主要区别如下：</p><ul><li><strong>「模型」</strong>：新一代Air的模型进行了重新设计，采用Pro的平面方正形状而淘汰了上一代前小后大的楔形设计。</li><li><strong>「芯片」</strong>：上一代为M1芯片，新一代是M2芯片。</li><li><strong>「屏幕」</strong>：上一代是13.3寸视网膜屏，新一代是13.6寸Liquid 视网膜屏（像素点略多、亮度更高）。</li><li><strong>「重量」</strong>：上一代1.29kg，新一代1.24kg。</li><li><strong>「其他」</strong>：颜色、摄像头、音频都升级。</li><li><strong>「价格」</strong>：从7999升到了9499！！！</li></ul><h3 id="②MacBook-Pro-13"><a href="#②MacBook-Pro-13" class="headerlink" title="②MacBook Pro 13"></a>②MacBook Pro 13</h3><p>搭载M2的Pro 13一上架，苹果官网的M1芯片的Pro 13就直接下架。相较于上一代，新一代13pro只是把M1芯片换成M2，其他配件都是一样的，重量上稍微轻了0.02kg。（加量不加价）</p><h2 id="2-横向对比"><a href="#2-横向对比" class="headerlink" title="2.横向对比"></a>2.横向对比</h2><p>讲完升级，那么最纠结的事情来了，MacBook Air、MacBook Pro13、MacBook Pro14要怎么选？下面先做两两横向对比，以得出我们的建议。 </p><h3 id="①MacBook-Air-vs-MacBook-Pro-13"><a href="#①MacBook-Air-vs-MacBook-Pro-13" class="headerlink" title="①MacBook Air vs MacBook Pro 13"></a>①MacBook Air vs MacBook Pro 13</h3><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">MacBook Air</th><th style="text-align:center">MacBook Pro 13</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">屏幕</td><td style="text-align:center">13.6寸Liquid 视网膜屏（2560*1664）</td><td style="text-align:center">13.3寸视网膜显示屏（2560*1600）</td><td style="text-align:center">前者更好</td></tr><tr><td style="text-align:center">芯片</td><td style="text-align:center">M2芯片</td><td style="text-align:center">M2芯片</td><td style="text-align:center">相同</td></tr><tr><td style="text-align:center">重量</td><td style="text-align:center">1.24kg</td><td style="text-align:center">1.38kg</td><td style="text-align:center">前者更轻</td></tr><tr><td style="text-align:center">摄像头</td><td style="text-align:center">1080p</td><td style="text-align:center">720p</td><td style="text-align:center">前者更好</td></tr><tr><td style="text-align:center">键盘</td><td style="text-align:center">无touchbar</td><td style="text-align:center">有touchbar</td><td style="text-align:center">看个人喜好</td></tr><tr><td style="text-align:center">电池</td><td style="text-align:center">52.6wh</td><td style="text-align:center">58.2wh</td><td style="text-align:center">后者更大</td></tr><tr><td style="text-align:center">风扇</td><td style="text-align:center">无风扇</td><td style="text-align:center">有风扇</td><td style="text-align:center">看个人喜好</td></tr><tr><td style="text-align:center">价格</td><td style="text-align:center">13399</td><td style="text-align:center">12999</td><td style="text-align:center">10核图像+16+512情况</td></tr><tr><td style="text-align:center">其他</td><td style="text-align:center">/</td><td style="text-align:center">/</td><td style="text-align:center">基本相似</td></tr></tbody></table></div><h3 id="②MacBook-Air-vs-MacBook-Pro-14"><a href="#②MacBook-Air-vs-MacBook-Pro-14" class="headerlink" title="②MacBook Air vs MacBook Pro 14"></a>②MacBook Air vs MacBook Pro 14</h3><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">MacBook Air</th><th style="text-align:center">MacBook Pro14</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">屏幕</td><td style="text-align:center">13.6寸Liquid 视网膜屏（2560*1664）</td><td style="text-align:center">14.2寸Liquid 视网膜 XDR 显示屏（3024*1964）ProMotion刷新120Hz</td><td style="text-align:center">后者更好</td></tr><tr><td style="text-align:center">芯片</td><td style="text-align:center">M2芯片</td><td style="text-align:center">M1Pro芯片（Max先不比了）</td><td style="text-align:center">后者更强</td></tr><tr><td style="text-align:center">重量</td><td style="text-align:center">1.24kg</td><td style="text-align:center">1.6kg</td><td style="text-align:center">前者更轻</td></tr><tr><td style="text-align:center">端口</td><td style="text-align:center">2雷电/USB4端口</td><td style="text-align:center">3雷电、HDMI端口、SDXC卡插槽</td><td style="text-align:center">后者端口更多</td></tr><tr><td style="text-align:center">摄像头</td><td style="text-align:center">1080p</td><td style="text-align:center">1080p</td><td style="text-align:center">相同</td></tr><tr><td style="text-align:center">键盘</td><td style="text-align:center">无touchbar</td><td style="text-align:center">无touchbar</td><td style="text-align:center">基本相同</td></tr><tr><td style="text-align:center">电池</td><td style="text-align:center">52.6wh（15h）</td><td style="text-align:center">70wh（11h）</td><td style="text-align:center">前者续航长</td></tr><tr><td style="text-align:center">音频</td><td style="text-align:center">四扬声器</td><td style="text-align:center">高保真六扬声器</td><td style="text-align:center">后者更好</td></tr><tr><td style="text-align:center">风扇</td><td style="text-align:center">无风扇</td><td style="text-align:center">有风扇</td><td style="text-align:center">看个人喜好</td></tr><tr><td style="text-align:center">价格</td><td style="text-align:center">13399</td><td style="text-align:center">14999</td><td style="text-align:center">16+512</td></tr><tr><td style="text-align:center">其他</td><td style="text-align:center">/</td><td style="text-align:center">/</td><td style="text-align:center">基本相似</td></tr></tbody></table></div><h3 id="③MacBook-Pro-13-vs-MacBook-Pro-14"><a href="#③MacBook-Pro-13-vs-MacBook-Pro-14" class="headerlink" title="③MacBook Pro 13 vs MacBook Pro 14"></a>③MacBook Pro 13 vs MacBook Pro 14</h3><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">MacBook Pro 13</th><th style="text-align:center">MacBook Pro 14</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">屏幕</td><td style="text-align:center">13.3寸视网膜显示屏（2560*1600）</td><td style="text-align:center">14.2寸Liquid 视网膜 XDR 显示屏（3024*1964）ProMotion刷新120Hz</td><td style="text-align:center">后者更好</td></tr><tr><td style="text-align:center">芯片</td><td style="text-align:center">M2芯片</td><td style="text-align:center">M1Pro芯片（Max先不比了）</td><td style="text-align:center">后者更强</td></tr><tr><td style="text-align:center">重量</td><td style="text-align:center">1.38kg</td><td style="text-align:center">1.6kg</td><td style="text-align:center">前者更轻</td></tr><tr><td style="text-align:center">端口</td><td style="text-align:center">2雷电/USB4端口</td><td style="text-align:center">3雷电、HDMI端口、SDXC卡插槽</td><td style="text-align:center">后者端口更多</td></tr><tr><td style="text-align:center">摄像头</td><td style="text-align:center">720p</td><td style="text-align:center">1080p</td><td style="text-align:center">后者更好</td></tr><tr><td style="text-align:center">键盘</td><td style="text-align:center">有touchbar</td><td style="text-align:center">无touchbar</td><td style="text-align:center">看个人喜好</td></tr><tr><td style="text-align:center">电池</td><td style="text-align:center">58.2wh（17h续航）</td><td style="text-align:center">70wh（11h续航）</td><td style="text-align:center">前者续航长</td></tr><tr><td style="text-align:center">音频</td><td style="text-align:center">高动态范围扬声器</td><td style="text-align:center">高保真六扬声器</td><td style="text-align:center">后者更好</td></tr><tr><td style="text-align:center">风扇</td><td style="text-align:center">有风扇</td><td style="text-align:center">有风扇</td><td style="text-align:center">/</td></tr><tr><td style="text-align:center">价格</td><td style="text-align:center">12999</td><td style="text-align:center">14999</td><td style="text-align:center">16+512</td></tr><tr><td style="text-align:center">其他</td><td style="text-align:center">/</td><td style="text-align:center">/</td><td style="text-align:center">基本相似</td></tr></tbody></table></div><h3 id="④建议和总结"><a href="#④建议和总结" class="headerlink" title="④建议和总结"></a>④建议和总结</h3><p>列完数据，对电子有一定了解的旁友可能已经有自己的选择。当然还有一些旁友还是一脸懵逼，那下面就从一些指标和受众上将三台机子进行排序。</p><ul><li><strong>「性价比」</strong>：Pro14&gt;Air&gt;Pro13。（Pro14无论在屏幕、芯片还是接口上都好太多了，Air毕竟是新模型且性能和Pro13相差不大，新版Pro13只是换了个芯片）</li><li><strong>「续航」</strong>：Pro13&gt;Air&gt;Pro14。</li><li><strong>「美观度」</strong>：Air&gt;Pro13&gt;Pro14。（个人观点，勿喷）</li><li><strong>「便携度」</strong>：Air&gt;Pro13&gt;Pro14。</li><li><strong>「噪声」</strong>：Air&lt;Pro13&lt;Pro14。（毕竟Air是无风扇设计）</li><li><strong>「TouchBar爱好者」</strong>：Pro13&gt;Air≈Pro14。</li><li><strong>「商务人士」</strong>：Air&gt;Pro13&gt;Pro14。</li><li><strong>「出门办公频率高」</strong>：Air&gt;Pro13&gt;Pro14。</li><li><strong>「对性能要求高且偶尔出门办公」</strong>：Pro14&gt;Air≈Pro13。</li><li><strong>「家里有矿」</strong>：全买，小孩子才做选择。</li></ul><h2 id="3-吐槽"><a href="#3-吐槽" class="headerlink" title="3.吐槽"></a>3.吐槽</h2><p>早在数月前就有MacBook Air要重做且外观将会向Pro靠拢的消息，当时本人内心充满期待。看完新版Air的外观，说实话还挺满意（刘海除外）。However，看一眼首发价1199刀，到大陆变成9499？（是汇率涨了嘛）512+16G直接来到了13399。相比Pro14，Air性价比是真的低。作为一名计算机方向的学生，本人可能对性能的需求&gt;便携度的需求，所以我可能剁手选择性价比更高的MacBook Pro14。家境贫寒，坐等一波7月的教育优惠啦~</p>]]></content>
      
      
      <categories>
          
          <category> 电脑测评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑测评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《因果推断入门》学习笔记</title>
      <link href="2021/08/05/yin-guo-tui-duan/yin-guo-tui-duan-ru-men-bi-ji/"/>
      <url>2021/08/05/yin-guo-tui-duan/yin-guo-tui-duan-ru-men-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="《因果推断入门》学习笔记"><a href="#《因果推断入门》学习笔记" class="headerlink" title="《因果推断入门》学习笔记"></a>《因果推断入门》学习笔记</h1><p>本文是笔者在B站《因果推断入门》课程学习以及教材《Causal Inference in Statistics: A Primer》学习过程中留下的笔记。对应课程链接如下：<a href="https://www.bilibili.com/video/BV1sJ41177sg?from=search&amp;seid=3202461351731182463">因果推断入门课程</a>，对应书籍链接如下：<a href="http://bayes.cs.ucla.edu/PRIMER/">《Causal Inference in Statistics: A Primer》电子书</a>。</p><h2 id="1-简介（Introduction"><a href="#1-简介（Introduction" class="headerlink" title="1.简介（Introduction)"></a>1.简介（Introduction)</h2><ul><li><p>三位因果推断领域著名的科学家：Juden Pearl（UCLA 计算机科学家），Donald Rubin（Harvard 统计学家），James Robins（Harvard 流行病学、生物学家）。</p></li><li><p><strong>相关性≠因果性</strong>：图中是美国1999-2009年的<strong>自杀人数</strong>与<strong>科研经费花费</strong>的变化图。可以看到两个指标是高度相关。但是他们之间不存在因果性，即不可能因为减少科研经费而导致自杀人数急剧降低。实际上，<strong>相关性通常是对称的，因果性通常是不对称的</strong>（单向箭头），相关性不一定说明了因果性，但因果性一般都会在统计层面导致相关性。</p></li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/casual1.1.JPG" alt="相关性和因果性"></p><ul><li>推荐入门教材：《Causal Inference In Statistics》by Judea Pearl；《Causal Inference》 by Hernan and Robins。</li></ul><h2 id="2-辛普森悖论（Simpson’s-Paradox）"><a href="#2-辛普森悖论（Simpson’s-Paradox）" class="headerlink" title="2.辛普森悖论（Simpson’s Paradox）"></a>2.辛普森悖论（Simpson’s Paradox）</h2><ul><li><strong>概念：在某个条件下的两组数据，分别讨论时都会满足某种性质，可是一旦合并考虑，却可能导致相反的结论。</strong>下面用一个例子来进一步说明这个问题：下面第一个表为男性在接受某种药物治疗后的康复情况，发现经过治疗后的康复率为0.93，而没有经过药物治疗的康复率为0.86。第二张表是女性的情况，在经过药物治疗后的康复率为0.73，而未经过药物治疗的康复率为0.69。由上面数据我们可以发现：<strong>无论是男性女性，药物对治疗该疾病都是有帮助的</strong>。</li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/casual2.2.JPG" alt="辛普森悖论例子"></p><p>但是，第三个表格将男女数据全部合并，我们发现：<strong>药物对治疗该疾病是没有帮助的，反而是有害的</strong>。以上这个问题就是典型的辛普森悖论问题。</p><ul><li><p><strong>概率论解释与混淆变量</strong>：下面就用概率论的方法来解释上述现象发生的实质和原因。</p><p>首先，对变量进行编码表示：</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">X</th><th style="text-align:center">Y</th><th style="text-align:center">Z</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">Women</td><td style="text-align:center">Not Recovered</td><td style="text-align:center">No Treatment</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">Men</td><td style="text-align:center">Recovered</td><td style="text-align:center">Treatment</td></tr></tbody></table></div><p>​        那么上述的“辛普森悖论例子”图片中的①、②、③、④、A以及B便可以用条件概率的形式来表示：</p><script type="math/tex; mode=display">①：P(Y=1|X=1,Z=1)=0.93    \\②：P(Y=1|X=1,Z=0)=0.87     \\③：P(Y=1|X=0,Z=1)=0.73     \\④：P(Y=1|X=0,Z=0)=0.69     \\A：P(Y=1|Z=1)=P(Y=1|Z=1,X=1)·P(X=1|Z=1)+P(Y=1|Z=1,X=0)·P(X=0|Z=1)    \\B：P(Y=1|Z=0)=P(Y=1|Z=0,X=1)·P(X=1|Z=0)+P(Y=1|Z=0,X=0)·P(X=0|Z=0)</script><p>​        这里我们假设$P(X=1|Z=1)$为$q$，则$P(X=0|Z=1)$为$1-q$。假设$P(X=1|Z=0)$为<code>p</code>，则$P(X=0|Z=0)$为$1-p$。那么A和B便可以表示为：</p><script type="math/tex; mode=display">A=①*q+③*(1-q)    \\B=②*p+④*(1-p)</script><p>​        为了更加形象的说明问题，我们将上述的两个式子转化成如下图：</p><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/casual2.3.JPG" alt="辛普森悖论概率论解释"></p><p>​        可见A和B的取值分别由p和q取值来决定的。从上图中可以看到，出现A&lt;B的内在条件是：1.A点趋于③的位置（q趋向于0，即数据中的药物更多是在女性人群中使用）；2.Prob(③)&lt;Prob(①)（即女性用药人群要比男性用药人群更难恢复）。将这两个条件用因素影响图来表示：</p><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/casual2.4.JPG" alt="辛普森悖论因素影响图"></p><p>​        也就是：性别会影响用药情况和人的恢复，而用药也会影响恢复。这里我们称Sex为<strong>混淆因素</strong>，它不仅会影响我们判断是否用药，也会影响最终的恢复情况。如果你是医生，想要判断该药是否对病情有恢复作用，就必须把Sex这一混淆因素去除掉。<strong>而去除混淆变量的方法很简单，我们只需要看分组数据</strong>（只看男性数据或者只看女性数据，而不是将男女数据合到一起而引入了混淆因素）。通过上述的解读，可以得到一个结论：<strong>统计结论的反转是因为存在混淆变量，该变量同时影响着原因和结果</strong>。</p><ul><li><p><strong>因果中间变量</strong>：相对于上述的混淆变量，这里还有一类变量：因果中间变量。下面同样以一个例子来说明。</p><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/casual2.5.JPG" alt="因果中间变量"></p><p>​    上图中有三个因素：血压，是否用药以及治疗效果。其中用药对治疗效果有副作用，而另一方面用药可以降血压进一步来提升治疗效果。这里的血压我们称之为<strong>“因果中间变量”</strong>。</p></li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/casual2.6.JPG" alt="因果中间变量实例"></p><p>​        上图是一组实际中的例子。第一行为低血压人群用药的治疗结果：对于没用药有93%治愈率，而对于用药人群只有87%的治愈率。第二行为高血压人群，对于没用药有73%治愈率，而对于用药人群只有69%的治愈率。通过这两行分类数据发现：无论是高血压人群还是低血压人群，药物只体现了其对康复的副作用。而第三行，将高血压和低血压人群合并，发现得到了药物对治疗有促进作用。如果你是医生，想知道药物对治疗疾病的真正效果，你会从分类角度（高血压\低血压独立来看）还是整体角度来看？如果从分类的角度，则只是单独考虑了药物的副作用而忽略了血压的影响，但事实上药物对治疗的影响还存在一部分是血压带来的效益。所以从分类角度来看是有问题的。所以，<strong>对于这种因果中间变量模型，我们应该从整体的角度来评估药物对治疗的效果</strong>。</p><h2 id="3-概率统计知识（Probability-and-Statistics"><a href="#3-概率统计知识（Probability-and-Statistics" class="headerlink" title="3.概率统计知识（Probability and Statistics)"></a>3.概率统计知识（Probability and Statistics)</h2><ul><li><p><strong>条件概率（conditional Probability）：</strong></p><script type="math/tex; mode=display">P(A|B)=\frac{P(A\cap B)}{P(B)}</script></li><li><p><strong>独立事件（Independence）：</strong></p></li></ul><script type="math/tex; mode=display">P(Mark \ get \ flu|Joe \ is \ 38) = P(Mark \ get \ flu)        \\\Leftrightarrow P(A \cap B)=P(A)·P(B)    \\Independence:  P(A|B)=P(A)    \\Conditional \ Independence:  P(A|B,C)=P(A|C)</script><p>​        其中 <strong>Independence 和 Conditional Independence 是不相等的</strong>，如上式中，给定C使得A和B是条件独立的，但我们是无法得到A和B是独立的。举个例子：A打电话与B打电话本身是独立事件，但是我们假定A和B都给你打电话，如果你的电话响了，那么对于你来说电话要么是A打的要么是B打的，这样A和B事件就是相关了。</p><ul><li><strong>贝叶斯法则（Bayes‘ rule）:</strong></li></ul><script type="math/tex; mode=display">P(A|B)=\frac{P(B \cap A)}{P(B)}=\frac{P(B \cap A)P(A)}{P(B)}=\frac{P(B|A)P(A)}{P(B)}</script><ul><li><strong>期望（Expectation）：</strong></li></ul><script type="math/tex; mode=display">\mathbb{E(x)}=\sum_xxP(X=x)    \\\mathbb{E(g(x))}=\sum_xg(x)P(X=x)    \\样本估计：\mathbb{E(x)}\approx \bar{x} = \frac{1}{n} \sum_{i=1}^{n}x_i    \\条件期望：\mathbb{E}(Y|X=x)=\sum_yyP(Y=y|X=x)</script><ul><li><strong>方差（Variance）：</strong></li></ul><script type="math/tex; mode=display">Var(x)=\mathbb{E}((x-\mu)^2)    \quad \mu=\mathbb{E}X    \\\sigma_x=\sqrt{Var(X)}    \\样本估计：Var(X)    \approx \hat{\sigma_x}^2=\frac{1}{n-1}\sum_{i=1}^n(x_i-\bar{x})^2</script><ul><li><strong>协方差（Covariance）：</strong></li></ul><script type="math/tex; mode=display">Cov(X,Y)=\sigma_{XY}\triangleq \mathbb{E}[(x-\mathbb{E}X)(y-\mathbb{E}Y)]    \\样本估计:Cov(X,Y) \approx \hat{\sigma}_{XY} = \frac{1}{n-1} \sum_{i=1}^{n}(x_i-\bar{x})(y_i-\bar{y})    \\</script><ul><li><strong>相关系数（Correlation）：</strong></li></ul><script type="math/tex; mode=display">\rho_{XY}=\frac{\sigma_{XY}}{\sigma_X \sigma_Y}=\frac{Cov(X,Y)}{\sqrt{Var(X)}\sqrt{Var(Y)}}\in[-1,1]    \\样本估计:\rho_{XY} \approx \hat{\rho}_{XY}=\frac{\hat{\sigma}_{XY}}{\hat{\sigma}_X \hat{\sigma}_{Y}}</script><h2 id="4-图模型（Graph-Model）"><a href="#4-图模型（Graph-Model）" class="headerlink" title="4.图模型（Graph Model）"></a>4.图模型（Graph Model）</h2><ul><li><p><strong>完全图（Complete graph）</strong>：图中任意两个节点之间都存在一条连边。</p></li><li><p><strong>Parent和Child节点</strong>：如果有一条有向边，那么这条有向边的起始点为Parent节点，而终止点为Child节点。</p></li><li><p><strong>ancestor和descendent</strong>：如果两个节点被一条有向路径连接，那么第一个节点被在这条路径上称为其他节点的ancestor，而其他节点是第一个节点的descendent。具体可以见下图所示。</p></li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/casual4.1.JPG" alt="祖先与后代"></p><ul><li><strong>闭环图（cyclic）：</strong>含有闭环的有向图，如下图所示:</li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/casual4.2.JPG" alt="Cyclic"></p><ul><li><strong>非闭环图（acyclic directed graph）DAG：</strong>不含闭环的有向图，如下图所示：</li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/casual4.3.JPG" alt="Cyclic"></p><h2 id="5-结构因果模型（Structural-Causal-Model）"><a href="#5-结构因果模型（Structural-Causal-Model）" class="headerlink" title="5.结构因果模型（Structural Causal Model）"></a>5.结构因果模型（Structural Causal Model）</h2><ul><li><p><strong>结构因果模型（SCM）刻画：</strong>假设原因X导致了结果Y，那么这种<strong>直接关系</strong>就可以用$Y=f(X)$这一结构因果模型来表示。另一种情况，如果原因X导致结果Z，而结果Z导致结果Y，那么这种<strong>间接关系</strong>可以用$Y=f(g(X))$这一结构因果模型来表示。无论是直接还是间接，X都是Y的原因（cause）。</p></li><li><p><strong>因果、SCM以及图模型关系：</strong>下面就用3个例子来说明现实世界中的因果如何转化成结构因果模型以及图模型。首先，是直接因果关系的情况，即只需一条有向边表示即可。</p></li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/casual5.1.JPG" alt="结构因果模型1"></p><p>​        其次是结果Y由两个原因X、Z共同导致的情况：</p><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/casual5.2.JPG" alt="结构因果模型2"></p><p>​        最后是间接因果关系的情况，即前面提到复合函数的情况。</p><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/casual5.3.JPG" alt="结构因果模型3"></p><ul><li><strong>外生节点与内生节点：</strong>上面我们提到了3种比较简单的因果模型，下面我们来看一个相对复杂一点的因果图模型。如下图，原因X和W共同导致了结果Z，而结果Z导致了结果Y。那么我们便可以画出对应的因果图模型如下所示。在图中，<strong>我们称X和W这类没有父亲的节点为外生节点（exogenous），而称Z和Y这类有父亲的节点为内生节点（endogenous）</strong>。即：根节点<code>&lt;=&gt;</code>外生节点集合U，根节点的后代节点（descendent）<code>&lt;=&gt;</code>内生节点集合V，连边<code>&lt;=&gt;</code>对应的函数映射。</li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/casual5.4.JPG" alt="外生节点与内生节点"></p><h2 id="6-因果与相关（Intransitive-Case）"><a href="#6-因果与相关（Intransitive-Case）" class="headerlink" title="6.因果与相关（Intransitive Case）"></a>6.因果与相关（Intransitive Case）</h2><ul><li><strong>1.如果两个变量统计相关，那么这两个变量未必具有因果性</strong>。</li><li><p><strong>2.如果两个变量存在因果性，那么这两个变量在<font color="red">大多数情况下</font>是统计相关的，但未必一定相关。</strong></p></li><li><p>下面用一个例子来说明上述结论2中“未必相关”的部分，下面是该例子的结构因果模型：</p></li></ul><script type="math/tex; mode=display">SCM:    V=\{X,Y,Z\},U=\{U_X,U_Y,U_Z\},F=\{f_x,f_y,f_z\}    \\f_x:X=U_x    \\f_y:Y=\left\{\begin{aligned}a \quad & if \ X=1,U_y=1 \\b \quad & if \ X=2,U_y=1 \\c \quad & if \ U_y=2\end{aligned}\right.    \\f_z:Z=\left\{\begin{aligned}i \quad & if \ Y=c,U_z=1 \\j \quad & if \ U_z=2 \\\end{aligned}\right.</script><p>​    根据上述的结构因果模型可以作得对应的图模型：</p><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/casual6.1.JPG" alt="Intransitive case图模型"></p><p>​    从模型中我们可以发现，$P(Z=i)=P(Z=i|X=1)=P(Z=i|X=2)$三者都是相等，即Z的取值实际上和X没有关系，而完全取决于$ U_y $和$U_z$，$Z$和$X$之间便是独立的。因此，实际上两个还有因果关系的变量也未必存在统计相关性，这也给因果推断带来了困难。</p><h2 id="7-链式结构（Chain）"><a href="#7-链式结构（Chain）" class="headerlink" title="7.链式结构（Chain）"></a>7.链式结构（Chain）</h2><ul><li><strong>V-Structure的三种结构</strong>：①chain、②fork、③collider（所谓V-structure就是含有三个顶点的图，是图模型的基本组件，掌握了这三个基本组件便一通百通），具体对应的图模型见下图所示。</li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/causal7_0.JPG" alt="V-Structure"></p><ul><li><strong>Chain上的条件独立结论：</strong>从下图（题注为：Chain的性质）中，我们发现<code>X</code>和<code>Z</code>之间存在很多的链式结构。按照前几节的内容可以得到下面结论：<code>X</code>与<code>Y1...Yn</code>都是大概率统计相关的，且<code>Z</code>与<code>Y1...Yn</code>也是大概率统计相关的。进一步可以得到<code>Z</code>和<code>X</code>也是大概率统计相关。</li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/causal7_2.JPG" alt="Chain的性质"></p><p>​    <strong>但是如果其中的<code>Y</code>是已知条件（即Condition在<code>Y1..Yn</code>上所有通路），那么<code>X</code>和<code>Z</code>便是统计独立的（相当于<code>X</code>和<code>Z</code>间所有通路断开）——这是链式结构的重要性质。</strong></p><h2 id="8-叉式结构（Fork）"><a href="#8-叉式结构（Fork）" class="headerlink" title="8.叉式结构（Fork）"></a>8.叉式结构（Fork）</h2><ul><li><strong>Fork上的条件独立结论：</strong>从下图（题注为：Fork的性质）中，我们发现<code>Ux</code>、<code>Uy</code>以及<code>Uz</code>为三个外生变量，而<code>X</code>、<code>Y</code>和<code>Z</code>之间构成了Fork结构。按照前几节的内容可以得到下面结论：<code>X</code>与<code>Y</code>都是大概率统计相关的，且<code>X</code>与<code>Z</code>也是大概率统计相关的。进一步可以得到<code>Y</code>和<code>Z</code>也是大概率统计相关。</li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/causal8_1.JPG" alt="Fork的性质"></p><p>​    <strong>但是如果其中的<code>X</code>是已知条件（即Condition在<code>X</code>上），那么<code>Y</code>和<code>Z</code>便是统计独立的（相当于<code>Y</code>和<code>Z</code>间不存在通路）——这是叉式结构的重要性质。</strong></p><h2 id="9-对撞结构（Collider）"><a href="#9-对撞结构（Collider）" class="headerlink" title="9.对撞结构（Collider）"></a>9.对撞结构（Collider）</h2><p><strong>Collider上的条件独立结论：</strong>从下图（题注为：Collider的性质）中，我们发现<code>Ux</code>、<code>Uy</code>以及<code>Uz</code>为三个外生变量，而<code>X</code>、<code>Y</code>和<code>Z</code>之间构成了Collider结构。按照前几节的内容介绍，可以得到下面结论：<code>X</code>与<code>Z</code>都是大概率统计相关的，且<code>Y</code>与<code>Z</code>也是大概率统计相关的。而<code>X</code>和<code>Y</code>却是大概率统计独立的。</p><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/causal9_1.JPG" alt="Collider的性质"></p><p>​    <strong>但是如果其中的<code>Z</code>是已知条件（即Condition在<code>Z</code>上），那么<code>X</code>和<code>Y</code>便是统计相关的——这是对撞结构的重要性质。</strong></p><p><font color="red">注：</font>如果<code>Z</code>还存在后代，那么Condition在<code>Z</code>后代上，<code>X</code>和<code>Y</code>依旧是大概率统计相关的。</p><h2 id="10-D-分隔（D-Separation）"><a href="#10-D-分隔（D-Separation）" class="headerlink" title="10.D-分隔（D-Separation）"></a>10.D-分隔（D-Separation）</h2><ul><li><strong>D-分隔定义</strong>：有向图相关性的分隔。通过第7、8、9章的介绍，我们可以得到下表的结论：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">V-Structure</th><th style="text-align:center">Uncondition</th><th style="text-align:center">Condition</th></tr></thead><tbody><tr><td style="text-align:center">Fork</td><td style="text-align:center">Unblock</td><td style="text-align:center">Block</td></tr><tr><td style="text-align:center">Chain</td><td style="text-align:center">Unblock</td><td style="text-align:center">Block</td></tr><tr><td style="text-align:center">Collider（or descendents）</td><td style="text-align:center">Block</td><td style="text-align:center">Unblock</td></tr></tbody></table></div><p><font color="red">注：</font>其中的Unblock为dependent，而Block为independent。</p><ol><li>对于<strong>Fork</strong>：X&lt;—Z—&gt;Y，<code>X</code>和<code>Y</code>是d-connected的，即前面提到的Unblock（连通通路）。</li><li>对于<strong>Chain</strong>：X—&gt;Z—&gt;Y，<code>X</code>和<code>Y</code>是d-connected的，即前面提到的Unblock（连通通路）。</li><li>对于<strong>Collider</strong>：X—&gt;Z&lt;—Y，<code>X</code>和<code>Y</code>是d-separated的，即前面提到的Block（阻断通路）。</li></ol><ul><li><p>如果<code>X</code>和<code>Y</code>是d-connected，那么<code>X</code>和<code>Y</code>是相关的。反之，如果<code>X</code>和<code>Y</code>是d-separated，那么<code>X</code>和<code>Y</code>是独立的。</p></li><li><p>在Uncondition的时候，对撞结构会阻断通路。而叉状和链状结构会连通相关通路。如果Condition在叉状和链状结构上，通路会被阻断；而Condition在对撞结构或其子节点上，通路就被打开。</p></li><li><p>如果<code>X</code>和<code>Y</code>之间的每一条通路都被阻断，那么<code>X</code>和<code>Y</code>就被D-分隔。另一方面，如果<code>X</code>和<code>Y</code>之间存在一条通路连通，那么<code>X</code>和<code>Y</code>就是D-连接。</p></li><li><p><strong>对于复杂的图，只要拆分成V-structure就可以用D-Separation理论来分析。</strong>下面是一个复杂图的D-分隔分析方法。其中，’$\equiv$‘ 表示变量间相关，而‘$\perp$’ 表示变量间独立。</p></li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/causal10_1.JPG" alt="复杂图的D-Separation"></p><h2 id="11-模型检验和等价类（Model-Testing-and-Causal-Search）"><a href="#11-模型检验和等价类（Model-Testing-and-Causal-Search）" class="headerlink" title="11.模型检验和等价类（Model Testing and Causal Search）"></a>11.模型检验和等价类（Model Testing and Causal Search）</h2><ul><li><p><strong>模型检验</strong>：通过给定图模型，可以从中确定出各个变量间的因果关系和统计相关性。而在实际中我们往往有这些变量的统计数据，需要做的就是<strong>从统计数据中估计出变量间的相关性和因果性</strong>，这里估计的方法有很多，如：变量间的线性回归或者非线性回归等等。<strong>图模型得到的因果推断</strong>和<strong>数据统计得到的因果结论</strong>应该是<strong>统一的</strong>，这便有了模型检验。</p></li><li><p><strong>等价类</strong>：从前面的介绍我们可以得到 Fork 和 Chain 的很多性质都是相同的。但 Chain 和 Collider，Fork 和 Collider的性质差异都很大。即：</p><ul><li>叉状和链状结构在统计相关性上是等价的。</li><li>对撞和链式结构并不等价。</li><li>对撞和叉状结构也不等价。</li><li>有连通父节点的对撞结构也是等价类的一种情况。（collider的两个父节点之间存在连边）</li></ul><p><strong>判断两个有向图等价就看他们是否有相同的骨架，也就是在两个有向图里去掉等价类的部分之后，剩下的部分是否等价。</strong></p></li></ul><h2 id="12-乘积分解法则（Rule-of-Product-Decomposition）"><a href="#12-乘积分解法则（Rule-of-Product-Decomposition）" class="headerlink" title="12.乘积分解法则（Rule of Product Decomposition）"></a>12.乘积分解法则（Rule of Product Decomposition）</h2><p><strong>含义：</strong>对于每一个结构化因果模型所对应的联合分布，都可以进行乘积分解，这种乘积分解可以大大的减少联合分布的参数空间维度，使得在数据量有限的情况下，对因果模型联合分布有效的估计成为了可能。这种乘积分解将联合分布分解成若干项，每一项都是模型中的一个变量基于其父节点的条件概率。乘积分解公式的推导基于条件概率公式，用到了D-Separation中的链状结构。最终得到乘积分解法则：</p><script type="math/tex; mode=display">P(X_1,X_2,...X_n)=\Pi_{i=1}^{n}P(X_i|pa(X_i))</script><p>其中$pa(X_i)$是变量$X_i$的所有父节点。</p><p>下面用一个例子来证明该法则：</p><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/causal12_1.JPG" alt="乘积分解法则例子"></p><p>实际上只要证明下面的等式，而下面的等式只需要根据D-Separation即可得到。</p><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/causal12_2.JPG" alt="乘积分解法则证明"></p><h2 id="13-混淆变量（Confounding-Variable）"><a href="#13-混淆变量（Confounding-Variable）" class="headerlink" title="13.混淆变量（Confounding Variable）"></a>13.混淆变量（Confounding Variable）</h2><ul><li><p>代表原因的变量：Treatment，代表结果的变量：Outcome。</p></li><li><p><strong>混淆变量</strong>（Confounding Variable/Confounder）：同时影响原因和结果的变量。混淆变量会引入非因果的统计相关性。</p></li><li><p><strong>观测数据</strong>（Observational Study） VS <strong>实验数据</strong>（Experiment）</p><ul><li>观测数据是由被动观测和收集产生。观测数据中数据采集源和采集环境没有受到影响和干预。</li><li>实验数据是干预的环境下得到的结果。一般是先干预再观测。</li></ul><p>例如：要想研究锻炼和感冒的关系。随机取选择样本，记录每一个人的锻炼量和感冒次数就属于观测数据。而实验数据：随机选择参与者，其中一部分进行干预（锻炼），而另一部分不进行干预（不锻炼），记录感冒的次数。</p></li><li><p>随机试验一般是先招募试验个体，然后随机的给受验个体指定Treatment和Control，然后再比较Outcome的区别。</p></li><li><p>观测数据中变量可能呈现相关性，但只有试验数据可以直接验证因果关系。因为随机实验能够去掉Confounding的影响。</p></li></ul><h2 id="14-观测数据与试验数据（Observation-Study-And-Experiment）"><a href="#14-观测数据与试验数据（Observation-Study-And-Experiment）" class="headerlink" title="14.观测数据与试验数据（Observation Study And Experiment）"></a>14.观测数据与试验数据（Observation Study And Experiment）</h2><ul><li><p>观测数据中可能体现的仅仅是统计相关性，而可靠的试验数据可能直接揭示因果性，因为观测数据往往受混淆变量的影响，而随机试验可以消除这种影响。</p></li><li><p>随机试验使得试验组和对照组中个体的混淆变量的分布相同，因此Outcome的变化就可以归咎于Treatment的影响。</p></li></ul><h2 id="15-消除混淆：后门准则（Backdoor-Criterion）"><a href="#15-消除混淆：后门准则（Backdoor-Criterion）" class="headerlink" title="15.消除混淆：后门准则（Backdoor Criterion）"></a>15.消除混淆：后门准则（Backdoor Criterion）</h2><p>有了d-分离的概念基础，我们就可以回到一开始提到的混淆的问题，按照之前所述，我们希望消除混淆因子带来的“伪相关”，找出真正的因果关系。一种消除混杂的方法叫<strong>后门准则</strong>（backdoor criterion）。首先需要明确什么是前门路径，什么是后门路径。</p><p><strong>变量$A$和$Y$之间的后门路径就是连接$A$和$Y$但是箭头不从变量$A$出发的路径。</strong>比如：$A \gets L \to Y$，便称为$A$和$Y$之间的后门路径（backdoor path）。而$A\to Y$就是前门路径（frontdoor path）。</p><p>后门准则可以简述如下：<strong>如果我们有足够的数据能够将所有</strong>$A$<strong>和</strong>$Y$之间的后门路径全部阻断，那么我们就可以识别（identify）$A$<strong>和 $Y$</strong>之间的因果关系。</p><p>简单来说，混淆（confounding）就是因果变量之间的共因。而混淆因子（confounder）就是能够阻断因果变量之间所有后门路径的变量（可能混杂因子不止一个）。这里要特别说明的是，<strong>混淆因子的概念是建立在因果图结构之上的，必须要指定因果图的结构，混杂因子才有意义</strong>。在一个复杂的因果图中，某个变量可能阻断了某两个变量之间的所有后门路径，因此它是某两个变量的混孝因子，但它对另一个路径来说可能并不是混淆因子。因此我们纠缠于谁是混淆因子没有实际意义，有意义的是：以哪个变量为条件可以消除这条路径上的混淆。</p><p>因此，混淆因子也可以被更准确地定义如下：</p><ol><li>【从结构角度定义】如果以某个变量 $L$为条件使得变量 $A$  和 $Y$ 之间的相关性发生了更改（即原来相关变为不相关、原来不相关变为相关），那么该变量 $L$  为 $A$ 和 $Y$ 之间的混杂因子。</li><li>【从传统角度定义】当变量 $L$ 满足以下三个条件时， $L$ 便是 $A$ 和 $Y$ 之间的混淆因子：</li></ol><ul><li>$L$与$A$ 相关</li><li>当以$A$ 为条件时$L$ 与$Y$ 相关</li><li>$L$ 不在$A$ 到$Y$ 的因果关系路径中</li></ul><p>要注意的是，结构角度的定义并不一定得到正确的判断，很多情况下会带来选择偏倚等错误判断，所以两个角度结合起来判断更好。</p>]]></content>
      
      
      <categories>
          
          <category> 因果推断 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 因果推断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DoWhy实战笔记</title>
      <link href="2021/08/04/yin-guo-tui-duan/dowhy-shi-zhan-bi-ji/"/>
      <url>2021/08/04/yin-guo-tui-duan/dowhy-shi-zhan-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="DoWhy实战笔记"><a href="#DoWhy实战笔记" class="headerlink" title="DoWhy实战笔记"></a>DoWhy实战笔记</h1><p><strong>「因果推断」</strong>（causal inference）是基于观察数据进行反事实估计，分析干预与结果之间的因果关系的一门科学。虽然在因果推断领域已经有许多的框架与方法，但大部分方法缺乏稳定的实现。DoWhy 是微软发布的一个用于进行端到端因果推断的 Python 库，其特点在于：</p><ul><li>提供了一种原则性的方法将给定的问题转化为一张因果图，保证所有假设的明确性；</li><li>提供了一种面向多种常用因果推断方法的统一接口，并结合了两种主要的因果推断框架；</li><li>自动化测试假设的正确性及估计的鲁棒性。</li></ul><p>DoWhy 基于因果推断的两大框架构建：<strong>「图模型」</strong>与<strong>「潜在结果模型」</strong>。具体来说，其使用基于图的准则与 do-积分来对假设进行建模并识别出非参数化的因果效应；而在估计阶段则主要基于潜在结果框架中的方法进行估计。DoWhy 的整个因果推断过程可以划分为四大步骤：</p><ul><li><strong>「建模」</strong>（model）：利用假设（先验知识）对因果推断问题建模；</li><li><strong>「识别」</strong>（identify）：在假设（模型）下识别因果效应的表达式（因果估计量）；</li><li><strong>「估计」</strong>（estimate）：使用统计方法对表达式进行估计；</li><li><strong>「反驳」</strong>（refute）：使用各种鲁棒性检查来验证估计的正确性。</li></ul><p>官方文档链接如下：<a href="https://github.com/microsoft/dowhy">DoWhy微软官方教程</a>，具体的DoWhy实现流程图下图所示：</p><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/dowhy1.png" alt="DoWhy实现流程图"></p><h2 id="1-建模（Model）"><a href="#1-建模（Model）" class="headerlink" title="1.建模（Model）"></a>1.建模（Model）</h2><p>DoWhy 会为每个问题创建一个因果图模型，以保证因果假设的明确性。该因果图不需要是完整的，你可以只提供部分图，来表示某些变量的先验知识（即指定其类型），DoWhy 支持自动将剩余的变量视为潜在的混杂因子。</p><p>目前，DoWhy 支持如下形式的因果假设：</p><ul><li><strong>「图」</strong>（Graph）：提供 gml 或 dot 形式的因果图，具体可以是文件或字符串格式</li><li><strong>「命名变量集合」</strong>（Named variable sets）：直接提供变量的类型，包括<strong>「混杂因子」</strong>（common causes / cofounders）、<strong>「工具变量」</strong>（instrumental variables）、<strong>「结果修改变量」</strong>（effect modifiers）、<strong>「前门变量」</strong>（front-door variables）等</li></ul><h2 id="2-识别（Identify）"><a href="#2-识别（Identify）" class="headerlink" title="2.识别（Identify）"></a>2.识别（Identify）</h2><p>基于构建的因果图，DoWhy 会基于所有可能的方式来识别因果效应。具体来说，会使用基于图的准则与 do-积分 来找出可以识别因果效应的表达式，支持的识别准则有：</p><ul><li><strong>「后门准则」</strong>（Back-door criterion）</li><li><strong>「前门准则」</strong>（Front-door criterion）</li><li><strong>「工具变量」</strong>（Instrumental Variables）</li><li><strong>「中介-直接或间接结果识别」</strong>（Mediation-Direct and indirect effect identification）</li></ul><h2 id="3-估计（Estimate）"><a href="#3-估计（Estimate）" class="headerlink" title="3.估计（Estimate）"></a>3.估计（Estimate）</h2><p>DoWhy 支持一系列基于上述识别准则的估计方法，此外还提供了非参数置信空间与排列测试来检验得到的估计的统计显著性。具体支持的估计方法列表如下：</p><ul><li><p><strong>「基于估计干预分配的方法」</strong></p></li><li><ul><li>基于倾向的分层（Propensity-based Stratification）</li><li>倾向得分匹配（Propensity Score Matching）</li><li>逆向倾向加权（Inverse Propensity Weighting）</li></ul></li><li><p><strong>「基于估计结果模型的方法」</strong></p></li><li><ul><li>线性回归（Linear Regression）</li><li>广义线性模型（Generalized Linear Models）</li></ul></li><li><p><strong>「基于工具变量等式的方法」</strong></p></li><li><ul><li>二元工具/Wald 估计器（Binary Instrument/Wald Estimator）</li><li>两阶段最小二乘法（Two-stage least squares）</li><li>非连续回归（Regression discontinuity）</li></ul></li><li><p><strong>「基于前门准则和一般中介的方法」</strong></p></li><li><ul><li>两层线性回归（Two-stage linear regression）</li></ul></li></ul><p>此外，DoWhy 还支持调用外部的估计方法，例如 EconML 与 CausalML。</p><h2 id="4-反驳（Refuse）"><a href="#4-反驳（Refuse）" class="headerlink" title="4.反驳（Refuse）"></a>4.反驳（Refuse）</h2><p>DoWhy 支持多种反驳方法来验证估计的正确性，具体列表如下：</p><ul><li><strong>「添加随机混杂因子」</strong>：添加一个随机变量作为混杂因子后估计因果效应是否会改变（期望结果：不会）</li><li><strong>「安慰剂干预」</strong>：将真实干预变量替换为独立随机变量后因果效应是否会改变（期望结果：因果效应归零）</li><li><strong>「虚拟结果」</strong>：将真实结果变量替换为独立随机变量后因果效应是否会改变（期望结果：因果效应归零）</li><li><strong>「模拟结果」</strong>：将数据集替换为基于接近给定数据集数据生成过程的方式模拟生成的数据集后因果效应是否会改变（期望结果：与数据生成过程的效应参数相匹配）</li><li><strong>「添加未观测混杂因子」</strong>：添加一个额外的与干预和结果相关的混杂因子后因果效应的敏感性（期望结果：不过度敏感）</li><li><strong>「数据子集验证」</strong>：将给定数据集替换为一个随机子集后因果效应是否会改变（期望结果：不会）</li><li><strong>「自助验证」</strong>：将给定数据集替换为同一数据集的自助样本后因果效应是否会改变（期望结果：不会）</li></ul><h2 id="5-基本流程（Basic-Operation）"><a href="#5-基本流程（Basic-Operation）" class="headerlink" title="5.基本流程（Basic Operation）"></a>5.基本流程（Basic Operation）</h2><ul><li><strong>第一步，安装DoWhy包</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">pip install dowhy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>第二步，导入项目相关包</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> dowhy<span class="token keyword">import</span> dowhy<span class="token punctuation">.</span>datasets<span class="token keyword">from</span> dowhy <span class="token keyword">import</span> CausalModel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>第三步，导入数据集。</strong>本例中为了简单我们模拟了不同变量之间的<strong>「线性」</strong>关系。具体代码如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> dowhy<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>linear_dataset<span class="token punctuation">(</span>beta<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment"># beta 表示真实的因果效应</span>        num_common_causes<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment"># 混杂因子，用 W 表示，作用于干预变量和结果变量</span>        num_instruments<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment"># 工具变量，用 Z 表示，作用于干预变量（间接影响结果）</span>        num_effect_modifiers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment"># 效果修改变量，用 X 表示，作用于结果变量</span>        num_samples<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token comment"># 样本数量</span>        treatment_is_binary<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token comment"># 干预为二元变量，用 v 表示</span>        num_discrete_common_causes<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>df <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"df"</span><span class="token punctuation">]</span> <span class="token comment"># DoWhy 使用 pandas 的 dataframe 来载入数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"dot_graph"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 还可以输出 gml_graph，内容一致只是表达形式不同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序得到如下结果：</p><pre class="line-numbers language-none"><code class="language-none">         X0   Z0        Z1        W0  ...        W3  W4    v0          y0 -0.557967  1.0  0.321734 -1.766489  ...  0.886118   1  True   6.6864311 -0.347747  1.0  0.889506  0.794701  ...  0.620782   3  True  15.8873052 -0.069984  0.0  0.222205 -0.872013  ...  0.411465   0  True   8.9313943 -2.132195  0.0  0.204009 -0.597346  ...  1.302131   1  True   3.2534704 -0.118728  0.0  0.664323  0.403242  ...  2.166823   1  True  19.692264[5 rows x 10 columns]digraph { U[label="Unobserved Confounders"]; U-&gt;y;v0-&gt;y;U-&gt;v0;W0-&gt; v0; W1-&gt; v0; W2-&gt; v0; W3-&gt; v0; W4-&gt; v0;Z0-&gt; v0; Z1-&gt; v0;W0-&gt; y; W1-&gt; y; W2-&gt; y; W3-&gt; y; W4-&gt; y;X0-&gt; y;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>第四步，建模。</strong>以 GML 图的形式构建因果图，代码如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># With graph</span>model<span class="token operator">=</span>CausalModel<span class="token punctuation">(</span>        data <span class="token operator">=</span> df<span class="token punctuation">,</span>        treatment<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">"treatment_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        outcome<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">"outcome_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        graph<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">"gml_graph"</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span>model<span class="token punctuation">.</span>view_model<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行代码可以得到如下的因果图：</p><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/dowhy2.png" alt="建模因果图"></p><p>也可以通过指定具体变量的方式来生成图（本例中由于数据是模拟的，所以各种方式均可以生成），代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Without graph</span>model<span class="token operator">=</span> CausalModel<span class="token punctuation">(</span>        data<span class="token operator">=</span>df<span class="token punctuation">,</span>        treatment<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">"treatment_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        outcome<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">"outcome_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        instruments<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">"instrument_names"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         common_causes<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">"common_causes_names"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        effect_modifiers<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">"effect_modifier_names"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到的图与上一张等价的结果，其中包含了数据中给定的先验知识（变量分类），我们可以利用这张图来识别因果效应（从因果估计量到概率表达式）并进行估计。</p><ul><li><strong>第五步，识别。</strong>可以脱离于数据，仅根据图进行识别，其给出的结果是一个用于计算的<strong>「表达式」</strong>。具体的代码如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">identified_estimand <span class="token operator">=</span> model<span class="token punctuation">.</span>identify_effect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>identified_estimand<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">Estimand type: nonparametric-ate### Estimand : 1Estimand name: backdoorEstimand expression:  d                                    ─────(Expectation(y|W2,X0,W0,W3,W4,W1))d[v₀]                                  Estimand assumption 1, Unconfoundedness: If U→{v0} and U→y then P(y|v0,W2,X0,W0,W3,W4,W1,U) = P(y|v0,W2,X0,W0,W3,W4,W1)### Estimand : 2Estimand name: ivEstimand expression:Expectation(Derivative(y, [Z1, Z0])*Derivative([v0], [Z1, Z0])**(-1))Estimand assumption 1, As-if-random: If U→→y then ¬(U →→{Z1,Z0})Estimand assumption 2, Exclusion: If we remove {Z1,Z0}→{v0}, then ¬({Z1,Z0}→y)### Estimand : 3Estimand name: frontdoorNo such variable found!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过 <code>proceed_when_unidentifiable=True</code> 参数来忽略观察性数据中未观测混杂因子的 warning。</p><ul><li><strong>第六步，估计。</strong>识别阶段得到的表达式将在<strong>「估计阶段」</strong>基于实际数据进行计算，注意这两个阶段是独立开来的。估计的代码如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">estimate <span class="token operator">=</span> model<span class="token punctuation">.</span>estimate_effect<span class="token punctuation">(</span>identified_estimand<span class="token punctuation">,</span>        method_name<span class="token operator">=</span><span class="token string">"backdoor.propensity_score_stratification"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>estimate<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Causal Estimate is "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>estimate<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出的结果为：</p><pre class="line-numbers language-none"><code class="language-none">*** Causal Estimate ***## Identified estimandEstimand type: nonparametric-ate### Estimand : 1Estimand name: backdoorEstimand expression:  d                                    ─────(Expectation(y|W2,W1,X0,W4,W0,W3))d[v₀]                                  Estimand assumption 1, Unconfoundedness: If U→{v0} and U→y then P(y|v0,W2,W1,X0,W4,W0,W3,U) = P(y|v0,W2,W1,X0,W4,W0,W3)## Realized estimandb: y~v0+W2+W1+X0+W4+W0+W3Target units: ate## EstimateMean value: 9.373956896364618Causal Estimate is 9.373956896364618<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以通过 <code>target_units</code> 参数来选择因果效应分析的群体，如 <code>ate</code>（群体层面）、<code>att</code>（干预组）、<code>ate</code>（对照组）。也可以指定结果修改变量来分析不同变量对结果的影响。</p><ul><li><p><strong>第七步，反驳。</strong>下面给出一些对得到的估计进行反驳的方式：</p><ul><li>添加一个随机的混杂因子变量</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">res_random<span class="token operator">=</span>model<span class="token punctuation">.</span>refute_estimate<span class="token punctuation">(</span>identified_estimand<span class="token punctuation">,</span> estimate<span class="token punctuation">,</span> method_name<span class="token operator">=</span><span class="token string">"random_common_cause"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res_random<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>添加一个未观测的混杂因子变量</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">res_unobserved<span class="token operator">=</span>model<span class="token punctuation">.</span>refute_estimate<span class="token punctuation">(</span>identified_estimand<span class="token punctuation">,</span> estimate<span class="token punctuation">,</span> method_name<span class="token operator">=</span><span class="token string">"add_unobserved_common_cause"</span><span class="token punctuation">,</span>       confounders_effect_on_treatment<span class="token operator">=</span><span class="token string">"binary_flip"</span><span class="token punctuation">,</span> confounders_effect_on_outcome<span class="token operator">=</span><span class="token string">"linear"</span><span class="token punctuation">,</span>                                   effect_strength_on_treatment<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> effect_strength_on_outcome<span class="token operator">=</span><span class="token number">0.02</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res_unobserved<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>用随机变量代替干预</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">res_placebo<span class="token operator">=</span>model<span class="token punctuation">.</span>refute_estimate<span class="token punctuation">(</span>identified_estimand<span class="token punctuation">,</span> estimate<span class="token punctuation">,</span>        method_name<span class="token operator">=</span><span class="token string">"placebo_treatment_refuter"</span><span class="token punctuation">,</span> placebo_type<span class="token operator">=</span><span class="token string">"permute"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res_placebo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>移除数据的一个随机子集</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">res_subset<span class="token operator">=</span>model<span class="token punctuation">.</span>refute_estimate<span class="token punctuation">(</span>identified_estimand<span class="token punctuation">,</span> estimate<span class="token punctuation">,</span>        method_name<span class="token operator">=</span><span class="token string">"data_subset_refuter"</span><span class="token punctuation">,</span> subset_fraction<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res_subset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-实战案例（Practical-Case）"><a href="#6-实战案例（Practical-Case）" class="headerlink" title="6.实战案例（Practical Case）"></a>6.实战案例（Practical Case）</h2></li><li><p><strong>案例背景：</strong>下面将通过一个基于真实世界数据的案例对 DoWhy 的工作流程进行进一步说明。在本例中，我们的研究问题是估计当消费者在预定酒店时，为其分配一间与之前预定过的房间不同时对消费者取消当前预定的影响。分析此类问题的黄金标准是<strong>「随机对照试验」</strong>（Randomized Controlled Trials），即每位消费者被随机分配到两类干预中的一类：为其分配与之前预定过的房间相同或不同的房间。案例官方说明如下：<a href="https://towardsdatascience.com/beyond-predictive-models-the-causal-story-behind-hotel-booking-cancellations-d29e8558cbaf">Beyond Predictive Models: The Causal Story Behind Hotel Booking Cancellations</a>。</p></li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/dowhy4.png" alt="案例图"></p><p>然而，实际上对于酒店来说其不可能进行这样的试验，只能使用历史数据（观察性数据）来进行评估。我们首先导入相关包与数据集：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dowhy<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">"dowhy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>dataset <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'https://raw.githubusercontent.com/Sid-darthvader/DoWhy-The-Causal-Story-Behind-Hotel-Booking-Cancellations/master/hotel_bookings.csv'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该数据集包含如下参数：</p><pre class="line-numbers language-none"><code class="language-none">Index(['hotel', 'is_canceled', 'lead_time', 'arrival_date_year',       'arrival_date_month', 'arrival_date_week_number',       'arrival_date_day_of_month', 'stays_in_weekend_nights',       'stays_in_week_nights', 'adults', 'children', 'babies', 'meal',       'country', 'market_segment', 'distribution_channel',       'is_repeated_guest', 'previous_cancellations',       'previous_bookings_not_canceled', 'reserved_room_type',       'assigned_room_type', 'booking_changes', 'deposit_type', 'agent',       'company', 'days_in_waiting_list', 'customer_type', 'adr',       'required_car_parking_spaces', 'total_of_special_requests',       'reservation_status', 'reservation_status_date'],      dtype='object')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>数据预处理</strong>。下面我们将创建一些有用的特征，来减少原始数据的维度。具体来说，我们将创建如下三个特征：<ul><li><strong>「Total Stay」</strong> = <code>stays_in_weekend_nights</code> + <code>stays_in_week_nights</code></li><li><strong>「Guests」</strong> = <code>adults</code> + <code>children</code> + <code>babies</code></li><li><strong>「Different_room_assigned」</strong> = 1 if <code>reserved_room_type</code> &amp; <code>assigned_room_type</code> are different, 0 otherwise</li></ul></li></ul><p>具体创建过程如下（很基础的 pandas 操作，不过多赘述）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Total stay in nights</span>dataset<span class="token punctuation">[</span><span class="token string">'total_stay'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">'stays_in_week_nights'</span><span class="token punctuation">]</span><span class="token operator">+</span>dataset<span class="token punctuation">[</span><span class="token string">'stays_in_weekend_nights'</span><span class="token punctuation">]</span><span class="token comment"># Total number of guests</span>dataset<span class="token punctuation">[</span><span class="token string">'guests'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">'adults'</span><span class="token punctuation">]</span><span class="token operator">+</span>dataset<span class="token punctuation">[</span><span class="token string">'children'</span><span class="token punctuation">]</span> <span class="token operator">+</span>dataset<span class="token punctuation">[</span><span class="token string">'babies'</span><span class="token punctuation">]</span><span class="token comment"># Creating the different_room_assigned feature</span>dataset<span class="token punctuation">[</span><span class="token string">'different_room_assigned'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>slice_indices <span class="token operator">=</span>dataset<span class="token punctuation">[</span><span class="token string">'reserved_room_type'</span><span class="token punctuation">]</span><span class="token operator">!=</span>dataset<span class="token punctuation">[</span><span class="token string">'assigned_room_type'</span><span class="token punctuation">]</span>dataset<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>slice_indices<span class="token punctuation">,</span><span class="token string">'different_room_assigned'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># Deleting older features</span>dataset <span class="token operator">=</span> dataset<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'stays_in_week_nights'</span><span class="token punctuation">,</span><span class="token string">'stays_in_weekend_nights'</span><span class="token punctuation">,</span><span class="token string">'adults'</span><span class="token punctuation">,</span><span class="token string">'children'</span><span class="token punctuation">,</span><span class="token string">'babies'</span>                   <span class="token punctuation">,</span><span class="token string">'reserved_room_type'</span><span class="token punctuation">,</span><span class="token string">'assigned_room_type'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后再对缺失值与布尔值进行预处理，并去除部分特征：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dataset<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># Country,Agent,Company contain 488,16340,112593 missing entries</span>dataset <span class="token operator">=</span> dataset<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'agent'</span><span class="token punctuation">,</span><span class="token string">'company'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># Replacing missing countries with most freqently occuring countries</span>dataset<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dataset <span class="token operator">=</span> dataset<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'reservation_status'</span><span class="token punctuation">,</span><span class="token string">'reservation_status_date'</span><span class="token punctuation">,</span><span class="token string">'arrival_date_day_of_month'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>dataset <span class="token operator">=</span> dataset<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'arrival_date_year'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># Replacing 1 by True and 0 by False for the experiment and outcome variables</span>dataset<span class="token punctuation">[</span><span class="token string">'different_room_assigned'</span><span class="token punctuation">]</span><span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">'different_room_assigned'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>dataset<span class="token punctuation">[</span><span class="token string">'different_room_assigned'</span><span class="token punctuation">]</span><span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">'different_room_assigned'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">)</span>dataset<span class="token punctuation">[</span><span class="token string">'is_canceled'</span><span class="token punctuation">]</span><span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">'is_canceled'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>dataset<span class="token punctuation">[</span><span class="token string">'is_canceled'</span><span class="token punctuation">]</span><span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">'is_canceled'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">)</span>dataset<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 新增对NA值的处理</span><span class="token keyword">print</span><span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理完成后的参数有：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hotel'</span><span class="token punctuation">,</span> <span class="token string">'is_canceled'</span><span class="token punctuation">,</span> <span class="token string">'lead_time'</span><span class="token punctuation">,</span> <span class="token string">'arrival_date_month'</span><span class="token punctuation">,</span>       <span class="token string">'arrival_date_week_number'</span><span class="token punctuation">,</span> <span class="token string">'meal'</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'market_segment'</span><span class="token punctuation">,</span>       <span class="token string">'distribution_channel'</span><span class="token punctuation">,</span> <span class="token string">'is_repeated_guest'</span><span class="token punctuation">,</span> <span class="token string">'previous_cancellations'</span><span class="token punctuation">,</span>       <span class="token string">'previous_bookings_not_canceled'</span><span class="token punctuation">,</span> <span class="token string">'booking_changes'</span><span class="token punctuation">,</span> <span class="token string">'deposit_type'</span><span class="token punctuation">,</span>       <span class="token string">'days_in_waiting_list'</span><span class="token punctuation">,</span> <span class="token string">'customer_type'</span><span class="token punctuation">,</span> <span class="token string">'adr'</span><span class="token punctuation">,</span>       <span class="token string">'required_car_parking_spaces'</span><span class="token punctuation">,</span> <span class="token string">'total_of_special_requests'</span><span class="token punctuation">,</span>       <span class="token string">'total_stay'</span><span class="token punctuation">,</span> <span class="token string">'guests'</span><span class="token punctuation">,</span> <span class="token string">'different_room_assigned'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据预处理完成后，我们首先针对数据进行一定的分析，考察变量之间的关系。针对目标变量 <code>is_cancelled</code> 与 <code>different_room_assigned</code> ，我们随机选取 1000 次观测查看有多少次上述两个变量的值相同（即可能存在因果关系），重复上述过程 10000 次取平均，代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">counts_sum<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        counts_i <span class="token operator">=</span> <span class="token number">0</span>        rdf <span class="token operator">=</span> dataset<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        counts_i <span class="token operator">=</span> rdf<span class="token punctuation">[</span>rdf<span class="token punctuation">[</span><span class="token string">"is_canceled"</span><span class="token punctuation">]</span><span class="token operator">==</span> rdf<span class="token punctuation">[</span><span class="token string">"different_room_assigned"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        counts_sum<span class="token operator">+=</span> counts_i<span class="token keyword">print</span><span class="token punctuation">(</span>counts_sum<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终得出的期望频数是 <strong>「518」</strong>，即两个变量有约 50% 的时间是不同的，我们还无法判断其中的因果关系。下面我们进一步分析预约过程中没有发生调整时（即变量 <code>booking_changes</code> 为 0） 两个变量相等的期望频数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Expected Count when there are no booking changes = 49.2%</span>counts_sum<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        counts_i <span class="token operator">=</span> <span class="token number">0</span>        rdf <span class="token operator">=</span> dataset<span class="token punctuation">[</span>dataset<span class="token punctuation">[</span><span class="token string">"booking_changes"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        counts_i <span class="token operator">=</span> rdf<span class="token punctuation">[</span>rdf<span class="token punctuation">[</span><span class="token string">"is_canceled"</span><span class="token punctuation">]</span><span class="token operator">==</span> rdf<span class="token punctuation">[</span><span class="token string">"different_room_assigned"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        counts_sum<span class="token operator">+=</span> counts_i<span class="token keyword">print</span><span class="token punctuation">(</span>counts_sum<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得出的结果为 <strong>「492」</strong>。随后我们再分析预约过程中发生调整时的期望频数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Expected Count when there are booking changes = 66.4%</span>counts_sum<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        counts_i <span class="token operator">=</span> <span class="token number">0</span>        rdf <span class="token operator">=</span> dataset<span class="token punctuation">[</span>dataset<span class="token punctuation">[</span><span class="token string">"booking_changes"</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        counts_i <span class="token operator">=</span> rdf<span class="token punctuation">[</span>rdf<span class="token punctuation">[</span><span class="token string">"is_canceled"</span><span class="token punctuation">]</span><span class="token operator">==</span> rdf<span class="token punctuation">[</span><span class="token string">"different_room_assigned"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        counts_sum<span class="token operator">+=</span> counts_i<span class="token keyword">print</span><span class="token punctuation">(</span>counts_sum<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果变成了 <strong>「663」</strong>，与之前产生了明显的差异。我们可以不严谨地认为预约调整这一变量是一个<strong>「混杂因子」</strong>。类似地，我们对其他变量进行分析，并作出一些假设，作为因果推断的先验知识。DoWhy 并不需要完整的先验知识，未指明的变量将作为潜在的混杂因子进行推断。在本例中，我们将给出如下的假设：</p><ol><li><code>market_segment</code> 参数有两种取值：TA 指旅行者，TO 指旅游公司，该参数会影响 <code>lead_time</code>（即预约和到达之间的时间间隔）</li><li><code>country</code> 参数会决定一个人是否会提早预订（即影响 <code>lead_time</code> ）以及其喜爱的食物（即影响 <code>meal</code> ）</li><li><code>lead_time</code> 会影响预订的等待时间（ <code>days_in_waiting_list</code> ）</li><li>预订的等待时间 <code>days_in_waiting_list</code>、总停留时间 <code>total_stay</code> 以及客人数量 <code>guests</code> 会影响预订是否被取消</li><li>之前预订的取消情况 <code>previous_bookings_not_canceled</code> 会影响该顾客是否为 <code>is_repeated_guest</code>；这两个变量也会影响预订是否被取消</li><li><code>booking_changes</code> 会影响顾客是否被分配到不同的房间，也会影响预订取消情况</li><li>除了 <code>booking_changes</code> 这一混杂因子外，一定还存在着其他混杂因子，同时影响干预和结果</li></ol><ul><li><strong>创建因果图</strong></li></ul><p>基于上述假设，我们通过 gml 形式来描述上述因果图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pygraphvizcausal_graph <span class="token operator">=</span> <span class="token triple-quoted-string string">"""digraph {different_room_assigned[label="Different Room Assigned"];is_canceled[label="Booking Cancelled"];booking_changes[label="Booking Changes"];previous_bookings_not_canceled[label="Previous Booking Retentions"];days_in_waiting_list[label="Days in Waitlist"];lead_time[label="Lead Time"];market_segment[label="Market Segment"];country[label="Country"];U[label="Unobserved Confounders"];is_repeated_guest;total_stay;guests;meal;market_segment -&gt; lead_time;lead_time-&gt;is_canceled; country -&gt; lead_time;different_room_assigned -&gt; is_canceled;U -&gt; different_room_assigned; U -&gt; lead_time; U -&gt; is_canceled;country-&gt;meal;lead_time -&gt; days_in_waiting_list;days_in_waiting_list -&gt;is_canceled;previous_bookings_not_canceled -&gt; is_canceled;previous_bookings_not_canceled -&gt; is_repeated_guest;is_repeated_guest -&gt; is_canceled;total_stay -&gt; is_canceled;guests -&gt; is_canceled;booking_changes -&gt; different_room_assigned; booking_changes -&gt; is_canceled;}"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于上述图，可以构建出如下的因果模型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model<span class="token operator">=</span> dowhy<span class="token punctuation">.</span>CausalModel<span class="token punctuation">(</span>        data <span class="token operator">=</span> dataset<span class="token punctuation">,</span>        graph<span class="token operator">=</span>causal_graph<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        treatment<span class="token operator">=</span><span class="token string">'different_room_assigned'</span><span class="token punctuation">,</span>        outcome<span class="token operator">=</span><span class="token string">'is_canceled'</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>view_model<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/dowhy5.png" alt="案例因果图"></p><ul><li><strong>识别因果效应</strong></li></ul><p>我们称<strong>「干预」</strong>（Treatment）导致了<strong>「结果」</strong>（Outcome）当且仅当在其他所有状况不变的情况下，干预的改变引起了结果的改变。因果效应即干预发生一个单位的改变时，结果变化的程度。下面我们将使用因果图的属性来识别因果效应的估计量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Identify the causal effect</span>identified_estimand <span class="token operator">=</span> model<span class="token punctuation">.</span>identify_effect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>identified_estimand<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意，在最新版本的 dowhy 中，修改了识别阶段后门变量的筛选准则，从原来的选择最小集改为了选择所有合法的变量，因此最终会返回 258 个估计量。如下所示为返回的估计量示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Estimand <span class="token builtin">type</span><span class="token punctuation">:</span> nonparametric<span class="token operator">-</span>ate<span class="token comment">### Estimand : 1</span>Estimand name<span class="token punctuation">:</span> backdoor1Estimand expression<span class="token punctuation">:</span>            d                                                                 ──────────────────────────<span class="token punctuation">(</span>Expectation<span class="token punctuation">(</span>is_canceled<span class="token operator">|</span>lead_time<span class="token punctuation">,</span>booking_changes<span class="token punctuation">)</span><span class="token punctuation">)</span>d<span class="token punctuation">[</span>different_room_assigned<span class="token punctuation">]</span>                                                    Estimand assumption <span class="token number">1</span><span class="token punctuation">,</span> Unconfoundedness<span class="token punctuation">:</span> If U→<span class="token punctuation">{</span>different_room_assigned<span class="token punctuation">}</span> <span class="token keyword">and</span> U→is_canceled then P<span class="token punctuation">(</span>is_canceled<span class="token operator">|</span>different_room_assigned<span class="token punctuation">,</span>lead_time<span class="token punctuation">,</span>booking_changes<span class="token punctuation">,</span>U<span class="token punctuation">)</span> <span class="token operator">=</span> P<span class="token punctuation">(</span>is_canceled<span class="token operator">|</span>different_room_assigned<span class="token punctuation">,</span>lead_time<span class="token punctuation">,</span>booking_changes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>估计因果效应</strong></li></ul><p>基于估计量，下面我们就可以根据实际数据进行因果效应的估计了。如之前所述，因果效应即干预进行单位改变时结果的变化程度。DoWhy 支持采用各种各样的方法计算因果效应估计量，并最终返回单个平均值。代码如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">estimate <span class="token operator">=</span> model<span class="token punctuation">.</span>estimate_effect<span class="token punctuation">(</span>identified_estimand<span class="token punctuation">,</span>                                 method_name<span class="token operator">=</span><span class="token string">"backdoor.propensity_score_stratification"</span><span class="token punctuation">,</span>target_units<span class="token operator">=</span><span class="token string">"ate"</span><span class="token punctuation">)</span><span class="token comment"># ATE = Average Treatment Effect</span><span class="token comment"># ATT = Average Treatment Effect on Treated (i.e. those who were assigned a different room)</span><span class="token comment"># ATC = Average Treatment Effect on Control (i.e. those who were not assigned a different room)</span><span class="token keyword">print</span><span class="token punctuation">(</span>estimate<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们选择估计平均干预效应（ATE），也可以选择估计干预组（ATT）或对照组（ATC）的因果效应。估计方法选择的是<strong>「倾向得分匹配」</strong>，具体的原理这里不做介绍。最终得到的结果如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">**</span><span class="token operator">*</span> Causal Estimate <span class="token operator">**</span><span class="token operator">*</span><span class="token comment">## Identified estimand</span>Estimand <span class="token builtin">type</span><span class="token punctuation">:</span> nonparametric<span class="token operator">-</span>ate<span class="token comment">## Realized estimand</span>b<span class="token punctuation">:</span> is_canceled<span class="token operator">~</span>different_room_assigned<span class="token operator">+</span>country<span class="token operator">+</span>total_stay<span class="token operator">+</span>meal<span class="token operator">+</span>lead_time<span class="token operator">+</span>guests<span class="token operator">+</span>days_in_waiting_list<span class="token operator">+</span>booking_changes<span class="token operator">+</span>market_segment<span class="token operator">+</span>is_repeated_guest<span class="token operator">+</span>previous_bookings_not_canceledTarget units<span class="token punctuation">:</span> ate<span class="token comment">## Estimate</span>Mean value<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">0.3359905635051836</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>反驳结果</strong></li></ul><p>实际上，上述因果并不是基于数据，而是基于我们所做的假设（即提供的因果图），数据只是用于进行统计学的估计。因此，我们需要验证假设的正确性。DoWhy 支持通过各种各样的鲁棒性检查方法来测试假设的正确性。下面进行其中几项测试：</p><p> <strong>「添加随机混杂因子」</strong>。如果假设正确，则添加随机的混杂因子后，因果效应不会变化太多。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">refute1_results<span class="token operator">=</span>model<span class="token punctuation">.</span>refute_estimate<span class="token punctuation">(</span>identified_estimand<span class="token punctuation">,</span> estimate<span class="token punctuation">,</span>        method_name<span class="token operator">=</span><span class="token string">"random_common_cause"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>refute1_results<span class="token punctuation">)</span>Refute<span class="token punctuation">:</span> Add a Random Common CauseEstimated effect<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">0.3359905635051836</span>New effect<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">0.3365742386420179</span> <span class="token comment"># 基本保持稳定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>「安慰剂干预」</strong>。将干预替换为随机变量，如果假设正确，因果效应应该接近 0。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">refute2_results<span class="token operator">=</span>model<span class="token punctuation">.</span>refute_estimate<span class="token punctuation">(</span>identified_estimand<span class="token punctuation">,</span> estimate<span class="token punctuation">,</span>        method_name<span class="token operator">=</span><span class="token string">"placebo_treatment_refuter"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>refute2_results<span class="token punctuation">)</span>Refute<span class="token punctuation">:</span> Use a Placebo TreatmentEstimated effect<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">0.3359905635051836</span>New effect<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">0.00028277666065981027</span> <span class="token comment"># 因果效应归零</span>p value<span class="token punctuation">:</span><span class="token number">0.43999999999999995</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：这里的 p value 对比的是新的估计量与 0 之间的显著性差异（如果假设正确，则预期为无差异），源代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dummy_estimator <span class="token operator">=</span> CausalEstimate<span class="token punctuation">(</span>    estimate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    target_estimand <span class="token operator">=</span>self<span class="token punctuation">.</span>_estimate<span class="token punctuation">.</span>target_estimand<span class="token punctuation">,</span>    realized_estimand_expr<span class="token operator">=</span>self<span class="token punctuation">.</span>_estimate<span class="token punctuation">.</span>realized_estimand_expr<span class="token punctuation">)</span>refute<span class="token punctuation">.</span>add_significance_test_results<span class="token punctuation">(</span>    self<span class="token punctuation">.</span>test_significance<span class="token punctuation">(</span>dummy_estimator<span class="token punctuation">,</span> sample_estimates<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>「数据子集验证」</strong>。在数据子集上估计因果效应，如果假设正确，因果效应应该变化不大。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">refute3_results<span class="token operator">=</span>model<span class="token punctuation">.</span>refute_estimate<span class="token punctuation">(</span>identified_estimand<span class="token punctuation">,</span> estimate<span class="token punctuation">,</span>        method_name<span class="token operator">=</span><span class="token string">"data_subset_refuter"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>refute3_results<span class="token punctuation">)</span>Refute<span class="token punctuation">:</span> Use a subset of dataEstimated effect<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">0.3359905635051836</span>New effect<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">0.33647521997465524</span>p value<span class="token punctuation">:</span><span class="token number">0.35</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，我们的因果模型基本可以通过上述几个测试（即取得预期的结果）。因此，根据估计阶段的结果，我们得出结论：当消费者在预定房间时，为其分配之前预定过的房间（ <code>different_room_assigned = 0</code> ）所导致的平均预定取消概率（ <code>is_canceled</code> ）要比为其分配不同的房间（ <code>different_room_assigned = 1</code> ）低 <strong>「33%」</strong>。</p><p>在实际的操作中，我们可以基于不同的假设（即不同的因果图）应用多种估计方法，以找出接近真实的因果关系。</p><ul><li><strong>结果比较</strong></li></ul><p>综上所述，我们已经知道了分配不同的房间的因果效应约为 33%，下面我们将使用一个预测模型对数据进行训练，并分析不同特征的特征重要性。这里选择 XGBoost 作为预测模型，其训练过程及结果如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># plot feature importance using built-in function</span><span class="token keyword">from</span> xgboost <span class="token keyword">import</span> XGBClassifier<span class="token keyword">from</span> xgboost <span class="token keyword">import</span> plot_importance<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token punctuation">,</span> classification_report<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot<span class="token comment"># split data into X and y</span>X <span class="token operator">=</span> dataset_copy <span class="token comment"># 这里使用的是copy，请自行复制（处理完后的数据）</span>y <span class="token operator">=</span> dataset_copy<span class="token punctuation">[</span><span class="token string">'is_canceled'</span><span class="token punctuation">]</span>X <span class="token operator">=</span> X<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'is_canceled'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># One-Hot Encode the dataset</span>X <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token comment"># split data into train and test sets</span>X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token comment"># fit model no training data</span>model <span class="token operator">=</span> XGBClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token comment"># make predictions for test data and evaluate</span>y_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>predictions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">for</span> value <span class="token keyword">in</span> y_pred<span class="token punctuation">]</span> <span class="token comment"># 注意这里之前用的是round，会报错</span>accuracy <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> predictions<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Accuracy: %.2f%%"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>accuracy <span class="token operator">*</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> predictions<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Accuracy: 86.40%              precision    recall  f1-score   support       False       0.88      0.92      0.90     15001        True       0.85      0.79      0.82      8877    accuracy                           0.87     23878   macro avg       0.86      0.85      0.86     23878weighted avg       0.867     0.87      0.87     23878<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用 <code>plot_importance</code> 函数，可以得出如下的特征重要性排行（这里权重值为特征在树中出现的次数）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># plot feature importance</span>plot_importance<span class="token punctuation">(</span>model<span class="token punctuation">,</span>max_num_features<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>pyplot<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/dowhy6.png" alt="特征重要性排行榜"></p><p>可以看出，<code>different_room_assigned</code> 变量的特征权重并不是非常高，这与我们的因果推断结果有一定的差异性，这也体现了因果推断模型和传统机器学习模型在原理上的差异性，我们需要根据实际的需要来选择最合适的方法。</p><p>以上就是 DoWhy 入门的全部内容，总的来看， DoWhy 为因果推断研究提供了一个非常方便的工具，研究人员需要做的就是先对数据进行分析并给出适当的假设（可以是多个），然后将数据输入到 DoWhy 提供的框架中进行自动化估计（需要指定估计方法与估计目标），最后对估计的结果进行鲁棒性测试以验证假设的正确性，即可得出较合理的因果关系推论。</p><h2 id="7-参考资料（References）"><a href="#7-参考资料（References）" class="headerlink" title="7.参考资料（References）"></a>7.参考资料（References）</h2><p>[1]. <a href="https://github.com/microsoft/dowhy">https://github.com/microsoft/dowhy</a></p><p>[2]. <a href="https://microsoft.github.io/dowhy/example_notebooks/dowhy_causal_api.html">https://microsoft.github.io/dowhy/example_notebooks/dowhy_causal_api.html</a></p><p>[3]. <a href="https://towardsdatascience.com/beyond-predictive-models-the-causal-story-behind-hotel-booking-cancellations-d29e8558cbaf">https://towardsdatascience.com/beyond-predictive-models-the-causal-story-behind-hotel-booking-cancellations-d29e8558cbaf</a></p>]]></content>
      
      
      <categories>
          
          <category> 因果推断 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 因果推断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《A Survey on Causal Inference》读书笔记</title>
      <link href="2021/07/28/yin-guo-tui-duan/a-survey-on-causal-inference-du-shu-bi-ji/"/>
      <url>2021/07/28/yin-guo-tui-duan/a-survey-on-causal-inference-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="《A-Survey-on-Causal-Inference》读书笔记"><a href="#《A-Survey-on-Causal-Inference》读书笔记" class="headerlink" title="《A Survey on Causal Inference》读书笔记"></a>《A Survey on Causal Inference》读书笔记</h1><p>此文仅是本人阅读因果推断的最新综述《A Survey on Causal Inference》的一点学习记录，其中也记录了本人的理解和总结。（点击右侧链接即可一键查看原文-&gt;<a href="https://arxiv.org/pdf/2002.02770.pdf">论文地址</a>）</p><h2 id="1-摘要（Abstract）"><a href="#1-摘要（Abstract）" class="headerlink" title="1. 摘要（Abstract）"></a>1. 摘要（Abstract）</h2><p>因果推断是近几十年各大领域研究的热门话题。随着机器学习领域的快速发展，基于观测数据的因果效应估计方法层出不穷。在这篇综述中，作者全面的回顾因果推断方法下的<strong>潜在结果模型</strong>（其中一个著名的因果推断框架）。根据它们是否需要潜在结果框架的所有<strong>三个假设</strong>而将上述方法分为两类。对于每个类别，都讨论和比较了传统的统计方法和最近的机器学习增强方法。并给出了这些方法在广告、推荐、医药等方面的应用。此外，还总结了常用的benchmark数据集和开源代码，便于研究者和实践者探索、评估和开发因果推断方法。</p><h2 id="2-介绍（Introduction）"><a href="#2-介绍（Introduction）" class="headerlink" title="2. 介绍（Introduction）"></a>2. 介绍（Introduction）</h2><p>因果性$\neq$相关性。我们从数据中往往分析出来的结论大多都是相关性，而因果性则不是那么容易能够得出来。不过目前有一个最有效的方法就是<strong>随机控制实验</strong>（randomized controlled trial）：通过随机控制变量，对照结果的方法得出结论。但是该方法时间损耗较大、不能适用于很多subjects的情况、只是聚焦于样本的平均值、在某些场合不适用等等问题。</p><p>相较于上面随机控制实验的方法，<strong>观察数据的方法</strong>变成了可行的捷径。通过观察数据，我们可以发现他们的行动、结果和所发生事情的信息，但<strong>不能弄清楚他们采取特定行动的机制</strong>。对于观测数据，核心问题是如何得到反事实的结果。</p><p>为了从可观测数据中推断出变量间的因果关系，研究者发现了很多的模型，其中包括：<strong>潜在结果模型（potential outcome framework）</strong>以及<strong>结构因果模型（structural causal model）</strong>。</p><ul><li><p><strong>潜在结果模型</strong>——如果一个女孩每天正常吃早餐，她会有一个特定的体重，而如果她不正常吃早餐，她会有一个不同的体重。为了衡量正常吃早餐对女孩的因果影响，我们需要比较同一个人在两种情况下的结果。显然，我们不可能同时看到两种潜在结果，而其中一种潜在结果总是缺失。<strong>潜在结果框架的目的</strong>是估计这些潜在结果，然后计算干预（treatment）效果。因此，<strong>干预效果估计</strong>（treatment effect estimation）是潜在结果框架下因果推理的核心问题之一。</p></li><li><p><strong>结构因果模型(SCM)</strong>——它包括因果图和结构方程。结构因果模型描述了一个系统的因果机制，其中一组变量及其之间的因果关系是由一组联立结构方程建模的。</p></li></ul><p><strong>因果推断与机器学习</strong>：它们直接存在的非常密切的联系。<strong>一方面</strong>，机器学习领域的蓬勃发展促进了因果推断领域的发展。应用决策树、集成方法、深度神经网络等强大的机器学习方法，更准确地<strong>估计潜在的结果</strong>。除了对结果估计模型的改进，机器学习方法也为<strong>处理混杂因素</strong>提供了一个新的方面。<strong>另一方面</strong>，因果推断也有助于机器学习方法的发展。现代机器学习研究仅仅追求预测的准确性是不够的，<em>准确性</em>和<em>可解释性</em>也是机器学习方法的目标。因果推断正开始帮助改善机器学习，如推荐系统或强化学习。</p><ul><li>tips：在机器学习中，数据越多越好。然而，在因果推理中，仅仅有更多的数据是不够的。有更多的数据只有助于得到更精确的估计，但不能确保这些估计是正确和无偏的。</li></ul><p><strong>全文框架</strong>：此文对<strong>潜在结果框架</strong>下的因果推理方法进行了综述。首先介绍潜在结果框架的基本概念，以及识别因果效应的三个关键假设。然后，详细讨论基于这三个假设的各种因果推理方法，包括重加权法（re-weighting methods）、分层法（stratification methods）、基于匹配法（matching based methods）、基于树的方法（tree-base methods）、基于表示的方法（representation-based methods）、基于多任务学习的方法（multi-task learning based methods）和元学习方法（meta-learning methods）综述。在介绍了各种因果效应估计方法之后，以广告领域、推荐领域、医学领域和强化学习领域为代表，讨论了这些方法在实际应用中可能产生的巨大效益。</p><h2 id="3-因果推断基础知识（Basic-Of-Causal-Inference）"><a href="#3-因果推断基础知识（Basic-Of-Causal-Inference）" class="headerlink" title="3. 因果推断基础知识（Basic Of Causal Inference）"></a>3. 因果推断基础知识（Basic Of Causal Inference）</h2><p>在本节中，介绍了因果推理的背景知识，包括任务描述、数学概念、假设、挑战和一般解决方案。我们也给出了一个说明性的例子，将在整个survey中使用。一般来说，因果推理的任务是估计如果应用了另一种干预方法后结果的变化。例如，假设有两种干预方法可以应用于患者：药物A和药物B。对感兴趣的患者队列应用药物A时，治愈率为70%，药物B对同一队列，治愈率为90%。治愈率的变化就是治疗的结果。上面的例子描述了一个衡量干预效果的理想情况：对同一队列应用不同的干预方法。在现实世界中，这种理想的情况只能用随机的方法来近似，例如完全随机实验。这样，接受特定治疗的群体可以看作是我们感兴趣队列的近似。然而，进行随机实验是昂贵的，耗时的，有时甚至不道德。因此，由于观察数据的广泛可用性，<strong>利用观察数据估计干预效果越来越受到关注</strong>。观察数据通常包含一组接受不同干预的个体，他们相应的结果，可能还有更多的信息，但没有直接获得他们采取特定干预的原因/机制。这些观察数据使研究人员能够调查学习因果关系的基本问题。</p><ul><li><p>[ ] <strong>潜在结果模型</strong>的主要贡献者是哈佛大学著名统计学家唐纳德·鲁宾(Donald B.Rubin)，因此该模型又被称为鲁宾因果模型(Rubin Causal Model)。其核心是比较同一个研究对象(Unit)在接受干预(Treatment)和不接受干预(对照/控制组)时结果差异，认为这一结果差异就是接受干预相对于不接受干预的效果。</p></li><li><p>[ ] 对于同一研究对象而言，通常我们不能够既观察其干预的结果，又观察其不干预的结果。<strong>对于接受干预的研究对象而言，不接受干预时的状态是一种“反事实”状态；对于不接受干预的研究对象而言，接受干预时的状态也是一种“反事实”状态；</strong>所以该模型又被某些研究者称之为反事实框架(Counter factual Framework)。</p></li></ul><h3 id="3-1-基本概念（Definitions）"><a href="#3-1-基本概念（Definitions）" class="headerlink" title="3.1 基本概念（Definitions）"></a>3.1 基本概念（Definitions）</h3><p>为了更好的介绍各种干预效果估计方法，下面介绍几个定义，包括<strong>单位</strong>（<code>Unit</code>）、<strong>干预</strong>（<code>Treatment</code>）、结果（<code>Outcome</code>）、因果效应（<code>Treatment Effect</code>）以及<strong>观察数据提供的其他信息</strong>(干预前和干预后变量)。</p><ul><li>Unit —— <strong>单元</strong>，原子研究对象。</li><li><p>Treatment —— <strong>干预/治疗</strong>，施加给一个原子对象unit的行为。在二元<code>Treatment</code>的情况下（即$W=0$或$1$ ），<code>Treatment</code>组包含接受Treatment为$W=1$ 的<code>unit</code>，而对照组包含接受<code>Treatment</code>为$W=0$的<code>unit</code>。</p></li><li><p>Outcome —— <strong>结果</strong>，在对<code>unit</code>进行<code>Treatment</code>或者仅仅作为对照之后<code>unit</code>随后产生的反应/结果，一般用<code>Y</code>表示。</p></li><li><p>Treatment Effect —— <strong>因果效应</strong>，对<code>unit</code>进行不同<code>Treatment</code>之后，<code>unit</code>产生的<code>Outcome</code>的变化，这种效应可以定义在<strong>整体层面、treatment组层面、子组层面和个体层面</strong>。</p><ul><li><p>整体层面 —— Average Treatment Effect(ATE)，平均干预效果：</p><script type="math/tex; mode=display">ATE=E[Y(W=1)-Y(W=0)]</script></li><li><p>Treatment组层面 —— Average Treatment Effect on the Treated Group (ATT)，Treatment组中的平均干预效果：</p><script type="math/tex; mode=display">ATT=E[Y(W=1)|W=1]-E[Y(W=0)|W=1]</script></li><li><p>子组层面 —— Conditional Average Treatment Effect (CATE)：</p><script type="math/tex; mode=display">CATE=E[Y(W=1)|X=x]-E[Y(W=0)|X=x]</script></li><li><p>个体层面 —— Individual Treatment Effect (ITE)：</p><script type="math/tex; mode=display">ITE_i=Y_i(W=1)-Y_i(W=0)</script></li></ul></li><li><p>Potential Outcome —— <strong>潜在结果</strong>，对于每对<code>unit-treatment</code>，当对<code>unit</code>施加相应的<code>treatment</code>之后产生的结果。</p></li><li><p>Observed Outcome —— <strong>观测结果</strong>，<strong>已经发生的事实</strong>，对<code>unit</code>施加某个<code>treatment</code>之后产生的能观测到的结果。</p></li><li>Counterfactual Outcome —— <strong>反事实结果</strong>， <strong>已经发生事实的其他对立面</strong>，也即对某个<code>unit</code><strong>未采用</strong>的其他<code>treatment</code>带来的潜在结果。</li></ul><h3 id="3-2-典型研究案例（An-Illustrative-Example）"><a href="#3-2-典型研究案例（An-Illustrative-Example）" class="headerlink" title="3.2 典型研究案例（An Illustrative Example）"></a>3.2 典型研究案例（An Illustrative Example）</h3><p><strong>任务</strong>：利用观察数据，如电子健康记录(EHR)，评估几种不同药物对一种疾病的治疗效果。</p><p><strong>观测数据：</strong></p><ul><li>患者的人口统计信息</li><li>患者服用特定剂量的特定药物</li><li>医学测试结果</li><li>其他</li></ul><p><strong>研究对象</strong>：病人</p><p><strong>干预：</strong>不同药物</p><p><strong>结果：</strong>恢复/血样测试结果/其他</p><h3 id="3-3-三个重要假设（Assumptions）"><a href="#3-3-三个重要假设（Assumptions）" class="headerlink" title="3.3 三个重要假设（Assumptions）"></a>3.3 三个重要假设（Assumptions）</h3><ul><li><p><strong>稳定单位干预值假设(Stable Unit Treatment Value Assumption/SUTVA)</strong></p><p>任何一个单元的潜在结果不会因分配给其他单元的<code>treatment</code>而有所不同，并且对于每个单元，每个<code>treatment</code>级别没有不同的形式或版本，不会导致不同的潜在结果。</p><p>这个假设强调以下几点：</p><ul><li><code>unit</code>之间都是相互独立的，<code>unit</code>之间不会存在相互作用</li><li>同一<code>treatment</code>仅能存在一个版本。例如，在该假设下，不同剂量的同一种药物代表不同的治疗方法。</li></ul></li><li><p><strong>可忽略性假设(Ignorability)</strong></p><p>给定背景变量<code>X</code> , 干预分配<code>W</code>与潜在的结果无关。</p><p>例如，由上文的药物治疗的例子来看，如果两个患者有相同的背景变量<code>X</code>，无论治疗任务是什么，他们的潜在结果应该是相同的。类似地，如果两个患者具有相同的背景变量值，那么他们的治疗分配机制应该是相同的，无论他们有什么潜在的结果。</p></li><li><p><strong>正值假设(Positivity)</strong></p><p>对于<code>X</code>的任何一组值，处理分配不是确定的：</p><script type="math/tex; mode=display">P(W=w|X=x)>0</script><p>如果某些<code>X</code>值的干预分配是确定的，那么至少一种干预的结果永远无法观察到。那么估计因果关系是不可能也没有意义的，这意味着干预组和对照组的“共同支持”或“重叠”。忽略性和正值假设一起也被称为强可忽略性或强可忽略性干预任务。</p></li></ul><h3 id="3-4-一般的研究方法（General-Solutions）"><a href="#3-4-一般的研究方法（General-Solutions）" class="headerlink" title="3.4 一般的研究方法（General Solutions）"></a>3.4 一般的研究方法（General Solutions）</h3><p><strong>核心问题：</strong>如何估计特定人群的平均潜在治疗/控制结果？</p><p><strong>直观的解决方案：</strong> 计算平均治疗和对照结果之间的差异，即ATE。</p><p><strong>存在的问题：</strong>由于混杂因素(confounders)的存在，这种解决方案是不合理的。</p><h3 id="3-5-混淆因素（Confounders）"><a href="#3-5-混淆因素（Confounders）" class="headerlink" title="3.5 混淆因素（Confounders）"></a>3.5 混淆因素（Confounders）</h3><p><strong>混杂因素(Condounders)是同时影响干预分配和最终结果的变量</strong>。</p><p><strong>举例说明</strong>：</p><p>在下图中，展示的是两种治疗方案对年轻/年老两种病人群体的治疗效果</p><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/A Survey on Causal Inference1.png" alt="混杂因素例子"></p><p>从表格中我们显然可以看出，抛开年龄我们从整体上来看，不难得出结论：A治疗方案更好；但是考虑年龄的话，无论在是年轻的病患群体中还是年老的病患群体中，B方案的治愈率明显更高，由此得到结论：B治疗方案更好。这两种结论显然是互相矛盾的，但是为什么考虑年龄之后，会得出截然相反的结论呢？</p><p>实际上，这是一种名为辛普森悖论的现象。辛普森悖论指的是同一组数据，整体的趋势和分组后的趋势完全不同。也就是说，整体数据和分组数据产生的结论截然相反。</p><p><strong>辛普森悖论的解释</strong>：</p><p>在上面的例子中，数据分组的指标是年龄，而年龄同时影响着恢复率和治疗方案的选择。从恢复率数据来看，无论是哪种治疗方案下，年轻组的恢复率普遍比年老组高得多，而从治疗方案的选择来看，年轻组更倾向于选择A治疗方案，而年老组则更倾向于选择B治疗方案。正是这种共同影响的存在，使得整体结果和分组结果完全不同。</p><p>在这个例子中，干预分配显然就是治疗方案的选择，最终结果就是治愈率，显然可以得知，年龄在这里就是混杂因子。混杂因子的存在导致辛普森悖论现象的产生，因此，在混杂因素存在的情况下，我们不能针对观测数据轻易下结论。</p><h3 id="3-6-选择偏倚（Selection-Bias）"><a href="#3-6-选择偏倚（Selection-Bias）" class="headerlink" title="3.6 选择偏倚（Selection Bias）"></a>3.6 选择偏倚（Selection Bias）</h3><p>混杂因子的存在影响着干预分配的选择，<code>treatment</code>组和对照组的分布有可能不一致，因此导致出现偏差，这也使得反事实结果估计更加困难。</p><h2 id="4-因果推断方法（Causal-Inference-Methods）"><a href="#4-因果推断方法（Causal-Inference-Methods）" class="headerlink" title="4. 因果推断方法（Causal Inference Methods）"></a>4. 因果推断方法（Causal Inference Methods）</h2><ul><li>Re-weighting(重加权算法)</li><li>Stratification(分层算法)</li><li>Matching(匹配算法)</li><li>Tree-based(基于树的方法)</li><li>Representation Learning(表示学习)</li><li>Multitask Learning(多任务学习)</li><li>Meta-learning(元学习)</li></ul><h3 id="4-1-重加权算法（Re-weighting）"><a href="#4-1-重加权算法（Re-weighting）" class="headerlink" title="4.1 重加权算法（Re-weighting）"></a>4.1 重加权算法（Re-weighting）</h3><ul><li><p><strong>思想：</strong></p><p>干预组和对照组观测数据的分布不同，这就是选择偏倚带来的挑战。为了克服选择偏倚，可以考虑对样本进行重新加权。</p><p>通过给观察数据集中的每个样本分配适当的权重，可以创建一个伪总体，使得干预组和对照组的分布相似。然后根据重加权后因果效应的评估。</p><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/A Survey on Causal Inference2.png" alt="重加权算法"></p><p>上图展示了重加权的过程，当存在年龄<code>Age</code>这个混杂因子时，选择偏倚使得干预组和对照组的分布存在一定差异，对样本重新分配权重后(右图加粗部分，可以认为是增加了权重)，使得干预组和对照组的分布相似，从而消除了混杂因子Age带来的选择偏倚。</p></li><li><p><strong>倾向分数（Propensity score）：</strong></p><p>它是给定观测协变量向量的特定干预分配的条件概率，反映出样本<code>x</code>选择<code>treatment</code>的可能性。</p><script type="math/tex; mode=display">e(x)=Pr(W=1|X=x)</script></li><li><p><strong>反向倾向加权（IPW）：</strong></p><p>给每个unit指定的权重为：</p><script type="math/tex; mode=display">r=\frac{W}{e(x)}+\frac{1-W}{1-e(x)}</script><p>其中 <code>W</code> 是treatment，<code>e(x)</code>是倾向得分。重加权后在整体层面对平均干预效果进行估计：</p><script type="math/tex; mode=display">\hat{ATE}_{IPW}=\frac{1}{n}\sum_{i=1}^n\frac{W_iY_i^F}{\hat{e}(x_i)}-\frac{1}{n}\sum_{i=1}^n\frac{(1-W_i)Y_i^F}{1-\hat{e}(x_i)}</script><p>理论结果表明，调整倾向得分足以消除由于所有观测到的协变量而产生的偏差。但是这种加权方法高度依赖倾向性得分的正确性。</p></li><li><p><strong>双保险估计/增广IPW：</strong></p><p>它将基于倾向得分加权的重加权算法和结果回归相结合：</p><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/A Survey on Causal Inference3.png" alt="倾向得分加权的重加权算法和结果回归"></p><p>当倾向性得分或者结果回归中只要有一个是正确的，就能做到无偏估计。</p></li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/A Survey on Causal Inference4.png" alt="双保险估计表达式"></p><ul><li><p><strong>协变量平衡倾向得分（CBPS）：</strong></p><p>倾向性得分既可作为干预分配的概率，又可作为协变量平衡得分，CBPS利用了这一双重特征，通过解决下面这一问题来估计倾向性得分：</p><script type="math/tex; mode=display">\mathbb{E}[\frac{W_i\tilde{x_i}}{e(x_i;\beta)}-\frac{(1-W_i)\tilde{x_i}}{1-e(x_i;\beta)}]=0</script></li><li><p><strong>数据驱动变量分解（$D^2VD$）：</strong></p><p><strong>假设</strong>：观测变量可以分解为混杂变量、调整变量和无关变量</p><p><strong>目的</strong>：区分混杂变量和调整变量，同时剔除无关变量。</p><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/A Survey on Causal Inference5.png" alt="数据驱动变量分解"></p></li><li><p><strong>重加权算法总结：</strong></p></li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/A Survey on Causal Inference6.png" alt="重加权算法总结"></p><h3 id="4-2-分层算法（Stratification）"><a href="#4-2-分层算法（Stratification）" class="headerlink" title="4.2 分层算法（Stratification）"></a>4.2 分层算法（Stratification）</h3><p>通过将整个组分成子组来调整选择偏差，在每个子组中，treatment组和对照组在某些测量值下是相似的，干预效果的估计结果是所有子组的加权平均。</p><p>利用分层算法估计的平均干预效果：</p><script type="math/tex; mode=display">\hat{\tau}^{START}=\sum_{j=1}^Jq(j)[\bar{Y}_t(j)-\bar{Y}_c(j)]</script><h3 id="4-3-匹配算法（Matching）"><a href="#4-3-匹配算法（Matching）" class="headerlink" title="4.3 匹配算法（Matching）"></a>4.3 匹配算法（Matching）</h3><ul><li><p><strong>干预估计</strong></p><p>匹配算法使用下面的公式来估计后果：</p><script type="math/tex; mode=display">\hat{Y_i}(0)=\begin{cases}Y_i \quad if \space W_i=0\\\frac{1}{\#\mathbb{J}(i)}\sum_{l\in\mathbb{J}(i)}Y_l\quad if\space W_i=1\end{cases}</script><script type="math/tex; mode=display">\hat{Y_i}(1)=\begin{cases}Y_i \quad if \space W_i=1\\\frac{1}{\#\mathbb{J}(i)}\sum_{l\in\mathbb{J}(i)}Y_l\quad if\space W_i=0\end{cases}</script><p>$\hat{Y_i}(0)$代表对照组，$\hat{Y_i}(1)$表示实验组。$\mathbb{J}(i)$代表在相反的treatment组中和单位$i$距离最近的样本。</p></li><li><p><strong>样本距离度量方法</strong></p><ul><li>欧氏距离</li><li>马氏距离</li></ul></li><li><p><strong>样本空间</strong></p><ul><li>原始空间</li><li>特征变换空间<ul><li>基于倾向得分的转换空间</li><li>其他转换空间</li></ul></li></ul></li><li><p><strong>基于倾向得分的匹配</strong></p><p>基于倾向得分</p><script type="math/tex; mode=display">e(x)=Pr(W=1|X=x)</script><p>定义两个units之间的距离</p><script type="math/tex; mode=display">D(x_i,x_j)=|e_i-e_j|</script></li><li><p><strong>匹配算法</strong></p><ul><li>邻近算法</li><li>Caliper算法</li><li>分层算法</li><li>核函数</li></ul></li><li><p><strong>匹配算法总结</strong></p></li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/A Survey on Causal Inference7.png" alt="匹配算法总结"></p><h3 id="4-4-基于树方法（Tree-based-Method）"><a href="#4-4-基于树方法（Tree-based-Method）" class="headerlink" title="4.4 基于树方法（Tree-based Method）"></a>4.4 基于树方法（Tree-based Method）</h3><p>基于决策树学习的方法也是一种流行的因果推断方法，这是一种预测模型方法。决策树是一种用于分类或者回归的无参数监督学习算法，决策树的目标是通过数据推导出简单的决策规则用以创建一个可以预测目标变量值的模型。</p><p>如果目标变量是离散变量，那么称为分类树，使用误分类成本来评估预测错误。在树模型的结构中，叶子节点表示类标签，分支节点表示推导出这些类标签的决策特征。如果目标变量是连续变量，那么称为回归树，其预测误差由观测值与预测值的平方差来度量。分类和回归树的总称为 Classification And Regression Tree (CART)，用于指代上述两种过程。在CART模型中，对数据空间进行分区，并对每个分区空间拟合一个简单的预测模型，因此每个分区都可以用决策树的图形表示。</p><p>为了评估因果效应，原参考文献提供了一种基于CART的数据驱动方法，该方法将数据划分为策略效果不同的子群。即使有许多与样本大小相关的相关变量，并且没有“稀疏性”假设的情况下，这种方法也能为策略效果建立有效的置信区间。</p><p>这种方法与传统的CART有两个不同之处：首先，它侧重于估计某些子群下的平均策略效果，而不是像传统CART那样侧重于预测结果。其次，对于构建分区和评估评估每个分区策略效果这个两步任务，该方法使用不同的样本，这样的估计是可靠的；然而，在传统的CART中，这两个任务使用相同的样本。</p><p><strong>ps:总体来说，就是我们虽然也是构建决策树，但是不是为了预测一个新的样本的目标变量，只是为了得到树的结构，然后基于这个树的结构自然而然的将整个数据集划分出很多子群，然后评估各个子群的策略效果，最后进行加权平均即可。</strong></p><p>在CART中，树是构建过程直到达到一个我们设定的划分阈值。对于一个决策树的结构，可以根据需要继续增加枝叶或者剪枝。然而，BART是一群树，所以它更像随机森林。在原参考文献[28][29]中提出了一种称为贝叶斯加性回归树(BART)的模型。BART模型中的每棵树都是弱学习器，并且受到正则化先验的约束。该模型可以通过贝叶斯后验公式和MCMC模拟进行学习训练。BART是一种非参数贝叶斯回归模型，它使用维度自适应随机的基础元素。</p><p><strong>ps:就是有BART这样一个集成算法，算法的基本元素是贝叶斯回归树，模型的优化过程是使用蒙特卡洛随机模拟和贝叶斯后验来搞定的，而且不用设置参数，是维度自适应的。</strong></p><p>设$W$ 是一棵二分类树，其中包含一组内部节点决策规则和终端节点，设$M=\{\mu_1,\mu_2,…,\mu_B\}$为 $W$的第$B$个终端节点相关联的规则参数。我们使用$g(x;W,M)$ 表示输入向量$x$在规则参数$\mu_b\in M$下的运算结果。加性树模型可以表示为：</p><script type="math/tex; mode=display">Y=g(x;W_1,M_1)+(x;W_2,M_2)+…+(x;W_m,M_m)+\varepsilon</script><script type="math/tex; mode=display">\varepsilon \sim N(0,\sigma^2)</script><p>BART有几个优势。它很容易实现，只需要输入策略结果，策略分配情况，和混杂相关变量。此外，它不需要知道这些变量之间的相关关系，因此在拟合模型时需要较少的人为设定。此外，它可以通过使很多弱预测器结合的方式，产生合适的不确定性区间，也可以处理连续策略变量和缺失数据[53]。</p><p>BART是用来估计平均因果效应的。事实上，它也可以用来估计个体水平的因果效应。与其他方法如倾向得分匹配、倾向得分加权和回归调整等方法相比，BART不仅可以很容易地评估分层策略效应，而且可以更准确地估计平均策略效应[53]。</p><p>在以往的方法中，对策略效果的先验分布往往是间接推测的，这是很难获得的。加性回归树(例如，回归森林)的灵活之处在于，它可以通过建模，得到一个关于<strong>相关控制变量</strong>和策略变量与响应变量的函数关系，来解决这个问题[48]。这种方法介于两个极端之间：分别单独为策略组和对照组建模，或直接放在一起建模，仅将策略分配作为一个变量。</p><p>随机森林是一种由决策树预测器组合而成分类器，其中每棵树依赖于一组随机向量数据，该组随机向量数据是独立采样的，并且对所有决策树来说，这些数据的分布是相同的[20]。该模型还可以扩展到基于<strong>Breiman’s</strong>随机森林算法的分层处理效果估计[141]。决策树和随机森林是具有自适应邻域度量的最近邻方法，基于决策树的方法寻找接近于样本$x$的训练示例，本质上是基于决策树中的近邻概念来寻找近邻。最接近$X$的点是落在同一片叶子上的点。使用决策树的优点是，它们的叶子可以在信息快速变化的方向上更窄，而在其他方向上更宽，当特征空间的维数相当大时，可能导致计算复杂性的大幅增加。</p><p>基于决策树的框架也可以扩展到单维或多维策略[142]。每个策略可以是离散的，也可以是连续的。采用树形结构来指定样本特征与对应对应的策略之间的关系。这种基于树的框架对预设模型的出错有很好的鲁棒性，并且具有高度的灵活性和最小的手动调优。</p><p><strong>ps:总而言之，就是通过决策树的方法，对样本就行了分层，或者说对样本进行了匹配，同一个叶子结点的样本为近邻群体，实现了分层或者匹配紧邻的目的；然后与前两种因果推断方法(分层和匹配)类似的加权求平均来评估ATE。然后上面介绍了好多这种方法的优点，其实主要就是无参数，自适应，集成方法准确度高！</strong></p><h3 id="4-5-表示学习方法（Representation-Learning-Methods）"><a href="#4-5-表示学习方法（Representation-Learning-Methods）" class="headerlink" title="4.5 表示学习方法（Representation Learning Methods）"></a>4.5 表示学习方法（Representation Learning Methods）</h3><h4 id="4-5-1-均衡表示学习"><a href="#4-5-1-均衡表示学习" class="headerlink" title="4.5.1 均衡表示学习"></a><strong>4.5.1 均衡表示学习</strong></h4><p>统计学习理论中最基本的假设是训练数据和测试数据来自相同的分布。然而，在大多数实际情况下，测试数据是从一个只与训练数据的分布相关但不完全相同的分布中得出的。在因果推理中，这也是一个很大的挑战。与随机对照试验不同，策略分配的机制在可观测数据中并不明确。因此，策略的实施并不独立于样本的某些属性。例如，在一项关于一种药物治疗效果的观察性研究中，人们会根据患者的某些因素(包括已知的混杂因素和一些未知的混杂因素)分配不同的治疗药物。然而，反事实情况下的数据分布通常不同于事实的数据分布。因此，有必要通过根据真实数据学习到的模型来预测反事实结果，从而将因果推理问题转化为领域适应问题。</p><p><strong>ps:简单的介绍一下领域适应问题，领域适应问题指训练出来的模型对于该领域内任何分布的数据上都是适应的，例如预测一张图片是否存在小狗的模型，无论是小狗在草地上还是小狗在沙滩都能准确识别出小狗，困难在于，我们的训练数据是有偏差的，比如我们收集的图片大部分小狗都是在草地上，模型自然将草地与小狗出现建立了联系，这样的模型来预测沙滩上的小狗效果是很差的；同样的，如果我们能得到一个领域适应的模型，那么反事实结果就可以预测出来了！好啦，在这个背景下，我们继续：</strong></p><p>提取有效的特征表示是领域适应问题的关键。原参考文献[14]从理论上提出了一个具有泛化边界的模型来对这种想法建模，该模型不仅可以显式地减小训练集和目标测试集之间的差异，而且可以最大化训练集的适用范围。基于这项工作[14]，样本分布之间的差异距离可用来构造具有任意损失函数的领域适应问题[83]。在后续的讨论中，差异距离在解决因果推理的领域适应问题中起着重要的作用。</p><p>所以，我们可以清楚地看到反事实推理和领域适应之间的联系。一种最直接的想法就是加强表示空间中不同策略组分布之间的相似性。<strong>这样在表示空间内(其实就是对原始数据进行某种映射，映射到另一个空间)，不同策略组就不存在分布偏差；</strong>学习到这样的表示空间需要权衡三个目标：(1)事实数据在表征空间的预测误差小，(2)考虑相关事实结果的反事实结果预测误差小，(3)表示空间内，策略样本和对照样本分布之间的距离小。</p><p><strong>对这三个目标，首先来看第三个目标：策略样本和对照样本分布之间的距离小，这是我们的本质目标，我们就想得到这样一个表示空间，消除样本之间的选择偏差，这个容易理解。那么对于前两个目标，我们要清楚我们学习这样的表示空间是为了预测反事实结果，所以预测误差仍然是我们的核心目的，那么预测分两方面：第一，对数据本身的预测要准，第二，对反事实的预测要准，那么怎么衡量反事情准呢？将相反策略组的事实数据拿过来作比较，即原文提到的</strong>考虑相关事实结果的反事实结果预测误差小<strong>。</strong></p><p>根据以上的目标，原参考文献[122]给出了一个简单直观的泛化误差边界作为训练目标来学习表示空间。结果表明，该表示方法的期望<strong>ITE</strong> 估计误差为该表示方法的泛化误差和表示空间内策略组样本分布与对照组样本分布之间的距离之和。在该方法中，积分概率准则(<strong>IPM)用于衡量样本分布之间的距离，作者使用瑟斯坦距离(</strong>Wasserstein distance<strong>)和最大平均差异距离(</strong>Maximum Mean Discrepancy<strong>)推导出了泛化误差上界。在$h:X\times\{0,1\} \to Y$的假设下，通过最小化下面公式(25)表示的目标函数，以达到学习到一个表示空间$\Phi：X\to R$ 的目的。</strong>上面这个假设就是环境变量<strong>$X$</strong>与策略变量$\{0,1\}$<strong>交互可预测结果变量</strong> $Y$。</p><script type="math/tex; mode=display">\min_{h,\Phi}\frac{1}{n}\sum^n_{i=1}r_i·L(h(\Phi(x_i),W_i),y_i)+\lambda \cdot R(h)+\alpha \cdot IPM_G(\{\Phi(x_i)\})_{i:W_i=0},\{\Phi(x_i)\})_{i:W_i=1})</script><p>其中, $r_i$是权重参数，表示不同策略组样本数量的占比; $R(h)$是模型 $h$复杂度；</p><p><strong>这个目标函数很容易理解，首先第一项是我们想衡量的预测误差项，预测$h(\Phi_{x_i},W_i)$ ，实际是</strong> $y_i$ <strong>,损失函数是$L(h(\Phi(x_i),W_i),y_i)$；第二项是正则项就不用解释了，对模型复杂度进行惩罚；第三项就是我们前面提到的表示空间内，策略样本</strong>$\{\Phi(x_i)\}_{i;W_i=1}$和对照样本 $\{\Phi(x_i)\}_{i;W_i=0}$<strong>分布之间的距离</strong>$IPM_G({\Phi(x_i)}_{i;W_i=0},\{\Phi(x_i)\}_{i;W-i=1})$，这里使用积分概率准则(*IPM* )来衡量，那么具体(*IPM* )如何来计算呢？原文下面介绍到：</p><p>给定两个在$d$维空间上 $S\in R^d$的两个分布密度函数 $p,q$ ，和一个属于 $G$ 函数集的函数 $g:S \to R$，那么<em>IPM</em> 的计算方式如下：</p><script type="math/tex; mode=display">IPM_G(p,q):=\sup_g\in G \int_s g(s)(p(s)-q(s))ds|.</script><p>上述的方法具有很大的灵活性，可以学习到非线性的表示和预测方法。但是当映射函数 $\Phi$维度很高时，那么在预测函数$h(\Phi(x_i),W_i)$ 中。策略$W$ 的作用就会很小，这是一个风险。为了解决这个问题，一种方法就是分别建模$h_1(\Phi)$ 和$h_0(\Phi)$ ，他们共享多任务学习的网络结构；每个样本仅用于更新相对应的模型。其优点是，统计特征在共同的表示层中共享，策略的影响在单独的模型中保留[122]。如原参考文献[120]中的完全匹配方法，该模型还可以扩展到任意数量的策略。在此基础上，提出了几种改进模型并进行了讨论。例如，文献[61]中将平移不变性的表示学习和重加权方法结合在一起。文献[51]在表示学习的基础上，提出了一种新的基于重抽样技术的上下文感知加权方案，以缓解ITE估计中的选择偏差问题。</p><h4 id="4-5-2-局部相似表示学习"><a href="#4-5-2-局部相似表示学习" class="headerlink" title="4.5.2 局部相似表示学习"></a>4.5.2 局部相似表示学习</h4><p>现有的ITE估计方法主要关注于平衡对照组和策略组样本的分布，而忽略了局部相似性信息。然而考虑局部相似性可以为ITE估计提供了有意义的思路。文献[147,150]提出了一种基于深度表示学习的保持局部相似度的个体策略效应(<strong>SITE</strong> )估计方法。<strong>SITE</strong> 保持局部相似性，同时平衡数据分布。<strong>SITE</strong> 的框架包括五个主要部分：表示网络、三联体对的选择、位置依赖的深度准则(<strong>PDDM</strong> )、中点距离最小化(<strong>MPDM</strong> )和结果预测网络。为了提高模型效率，<strong>SITE</strong>以小批量处理的方式输入训练样本，可以从每个小批量样本中选择三联体对。表示网络代表输入样本的潜在映射。<strong>PDDM</strong> 和<strong>MPDM</strong> 可以在保留局部相似信息的同时实现潜在空间的平衡分布。最后，将小批量样本在潜在空间的表示映射到二分类结果预测网络中，得到潜在结果。<strong>SITE</strong> 的损失函数如下：</p><script type="math/tex; mode=display">L=L_{FL}+\beta L_{PDDM} + \gamma L_{MPDM} + \lambda ||M||_2</script><p>其中， $L_{FL}$代表预测结果和实际观测结果的损失函数， $L_{PDDM}$和$L_{MPDM}$ 分别代表<strong>PDDM</strong> 和<strong>MPDM</strong> 的损失函数度量，最后一项还是正则项，关于参数 $M$的 $L_2$ 正则。</p><p><strong>上面这个SITE 介绍的太抽象了，简单解释一下思想就是，网络结构还是不变的，就是在损失函数上考虑了局部相似性，那么用什么衡量局部相似性呢？使用位置依赖的深度准则(PDDM )和中点距离最小化准则(MPDM)，至于什么是三联体对呢？三联体就是</strong> <strong>$\{\Phi(x_i),W_i,Y_i\}$，至于三联体对就是策略组和控制组各取一个三联体组成对；具体细节和上面公式(27)表示的损失函数中的各个部分的详细公式，需要感兴趣的小伙伴回到原文献探索了。</strong></p><h4 id="4-5-3-去工具变量表示学习"><a href="#4-5-3-去工具变量表示学习" class="headerlink" title="4.5.3 去工具变量表示学习"></a><strong>4.5.3 去工具变量表示学习</strong></h4><p>大多数模型主要关注数值型的相关变量，而如何在策略效果评估时处理文本信息类型的变量仍然是一个开放性的问题。一个主要的挑战是如何过滤掉那些类似于工具变量的变量，这些变量与策略强相关，甚至大于结果与策略之间的关系。以这些变量为条件来估计策略效果会放大估计偏差，<strong>因为他们一旦确定，策略一般也是固定的</strong>。为了应对这一挑战，原参考文献[151]提出了一种基于条件”对抗策略”学习的匹配方法(<strong>CTAM</strong> )。<strong>CTAM</strong> 应用“对抗策略”学习，在学习表征时过滤掉类似工具变量相关的信息，然后在学习的表征之间进行匹配，以估计策略效果。<strong>CTAM</strong> 包含三个主要部分:文本处理、表示学习和条件处理鉴别器。通过文本处理组件，将原始文本转换为矢量表示$S$ 。然后将$S$与非文本协变量$X$连接，构造统一的特征向量，将特征向量输入表示神经网络，得到潜在表示$Z$ 。得到潜在表示$Z$ 后， $Z$和潜在的结果$Y$ 被输入条件处理鉴别器。在训练过程中，表示学习器与条件处理鉴别器进行极大极小博弈：为了达到阻止鉴别器分辨出正确的策略，表示学习器需要过滤掉类似工具变量相关的信息。最后的匹配过程在表示空间$Z$ 中执行。条件”对抗策略”学习有助于减少策略效果估计的偏差。</p><h4 id="4-5-4-基于表示学习的匹配方法"><a href="#4-5-4-基于表示学习的匹配方法" class="headerlink" title="4.5.4 基于表示学习的匹配方法"></a><strong>4.5.4 基于表示学习的匹配方法</strong></h4><p>与上述基于回归的表示学习方法相比，匹配方法更具可解释性，因为任何样本的反事实结果都直接被设置为接受其他策略的组中最近邻的事实观测结果。最近邻匹配(<strong>NNM</strong> )将任何试验(对照)样本的反事实结果设置为在对照(试验)组中最近邻的事实结果相等。大多数<strong>NNM</strong> 方法虽然简单、灵活、可解释，但容易被大量的无关变量所误导。为了解决这一挑战，可以对试验组和对照组的预测结果变量的子空间进行匹配。在学习到的子空间中应用<strong>NNM</strong> 可以更准确地估计反事实结果，从而更准确地估计策略效果。参考文献[26]通过学习投影矩阵来估计试验样本的反事实结果，该投影矩阵通过最大化对照样本在表示空间的投影与结果变量之间的非线性相关性来求得。然后将学习到的投影矩阵直接应用到所有样本上，在子空间中寻找与试验样本匹配的所有对照样本。</p><h3 id="4-6-多任务学习方法（Multitask-Learning-Methods）"><a href="#4-6-多任务学习方法（Multitask-Learning-Methods）" class="headerlink" title="4.6 多任务学习方法（Multitask Learning Methods）"></a>4.6 多任务学习方法（Multitask Learning Methods）</h3><p>策略组和对照组除了某些各自的特性外，也存在一些共同的性质。自然地，因果推理可以被定义为一个多任务学习问题，它包含策略组和对照组的共享层，以及策略组和对照组的各自的特定层。多任务学习问题中选择偏差的影响可以通过基于倾向得分的<strong>dropout</strong> 正则化方法来缓解[4]，该方案通过依赖于倾向得分的<strong><em>dropout\</em></strong> 概率对每个训练样本进行细化。如果某个样本的特征落在策略组和对照组的特征空间中较差的重叠区域，那么<strong>dropout</strong> 概率更高。</p><p>贝叶斯方法也可以扩展到多任务模型下。非参数的贝叶斯方法[3]使用了一个多任务高斯过程，该高斯过程以 一个定义在向量值映射的可再生核希尔伯特空间上的线性共区域核作为先验。<strong>这句话太专业了，读起来都很拗口，核心就是这个多任务问题给建模成了一个高斯过程问题(高斯过程问题请自行查阅)；那么高斯过程需要一个先验分布啊，这个方法就定义了一个所谓线性共区域核的先验，并且说明这个先验是定义在向量值映射的可再生核希尔伯特空间上。</strong> 贝叶斯方法可以通过联合分布来计算我们估计的每一个样本的策略效果的置信度，这对实现精确医疗至关重要。我们可以采用基于风险的经验贝叶斯方法对多任务高斯过程的先验进行调整，从而减少选择偏差的影响，它的核心思想是使观测结果中的经验误差和反事实结果中的不确定性得到最小化。</p><p>多任务模型可以扩展到多个策略，即使每个策略中有连续的参数。剂量反应网络(DRNet)架构具有共享的基础层[119]、$N_W$ 个中间策略层和$N_W\times E$ 个输出节点，这些输出节点可用于表示具有相关剂量参数$s$ 的多重策略。<strong>即每个策略( $N_W$ )有 $E$个剂量。</strong>共享的基础层对所有样本进行训练，而策略层只对来自各自策略组的样本进行训练。每一策略层又连接$E$ 个输出节点，每个输出节点被分配一个剂量，该剂量将潜在剂量的范围$[a_t,b_t]$细分为等宽的$E$ 分区，每个分区的宽度就是 $\frac{b_t-a_t}{E}$ 。</p><p><strong>应用多任务学习的本质依然是通过机器学习得到精准的模型来估计反事实结果，那么对于选择性偏差问题，我们采用基于倾向得分的dropout 方法来缓解。做过神经网络的同学应该比较熟悉dropout 方法，就是一种网络中常见的降低过拟合的正则化方法，原理类似于随机抽样，但是在传统的神经网络中，dropout 系数是一个我们提前设定的超参数，对每一个样本都是一样的，在这里的dropout系数是根据倾向得分个性化的，如果某个样本的特征落在策略组和对照组的特征空间中较差的重叠区域，那么dropout 概率更高。</strong></p><p><strong>至于后面的贝叶斯方法就是将神经网络换成贝叶斯网络，多策略就是多了一些输出节点，多策略多剂量就是每个策略层后多加了一些输出节点，万变不离其中，核心还是这个dropout 系数的设定。</strong></p><h3 id="4-7-元学习方法（Meta-Learning-Methods）"><a href="#4-7-元学习方法（Meta-Learning-Methods）" class="headerlink" title="4.7 元学习方法（Meta-Learning Methods）"></a>4.7 元学习方法（Meta-Learning Methods）</h3><p>我们在设计对于不同策略效果的估计算法时，应该考虑两个核心因素：1) 控制混杂，例如消除混杂造成的对策略效果错误的估计；2) 给<strong>CATE</strong> 一个精准的估计。我们之前介绍的方法均是想同时达到这两个目的，然而，基于元学习的方法将这个过程分成了两步。总体来说，基于元学习的方法有下面的两步：(1) 估计条件期望结果$E[Y|X=x]$ ，该步学习到的模型称为元学习器；(2) 基于上一步得到策略组估计结果之间的差异来估计<strong>CATE</strong>。已有的元学习方法包括T学习器，S学习器，X学习器，U学习器和R学习器，接下来我们一一介绍：</p><p>T学习器构造两个决策树分别估计条件策略和对照结果，记为$\mu_1(x)=E[Y(1)|X=x]$ 和$\mu_0(x)=E[Y(0)|X=x]$ ，进而，我们使用$\hat{\mu_0}(x)$  和$\hat{\mu_1}(x)$ 分别代表在对照组和策略组训练好的决策树模型。最后，T学习器的<strong>CATE</strong> 估计值为：$\hat{\tau}(x)=\hat{\mu_1}(x)-\hat{\mu_0}(x)$ 。T学习器为对照组和策略组训练了两个元学习器，T代表Two；</p><p>与T学习器不同的是，S学习器将策略作为一个特征加入模型训练，训练了一个统一的结果预估模型：$\mu(x,w)=E[Y^F|X=x,W=w]$ （S代表Single），进而，训练好的模型记为：$\hat{\mu}(x,w)$ 。最后<strong>CATE</strong> 的估计值为：$\hat{\tau_S}(x)=\hat{\mu}(x,1)-\hat{\mu}(x,0)$。</p><p>然而，T学习器和S学习器高度依赖训练模型的准确性，当对照组和策略组的样本数量很不均衡的时候，在数量较小的样本组上，模型效果会比较差。为了克服这个困难，参考文献[70]中提出来X学习器，X学习器额外使用对照组的信息对策略组做出了更好的估计，反之亦然；交叉各组信息的使用是X学习器名称的由来，X表示交叉。</p><p>具体来说，X学习器包含三个关键步骤。X学习器的第一步与T学习器相同，将训练过的元学习者记为$\hat{\mu_0}(x)$ 和 $\hat{\mu_1}(x)$。在第二步中，X学习器计算观察结果与估计结果之间的差异作为估计的策略效果：在对照组中，该差异是估计的策略结果减去观察到的对照结果，记为：$\hat{D_i^C}=\hat{\mu_1}(x)-Y^F$；同样的，在策略组中，差异表述为：$\hat{D_i^F}=Y^F-\hat{\mu_0}(x)$  。进行差异计算后，将数据集连同计算出的策略效果转换为两组：对照组：$(X_C,\hat{D}^C)$  和策略组$(X_T,\hat{D}^T)$ 。在两个估计数据集上，以$X_C(X_T)$ 为输入，$\hat{D}^C(\hat{D}^T)$为输出，训练策略效应模型$\tau_1(x)(\tau_0(x))$ 两个元学习者。最后一步是将两个<strong>CATE</strong> 估计量通过加权平均组合在一起： $\tau_X(x)=g(x)\hat{\tau_0}+(1-g(x))\hat{\tau_0}(x)$，其中$g(x)$为0到1之间的加权函数。总的来说，通过交叉信息的使用和两种<strong>CATE</strong> 元学习器的加权组合，X学习器可以处理两组样本数量不平衡的情况[70]。</p><p>与X学习器采用的常规的损失函数不同，R学习器[87]为<strong>CATE</strong> 估计设计了的基于Robinson变换的损失函数[104]。R学习器中的R表示Robinson变换。通过重写观测结果和条件估计结果可以导出Robinson变换，将观测结果重写为：</p><script type="math/tex; mode=display">Y_i(W=W_i)=\hat{\mu_0}(x_i)+w_i\times \tau(x)i + \varepsilon_i(w_i)</script><p>其中，$\hat{\mu_0}$  是已经训练的对照结果估计器(元学习器)，  $\hat{\tau}(x_i)$是<strong>CATE</strong> 估计器，并且$E[\varepsilon|x_i,w_i]=0$ (基于可忽略假设)。再将条件估计结果重写为：</p><script type="math/tex; mode=display">\hat{m}(x_i)=E[Y|X]=\hat{\mu_0}(x_i)+\hat{e}(x_i)\times \tau(x_i)</script><p>其中，$\hat{e}(x)$  是已经训练过的倾向得分估计器(元学习器)。Robinson变换是通过公式(28)和(29)相减得到：</p><script type="math/tex; mode=display">Y_i^F-\hat{n}(x_i=(w_i-\hat{e}(x_i))\tau(x_i)+\varepsilon(w_i)</script><p>基于Robinson变换，一个良好的<strong>CATE</strong> 估计应该最小化$Y_i^F-\hat{m}({x_i})$  和$w_i-\hat{e}(x_i)\tau(x_i)$ 之间的差异。因此，R学习器的目标函数如下所示：</p><script type="math/tex; mode=display">\tau(\cdot)=arg \min_\tau{\frac{1}{n}\sum_{i=1}^n((Y_i^F-\hat{m}(x_i))-(w_i-\hat{e}(x_i))\tau(x_i))^2}+\Lambda(\tau(\cdot))</script><p>其中，$\hat{m}(x_i)$ 和$\hat{e}(x_i)$ 是预训练的结果估计器和倾向分估计器，$\Lambda(\tau(·))$ 是对$\tau(·)$  的正则化。</p><p><strong>虽然作者漏掉了U学习器，但是这部分的内容也是十分丰富。道理我们都懂，分两步，先把反事实结果估计出来，再估计CATE ；大家也都知道通过元学习器来估计反事实结果，但是这个元学习器是如何求解出来的？是不是还是要用上面介绍的决策树方法、领域适应方法或者多任务学习方法呢？</strong></p><h2 id="5-实验指导（Guideline-About-Experiment）"><a href="#5-实验指导（Guideline-About-Experiment）" class="headerlink" title="5. 实验指导（Guideline About Experiment）"></a>5. 实验指导（Guideline About Experiment）</h2><p>这一章节介绍当前研究可用的数据集、开源代码及研究框架。</p><h3 id="5-1-数据集（Datasets）"><a href="#5-1-数据集（Datasets）" class="headerlink" title="5.1 数据集（Datasets）"></a>5.1 数据集（Datasets）</h3><p>由于反事实的结果永远无法被观察到，因此很难找到一个完全满足实验要求的数据集，即具有基本真实数据集 (ITE) 的观测数据集。</p><p>现在很多研究中使用到的数据集基本上都是半人工合成的数据集，合成的规则不尽相同，如IHDP数据集，是从随机数据集中按照一定的生成过程生成其观测结果，并去除一个有偏子集来模拟观测数据集中的选择偏差。一些数据集，如Jobs数据集，将随机数据集和观察控制数据集结合起来，产生选择偏差。</p><ul><li><strong>目前可用基准数据集</strong>·<ul><li><a href="http://www.mit.edu/~fredrikj/files/ihdp_100.tar.gz">IHDP</a></li><li><a href="http://users.nber.org/~rdehejia/data/nswdata2.html">Jobs</a></li><li>Twins</li><li><a href="https://drive.google.com/file/d/0B7pG5PPgj6A3N09ibmFwNWE1djA/view?resourcekey=0-Nb6XWR_rhsi-4d-gFcsoZg">ACIC dataset</a></li><li><ul><li><a href="https://drive.google.com/file/d/0B7pG5PPgj6A3N09ibmFwNWE1djA/view">2016</a></li><li><a href="https://www.synapse.org/#!Synapse:syn11294478/wiki/486304">2018</a></li><li><a href="https://sites.google.com/view/acic2019datachallenge/data-challenge?authuser=0">2019</a></li></ul></li><li><a href="https://github.com/IBM-HRL-MLHLS/IBM-Causal-Inference-Benchmarking-Framework">IBM causal inference benchmark</a></li><li>BlogCatalog</li><li>Flickr</li><li><a href="https://archive.ics.uci.edu/ml/datasets/bag+of+words">News</a></li><li>MVICU</li><li><a href="https://gdc.cancer.gov/">TCGA</a></li><li>Saccharomyces cerevisiae (yeast) cell cycle gene expression dataset</li><li>THE</li><li>FERTIL2</li></ul></li></ul><h3 id="5-2-开源的研究框架（Toolboxs）"><a href="#5-2-开源的研究框架（Toolboxs）" class="headerlink" title="5.2 开源的研究框架（Toolboxs）"></a><strong>5.2 开源的研究框架</strong>（Toolboxs）</h3><ul><li><a href="https://github.com/microsoft/dowhy">Dowhy</a> —— 微软研发，基于Python</li><li><a href="https://github.com/uber/causalml">Causal ML</a> —— Uber研发，基于Python</li><li><a href="https://github.com/microsoft/EconML#blogs-and-publications">EconML</a> —— 微软研发，基于Python</li><li><a href="https://github.com/soerenkuenzel/causalToolbox">causalToolbox</a> —— 基于R语言</li></ul><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/A Survey on Causal Inference8.png" alt="开源框架介绍"></p><h3 id="5-3-开源因果推断方法（Code-of-Methods）"><a href="#5-3-开源因果推断方法（Code-of-Methods）" class="headerlink" title="5.3 开源因果推断方法（Code of Methods）"></a>5.3 开源因果推断方法（Code of Methods）</h3><p><strong>基于Python语言</strong></p><ul><li><a href="https://cran.r-project.org/web/packages/PSW/">PSM1</a>/<a href="https://github.com/akelleh/causality">PSM2</a></li><li><a href="https://github.com/d909b/perfect_match">Perfect Match</a></li><li><a href="https://bitbucket.org/mvdschaar/mlforhealthlabpub/src/baa0aa33a6af3fe490484c9e11e3a158968ae56a/alg/causal_multitask_gaussian_processes_ite/">CMGP</a></li><li><a href="https://github.com/JakeColtman/bartpy">BART</a></li><li><a href="https://bitbucket.org/mvdschaar/mlforhealthlabpub/src/baa0aa33a6af3fe490484c9e11e3a158968ae56a/alg/ganite/">GANITE</a></li><li><a href="https://github.com/clinicalml/cfrnet">BNN/CFR</a></li><li><a href="https://github.com/AMLab-Amsterdam/CEVAE">CEVAE</a></li><li><a href="https://github.com/Osier-Yi/SITE">SITE</a></li><li><a href="https://github.com/claudiashi57/dragonnet">dragonet</a></li><li><a href="https://github.com/d909b/drnet">DRNets</a></li><li><a href="https://github.com/rguo12/network-deconfounder-wsdm20">Network Decondounder</a></li><li><a href="https://github.com/vveitch/causal-network-embeddings">Network Embeddings</a></li><li><a href="https://github.com/rguo12/CIKM18-LCVA">LCVA</a></li></ul><p><strong>基于R语言</strong></p><ul><li><a href="https://cran.r-project.org/web/packages/ipw/index.html">IPW</a></li><li><a href="https://github.com/gregridgeway/fastDR">DR</a></li><li><a href="https://cran.r-project.org/web/packages/sensitivityPStrat/index.html">Principal Stratification</a></li><li><a href="https://cran.r-project.org/web/packages/stratification/">Stratification</a></li><li><a href="https://cran.r-project.org/web/packages/PSW/">Matching based</a></li><li><a href="https://cran.r-project.org/web/packages/Matching/">optimal matching</a></li><li><a href="https://cran.r-project.org/web/packages/cem/">CEM</a></li><li><a href="https://cran.r-project.org/web/packages/tmle/index.html">TMLE1</a>/<a href="https://github.com/joshuaschwab/ltmle">TMLE2</a></li><li><a href="https://cran.r-project.org/web/packages/BayesTree/index.html">BART</a></li><li><a href="https://cran.r-project.org/web/packages/grf/index.html">grf</a></li><li><a href="https://github.com/xnie/rlearner/blob/master/R/xlearner.R">R-learning</a></li><li><a href="https://github.com/swager/balanceHD">Residual Balancing</a></li><li><a href="https://github.com/kosukeimai/CBPS">CBPS</a></li><li><a href="https://cran.r-project.org/web/packages/ebal/">Entropy Balancing</a></li></ul><h2 id="6-应用（Applications）"><a href="#6-应用（Applications）" class="headerlink" title="6. 应用（Applications）"></a>6. 应用（Applications）</h2><p>因果推理的应用可以分为三个方向</p><ul><li><strong>决策评估</strong> —— 这与Treatment效果评估的目标是一致的。</li><li><strong>反事实估计</strong> —— 反事实学习极大地帮助了与决策相关的领域，因为它可以提供不同决策选择（或策略）的潜在结果。</li><li><strong>处理选择偏差</strong> —— 在许多实际应用程序中，出现在收集的数据集中的记录并不代表感兴趣的整个群体。如果不恰当地处理选择偏差，将影响训练模型的泛化。</li></ul><p>下面是这三个方向适用的应用场景：</p><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/A Survey on Causal Inference9.png" alt="应用场景"></p><h3 id="6-1-广告（Advertising）"><a href="#6-1-广告（Advertising）" class="headerlink" title="6.1 广告（Advertising）"></a>6.1 广告（Advertising）</h3><p><strong>决策评估</strong></p><p>正确衡量广告活动的效果是品牌方成功营销的关键，如新广告是否增加点击量，或新广告是否增加销售额等。</p><p><strong>衡量方法</strong></p><ul><li>随机试验 —— 成本高且耗时，不应采纳</li><li>从观察数据中估计广告效果<ul><li>随机最近邻匹配法 —— 估计数字营销活动的治疗效果</li><li>协变量平衡广义倾向得分（CBGPS）—— 用于分析政治广告的有效性</li></ul></li></ul><p><strong>处理选择偏差</strong></p><p>由于广告系统中现有的选择机制，显示和未显示的事件之间存在分布差异。忽视这种偏差会使广告点击预测不准确，从而造成收入损失。</p><h3 id="6-2-电子邮件营销（e-mail-marketing）"><a href="#6-2-电子邮件营销（e-mail-marketing）" class="headerlink" title="6.2 电子邮件营销（e-mail marketing）"></a>6.2 电子邮件营销（e-mail marketing）</h3><p><strong>决策评估</strong></p><p>目的：瞄准潜在客户，增加收入。</p><p>使用决策评估帮助在不同的促销电子邮件设计中进行选择。</p><h3 id="6-3-推荐系统（Recommendation）"><a href="#6-3-推荐系统（Recommendation）" class="headerlink" title="6.3 推荐系统（Recommendation）"></a>6.3 推荐系统（Recommendation）</h3><p><strong>决策评估</strong></p><p>在推荐系统中给用户推送商品的过程，相当于给原子研究对象施加干预，通过用户的点击、消费等行为评估干预(推荐)的效果。</p><p>系统的推荐建议与评估的干预效果高度相关。</p><p><strong>处理选择偏差</strong></p><p>推荐系统中使用的数据集通常由于用户的自我选择而产生偏差。</p><p>例如，在电影收视率数据集中，用户倾向于对自己喜欢的电影进行评分：恐怖电影的收视率大多由恐怖电影迷制作，而浪漫电影的影迷则较少。</p><p>对于广告推荐，推荐系统只会将广告推荐给系统认为对这些广告感兴趣的用户。</p><p>在上面的例子中，数据集中的记录并不代表整个群体，这就是选择偏差。这种选择偏差给推荐模型的训练和评价带来了挑战。基于倾向得分的样本再加权是解决选择偏差问题的有效方法。</p><h3 id="6-4-药物治疗（Medicine）"><a href="#6-4-药物治疗（Medicine）" class="headerlink" title="6.4 药物治疗（Medicine）"></a>6.4 药物治疗（Medicine）</h3><p><strong>反事实估计</strong></p><p>当可以估计不同的可用药物的疗效时，医生可以据此开出更好的处方。</p><h3 id="6-5-教育（Education）"><a href="#6-5-教育（Education）" class="headerlink" title="6.5 教育（Education）"></a>6.5 教育（Education）</h3><p><strong>反事实估计</strong></p><p>通过比较不同教学方法对学生群体的影响，可以确定一种更好的教学方法。</p><h3 id="6-6-强化学习（Reinforcement-Learning）"><a href="#6-6-强化学习（Reinforcement-Learning）" class="headerlink" title="6.6 强化学习（Reinforcement Learning）"></a>6.6 强化学习（Reinforcement Learning）</h3><p>机械臂的探索和开发类似于随机试验和观察数据。因此，这两个领域有一些相似的关键挑战:如何获得一个无偏的结果/奖励估计?如何处理影响治疗分配/行动选择和结果/奖励的观察到或未观察到的混杂因素?因此可以使用因果推断中的方法用于强化学习中，得到无偏的估计。</p><h2 id="7-总结（Conclusion）"><a href="#7-总结（Conclusion）" class="headerlink" title="7. 总结（Conclusion）"></a>7. 总结（Conclusion）</h2><p>长期以来，因果推理一直是一个很有吸引力的研究课题，因为它提供了一种有效的方法来揭示现实问题中的因果关系。如今，机器学习的蓬勃发展给这一领域带来了新的活力，同时，因果推理领域的精深思想也推动了机器学习的发展。在这一Survey中，我们在潜在结果框架下，提供了一个全面的回顾方法。由于潜在结果框架依赖于这三个假设，因此方法被分为两类。一个类别依赖于这些假设，而另一个类别放宽了一些假设。对于每个类别，我们提供了详细的讨论、比较和综述方法。文中还列出了这些方法的可用基准数据集和开源代码。最后，介绍了因果推理在现实世界中的一些代表性应用，如广告、推荐、医学和强化学习。</p>]]></content>
      
      
      <categories>
          
          <category> 因果推断 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 因果推断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四六级-同意替换</title>
      <link href="2021/05/08/ying-yu-si-liu-ji-tong-yi-ti-huan/"/>
      <url>2021/05/08/ying-yu-si-liu-ji-tong-yi-ti-huan/</url>
      
        <content type="html"><![CDATA[<h2 id="1-减少"><a href="#1-减少" class="headerlink" title="1.减少"></a>1.减少</h2><div class="table-container"><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">词义</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">diminish</td><td style="text-align:center">v.减少</td><td style="text-align:center">di：分开，mini：小</td></tr><tr><td style="text-align:center">dwindle</td><td style="text-align:center">v.逐渐减少</td><td style="text-align:center">dw：down，wind；le：后缀</td></tr><tr><td style="text-align:center">lessen</td><td style="text-align:center">v.减少</td><td style="text-align:center">less:减少，en:动词后缀</td></tr><tr><td style="text-align:center">slash</td><td style="text-align:center">v.削减</td><td style="text-align:center">sl：下滑，ash：cash</td></tr><tr><td style="text-align:center">slump</td><td style="text-align:center">v.暴跌、n.衰退</td><td style="text-align:center">sl：下滑，ump：jump</td></tr><tr><td style="text-align:center">recession</td><td style="text-align:center">n.衰退</td><td style="text-align:center">re：back，cess：to go，ion：名词词缀</td></tr><tr><td style="text-align:center">lower</td><td style="text-align:center">v.降低</td><td style="text-align:center">low：低，er：动词后缀</td></tr><tr><td style="text-align:center">depression</td><td style="text-align:center">n.萧条，衰退</td><td style="text-align:center">de：down，press：压，向下压制：沮丧</td></tr><tr><td style="text-align:center">degenerate</td><td style="text-align:center">v.退化</td><td style="text-align:center">de：down，generate：生产</td></tr><tr><td style="text-align:center">degrade</td><td style="text-align:center">v.降级，退化，降解</td><td style="text-align:center">de：down，grade：级别</td></tr><tr><td style="text-align:center">decay</td><td style="text-align:center">v/n.退化，腐烂</td><td style="text-align:center">decade东西放十年：腐烂</td></tr><tr><td style="text-align:center">reduction</td><td style="text-align:center">n.减少，降低</td><td style="text-align:center">reduce v.减少</td></tr><tr><td style="text-align:center">decline</td><td style="text-align:center">v/n.下降，衰退，婉拒</td><td style="text-align:center">de：down，cline：bend向下弯曲</td></tr><tr><td style="text-align:center">deteriorate</td><td style="text-align:center">v.恶化，变坏</td><td style="text-align:center">de：to，terior，ate：动词后缀</td></tr><tr><td style="text-align:center">‘aggravate</td><td style="text-align:center">v.加重，恶化</td><td style="text-align:center">ag：动作加强，grav：gravity，ate：动词后缀</td></tr></tbody></table></div><h2 id="2-增加"><a href="#2-增加" class="headerlink" title="2.增加"></a>2.增加</h2><div class="table-container"><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">词义</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">mount</td><td style="text-align:center">v.增加</td><td style="text-align:center">mountain：攀登</td></tr><tr><td style="text-align:center">augment</td><td style="text-align:center">n/v.增加</td><td style="text-align:center">argument 争吵</td></tr><tr><td style="text-align:center">rise</td><td style="text-align:center">n/v.上升，增加</td><td style="text-align:center">rose， risen</td></tr><tr><td style="text-align:center">raise</td><td style="text-align:center">v.提升，筹款，抚养</td><td style="text-align:center">同源rise，及物</td></tr><tr><td style="text-align:center">expand</td><td style="text-align:center">v.扩大</td><td style="text-align:center">ex：out，pand：胖的</td></tr><tr><td style="text-align:center">enhance</td><td style="text-align:center">v.提高，加强</td><td style="text-align:center">en：加强，ha：high</td></tr><tr><td style="text-align:center">rocket</td><td style="text-align:center">v.猛增</td><td style="text-align:center">skyrocket：猛增</td></tr><tr><td style="text-align:center">grow</td><td style="text-align:center">v.增长</td><td style="text-align:center">growth：增长</td></tr><tr><td style="text-align:center">elevate</td><td style="text-align:center">v.提高</td><td style="text-align:center">elevator：电梯</td></tr><tr><td style="text-align:center">soar</td><td style="text-align:center">v.猛增</td><td style="text-align:center">嗖</td></tr><tr><td style="text-align:center">surge</td><td style="text-align:center">v.激增，急剧上升</td><td style="text-align:center">soar</td></tr><tr><td style="text-align:center">boost</td><td style="text-align:center">v/n.促进，提高</td><td style="text-align:center">boom：发展繁荣</td></tr><tr><td style="text-align:center">facilitate</td><td style="text-align:center">v.使便利，促进</td><td style="text-align:center">facility：便利设施</td></tr><tr><td style="text-align:center">promote</td><td style="text-align:center">v.促进，推进，促销</td><td style="text-align:center">pro：向前，mote：move</td></tr><tr><td style="text-align:center">enlarge</td><td style="text-align:center">v.扩大</td><td style="text-align:center">en：加强，large：大</td></tr><tr><td style="text-align:center">add</td><td style="text-align:center">v.增加</td><td style="text-align:center">addition：附加</td></tr><tr><td style="text-align:center">foster</td><td style="text-align:center">v.抚育，促进</td><td style="text-align:center">来自food</td></tr><tr><td style="text-align:center">accelerate</td><td style="text-align:center">v.加速，促进</td><td style="text-align:center">ac：加强，celer：速度</td></tr><tr><td style="text-align:center">amplify</td><td style="text-align:center">v.放大，扩大</td><td style="text-align:center">ample：丰富的，ify：动词</td></tr><tr><td style="text-align:center">magnify</td><td style="text-align:center">v.放大，夸大</td><td style="text-align:center">magn：large</td></tr></tbody></table></div><h2 id="3-原因"><a href="#3-原因" class="headerlink" title="3.原因"></a>3.原因</h2><div class="table-container"><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">词义</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">cause</td><td style="text-align:center">v.导致，n.原因</td><td style="text-align:center">because</td></tr><tr><td style="text-align:center">give rise to</td><td style="text-align:center">导致</td><td style="text-align:center">~</td></tr><tr><td style="text-align:center">contribute</td><td style="text-align:center">导致，有助于</td><td style="text-align:center">be good for</td></tr><tr><td style="text-align:center">result in</td><td style="text-align:center">导致</td><td style="text-align:center">result from：由…导致…</td></tr><tr><td style="text-align:center">fuel</td><td style="text-align:center">v/n.加燃料，激起</td><td style="text-align:center">refuel 加燃料</td></tr><tr><td style="text-align:center">bring about</td><td style="text-align:center">引发</td><td style="text-align:center">~</td></tr><tr><td style="text-align:center">ignite</td><td style="text-align:center">v.点燃，引发</td><td style="text-align:center">night</td></tr><tr><td style="text-align:center">breed</td><td style="text-align:center">v.导致，产生，繁殖</td><td style="text-align:center">brood孵化</td></tr><tr><td style="text-align:center">spell</td><td style="text-align:center">v.导致</td><td style="text-align:center">~</td></tr><tr><td style="text-align:center">incur</td><td style="text-align:center">v.招致，引起</td><td style="text-align:center">concur：同时发生</td></tr><tr><td style="text-align:center">trigger</td><td style="text-align:center">n/v.引发，触发</td><td style="text-align:center">trigger：扳机</td></tr></tbody></table></div><h2 id="3-谴责"><a href="#3-谴责" class="headerlink" title="3.谴责"></a>3.谴责</h2><div class="table-container"><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">词义</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">blame</td><td style="text-align:center">n/v谴责，归咎于</td><td style="text-align:center">blame .. on ..归咎于，be to blame 应受谴责</td></tr><tr><td style="text-align:center">criticize</td><td style="text-align:center">v.批评</td><td style="text-align:center">criticism：评论，critic：评论家，critical：批评的</td></tr><tr><td style="text-align:center">scold</td><td style="text-align:center">v.斥责</td><td style="text-align:center">s+cold</td></tr><tr><td style="text-align:center">accuse</td><td style="text-align:center">v.指责，指控</td><td style="text-align:center">accuse sb of sth：指控某人做某事</td></tr><tr><td style="text-align:center">condemn</td><td style="text-align:center">v.指责，指控</td><td style="text-align:center">damn it!</td></tr><tr><td style="text-align:center">denounce</td><td style="text-align:center">v.公开谴责</td><td style="text-align:center">de：消极否定，nounce：announce</td></tr><tr><td style="text-align:center">be under fire</td><td style="text-align:center">遭受谴责</td><td style="text-align:center">~</td></tr></tbody></table></div><h2 id="4-赞扬"><a href="#4-赞扬" class="headerlink" title="4.赞扬"></a>4.赞扬</h2><div class="table-container"><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">词义</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">praise</td><td style="text-align:center">v.赞扬</td><td style="text-align:center">prize：奖品</td></tr><tr><td style="text-align:center">compliment</td><td style="text-align:center">n/v.赞扬，恭维</td><td style="text-align:center">complement：补充</td></tr><tr><td style="text-align:center">commend</td><td style="text-align:center">v.公开赞扬，推荐</td><td style="text-align:center">com：一起，recommend：推荐</td></tr><tr><td style="text-align:center">celebrate</td><td style="text-align:center">v.歌颂，祝贺</td><td style="text-align:center">celebration：祝贺</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫之图片爬取</title>
      <link href="2021/04/30/python/scrapy-pa-chong-zhi-tu-pian-pa-qu/"/>
      <url>2021/04/30/python/scrapy-pa-chong-zhi-tu-pian-pa-qu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h2><p>进入项目文件夹，打开windows PowerShell，创建爬虫项目：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">scrapy startproject spider<span class="token punctuation">(</span>项目名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-创建爬虫"><a href="#2-创建爬虫" class="headerlink" title="2.创建爬虫"></a>2.创建爬虫</h2><p>进入创建的爬虫项目文件夹，创建爬虫：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">scrapy genspider dogcat<span class="token punctuation">(</span>爬虫名字<span class="token punctuation">)</span> www<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-属性封装"><a href="#3-属性封装" class="headerlink" title="3.属性封装"></a>3.属性封装</h2><p>进入items.py文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Define here the models for your scraped items</span><span class="token comment">#</span><span class="token comment"># See documentation in:</span><span class="token comment"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">SpiderItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># define the fields for your item here like:</span>        <span class="token comment"># 定义各种属性</span>    src <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-爬虫机制定义"><a href="#4-爬虫机制定义" class="headerlink" title="4.爬虫机制定义"></a>4.爬虫机制定义</h2><p>进入爬虫py文件（dogcat.py)，导入封装属性包：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> spider<span class="token punctuation">.</span>items <span class="token keyword">import</span> SpiderItem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据对应网页书写 xpath 定义，上传item对象：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DogcatSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'dogcat'</span>    <span class="token comment"># allowed_domains = ['sc.chinaz.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://sc.chinaz.com/tupian/'</span><span class="token punctuation">]</span>    <span class="token comment"># 爬虫机制设定</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 一个id属性为container下的所有div</span>        div_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@id="container"]/div'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>            <span class="token comment"># 获得div下a下img的scr2属性值(伪属性）</span>            src <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/a/img/@src2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 实例化对象</span>            item <span class="token operator">=</span> SpiderItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span> <span class="token operator">=</span> src            <span class="token comment"># 提交管道</span>            <span class="token keyword">yield</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-设置配置信息"><a href="#5-设置配置信息" class="headerlink" title="5.设置配置信息"></a>5.设置配置信息</h2><p>打开网页F12，选择Network，随意选择一个提交文件。打开其Headers选项，拉至最后复制<strong>User-Agent</strong>属性。将这个值填入setting.py中的<strong>USER_AGENT</strong>值处（解除注释状态）。为了让爬取过程更清晰，我们可以在其上一行加入如下设置：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">LOG_LEVEL <span class="token operator">=</span> <span class="token string">"ERROR"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时将<strong>ROBOTSTXT_OBEY</strong>改成False：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Obey robots.txt rules</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-管道类重封装"><a href="#6-管道类重封装" class="headerlink" title="6.管道类重封装"></a>6.管道类重封装</h2><p>考虑到爬取图片数据，Scrapy特意准备了一个ImagesPipeline的图像爬取类，我们只需要对其进行继承，重书写即可。具体如下，将pipeline.py文件内容全部注释，重新书写如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Define your item pipelines here</span><span class="token comment">#</span><span class="token comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment"># useful for handling different item types with a single interface</span><span class="token comment"># from itemadapter import ItemAdapter</span><span class="token comment">#</span><span class="token comment">#</span><span class="token comment"># class SpiderPipeline:</span><span class="token comment">#     def process_item(self, item, spider):</span><span class="token comment">#         return item</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>pipelines<span class="token punctuation">.</span>images <span class="token keyword">import</span> ImagesPipeline<span class="token comment"># 需要重写三个方法</span><span class="token keyword">class</span> <span class="token class-name">imgsPipeline</span><span class="token punctuation">(</span>ImagesPipeline<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 根据图片地址进行图片的请求</span>    <span class="token keyword">def</span> <span class="token function">get_media_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 请求</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 指定图片存储的路径</span>    <span class="token keyword">def</span> <span class="token function">file_path</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> item<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 得到图片名称</span>        imgName <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> imgName    <span class="token keyword">def</span> <span class="token function">item_completed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> results<span class="token punctuation">,</span> item<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 返回下一个即将被执行的管道类</span>        <span class="token keyword">return</span> item     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而图片的存储路径只需要在setting.py的最后一行加入如下配置即可：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 指定图片存储目录（若不存在则会自动创建）</span>IMAGES_STORE <span class="token operator">=</span> <span class="token string">'./imgs'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时在setting.py中打开管道类的开关（大约68行左右），将管道类名字换成自定义的管道类名字即可：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Configure item pipelines</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'spider.pipelines.imgsPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-爬取图片"><a href="#7-爬取图片" class="headerlink" title="7.爬取图片"></a>7.爬取图片</h2><p>在命令行运行如下命令进行图片爬取：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">scrapy crawl dogcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-参考文献"><a href="#8-参考文献" class="headerlink" title="8.参考文献"></a>8.参考文献</h2><p><a href="https://www.bilibili.com/video/BV1ha4y1H7sx?p=69&amp;t=1">https://www.bilibili.com/video/BV1ha4y1H7sx?p=69&amp;t=1</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数本质</title>
      <link href="2021/04/19/xian-xing-dai-shu-ben-zhi/"/>
      <url>2021/04/19/xian-xing-dai-shu-ben-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="线性代数的本质"><a href="#线性代数的本质" class="headerlink" title="线性代数的本质"></a>线性代数的本质</h2><h3 id="1-矩阵本质"><a href="#1-矩阵本质" class="headerlink" title="1.矩阵本质"></a>1.矩阵本质</h3><p>在有一定线性代数基础之后，我们知道下式：</p><script type="math/tex; mode=display">A=\begin{bmatrix}    1 & 0 \\\\    0 & 1 \\\\\end{bmatrix}</script><p>是一个比较常见的矩阵。但实际上它存在着更加本质的含义。首先，我们从列的角度来看，第一列为：</p><script type="math/tex; mode=display">i=\begin{bmatrix}    1  \\\\    0 \\\\\end{bmatrix}</script><p>而第二列为：</p><script type="math/tex; mode=display">j=\begin{bmatrix}    0 \\\\    1 \\\\\end{bmatrix}</script><p>这两个实际上是整个二维空间的基向量 i 和 j，即span(i,j)为整个二维空间 。在二维空间中的任意坐标均可用 i 和 j 线性表示出来。如二维空间点B：</p><script type="math/tex; mode=display">B=\begin{bmatrix}    3  \\\\    4  \\\\\end{bmatrix}</script><p>可以由 基 i 和 j 唯一线性表示：</p><script type="math/tex; mode=display">B =3i+4j</script><p><strong>注：</strong>因为上述的A矩阵是一个非奇异矩阵，因此按找列分解得到的两个基向量是线性无关的。但如果A矩阵是一个奇异矩阵，那么按列得到的基便是线性相关的，这使得两个线性相关的基得到的span从二维空间坍缩为一条直线，从而二维空间中直线外的点无法用这组基线性表示。</p><p>上面提到的这个A矩阵比较简单，但实际上，无论对多么复杂的非奇异A矩阵来说，都可以得到上面的结论。如:</p><script type="math/tex; mode=display">A=\begin{bmatrix}    1 & 2 \\\\    2 & 2 \\\\\end{bmatrix}</script><p>同理：</p><script type="math/tex; mode=display">i=\begin{bmatrix}    1  \\\\    2  \\\\\end{bmatrix},j=\begin{bmatrix}    2  \\\\    2  \\\\\end{bmatrix}</script><p>同样我们可以得到B的唯一线性表示为：</p><script type="math/tex; mode=display">B=i+j</script><p>对于2维矩阵我们得到上述结论，但实际上对于3维，甚至n维的矩阵都有以上结论：n个线性无关列向量构成的基能够span成n维空间。</p><hr><h3 id="2-线性变化"><a href="#2-线性变化" class="headerlink" title="2.线性变化"></a>2.线性变化</h3><p>在实际的操作中，我们发现线性变换实际上是对<strong>原始矩阵</strong>左乘一个<strong>变换矩阵</strong>来实现。那其中是什么道理呢？</p><p>首先我们假设原始矩阵为:</p><script type="math/tex; mode=display">O=\begin{bmatrix}    1 & 0 \\\\    0 & 1 \\\\\end{bmatrix}</script><p>变换矩阵为：</p><script type="math/tex; mode=display">T=\begin{bmatrix}    1 & 2 \\\\    2 & 2 \\\\\end{bmatrix}</script><p>那么，按照线性代数中O经过T的线性变换后变成了：</p><script type="math/tex; mode=display">R=TO=\begin{bmatrix}    1 & 2 \\\\    2 & 2 \\\\\end{bmatrix}\begin{bmatrix}    1 & 0 \\\\    0 & 1 \\\\\end{bmatrix}=\begin{bmatrix}    1 & 2 \\\\    2 & 2 \\\\\end{bmatrix}</script><p>按照1部分中的矩阵基理论，经过T变换后， 矩阵基从原来的</p><script type="math/tex; mode=display">i=\begin{bmatrix}    1  \\\\    0  \\\\\end{bmatrix},j=\begin{bmatrix}    0  \\\\    1  \\\\\end{bmatrix}</script><p>变成了现在的：</p><script type="math/tex; mode=display">\hat{i}=\begin{bmatrix}    1  \\\\    2  \\\\\end{bmatrix},\hat{j}=\begin{bmatrix}    2  \\\\    2  \\\\\end{bmatrix}</script><p>所以，线性变换实际上空间到空间的映射，而其本质即是通过基变化反映。而空间中任何一点在映射前后相对于基的表示是不变的。</p><p><strong>注：</strong>这里记变换前空间为A（以基本坐标轴为基），变换后空间为B，如果在A空间中的坐标为[1,2]^T,则只需要将该点坐标左乘B的基构成矩阵的逆，即可得到该点在B中的坐标表示。反之，只需要乘改矩阵的逆即可反求。</p><hr><h3 id="3-行列式"><a href="#3-行列式" class="headerlink" title="3.行列式"></a>3.行列式</h3><p>行列式的出现实际上是为了刻画向量从【1,0】和【0,1】变成当前基的有向缩放倍数。如行列式：</p><script type="math/tex; mode=display">A=\begin{vmatrix}3 & 2 \\\\0 & 2 \\\\\end{vmatrix}</script><script type="math/tex; mode=display">=\frac{3*2}{1*1}=6</script><p>实际上是i =【3,0】与j =【2,2】向量为边形成的平行四边形面积相对于原始正方形面积的比值。我们发现，在有些时候行列式的值为负。那这是什么原因呢？这主要是空间翻转引起的。在原始状态下，两组基为i = 【1,0】，j=【0,1】，将 i 拉升3倍变成【3,0】 将 j 变成【2，2】不存在空间的翻转，若反之将 i 变成【2,2】将 j 变成【3,0】则出现空间翻转（考虑从原始基到当下基的变化过程，如同纸片的翻转），则行列式值取负。</p><p>例：用一句话说明$det(M1M2)=det(M1)det(M2)$成立。</p><p>答: 对原始1*1的正方形做两次面积缩放倍率结果必然是相同的。</p><p><strong>注：</strong>以上为了简化问题，讨论的都是二维的情况，实际对n维都是成立的。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 数理基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1021题（最大树根）</title>
      <link href="2021/02/24/pat/er-cha-shu-ti/pat-jia-ji-1021/"/>
      <url>2021/02/24/pat/er-cha-shu-ti/pat-jia-ji-1021/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1021.JPG" alt="1021"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>二叉树类，并查集，深度优先遍历，难度易。</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">10010</span><span class="token punctuation">,</span>M<span class="token operator">=</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>ne<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">!=</span>p<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>  p<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">,</span>ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> father<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> deepth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">~</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>father<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            deepth <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>deepth<span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> deepth<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    m<span class="token operator">=</span>n<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>        p<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> S<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        S<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> max_depth<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> nodes<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> deep<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>deep<span class="token operator">&gt;</span>max_depth<span class="token punctuation">)</span><span class="token punctuation">{</span>                nodes<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                max_depth<span class="token operator">=</span>deep<span class="token punctuation">;</span>                nodes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>deep <span class="token operator">==</span> max_depth<span class="token punctuation">)</span>                nodes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token operator">:</span>nodes<span class="token punctuation">)</span>   cout<span class="token operator">&lt;&lt;</span>v<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: %d components\n"</span><span class="token punctuation">,</span>S<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805482919673856">https://pintia.cn/problem-sets/994805342720868352/problems/994805482919673856</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1043题（判断二叉搜索树）</title>
      <link href="2021/02/24/pat/er-cha-shu-ti/pat-jia-ji-1043/"/>
      <url>2021/02/24/pat/er-cha-shu-ti/pat-jia-ji-1043/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1043.JPG" alt="1043"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>二叉树类，二叉树遍历，难度中</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> preorder<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>postorder<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>inorder<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token punctuation">;</span>bool <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> il<span class="token punctuation">,</span><span class="token keyword">int</span> ir<span class="token punctuation">,</span><span class="token keyword">int</span> pl<span class="token punctuation">,</span> <span class="token keyword">int</span> pr<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>il<span class="token operator">&gt;</span>ir<span class="token punctuation">)</span>   <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">int</span> root <span class="token operator">=</span> preorder<span class="token punctuation">[</span>pl<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>il<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>ir<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>root<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span>ir<span class="token punctuation">)</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>ir<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span>il<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>root<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>il<span class="token punctuation">)</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    bool res<span class="token operator">=</span>true<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">build</span><span class="token punctuation">(</span>il<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>pl<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pl<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>il<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> res<span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">build</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>ir<span class="token punctuation">,</span>pl<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>il<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pr<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>  res<span class="token operator">=</span>false<span class="token punctuation">;</span>    postorder<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>root<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>preorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>preorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span>inorder<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>postorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>postorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span>inorder<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> postorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> postorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805440976633856">https://pintia.cn/problem-sets/994805342720868352/problems/994805440976633856</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1136题（延迟回文数）</title>
      <link href="2021/02/24/pat/gao-jing-du-ti/pat-jia-ji-1136/"/>
      <url>2021/02/24/pat/gao-jing-du-ti/pat-jia-ji-1136/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1136.JPG" alt="1136"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>高精度题，string字符串处理，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">,</span>k<span class="token punctuation">,</span>sum<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>    k<span class="token operator">=</span>s<span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">!=</span>s <span class="token operator">&amp;&amp;</span> cnt<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span><span class="token string">" + "</span><span class="token operator">&lt;&lt;</span>k<span class="token operator">&lt;&lt;</span><span class="token string">" = "</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        sum<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum <span class="token operator">=</span> sum<span class="token operator">+</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">(</span>flag <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">=</span>flag <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    sum<span class="token operator">=</span>sum<span class="token operator">+</span><span class="token function">to_string</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sum<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>        s<span class="token operator">=</span>k<span class="token operator">=</span>sum<span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">&gt;=</span><span class="token number">10</span>   <span class="token operator">&amp;&amp;</span> k<span class="token operator">!=</span>s<span class="token punctuation">)</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"Not found in 10 iterations."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>    cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span><span class="token string">" is a palindromic number."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805345732378624">https://pintia.cn/problem-sets/994805342720868352/problems/994805345732378624</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1004题（数叶子节点）</title>
      <link href="2021/02/23/pat/er-cha-shu-ti/pat-jia-ji-1004/"/>
      <url>2021/02/23/pat/er-cha-shu-ti/pat-jia-ji-1004/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1004.JPG" alt="1004"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>二叉树类，邻接表存储，深度搜索，难度中</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">110</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>max_depth<span class="token punctuation">,</span>cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">,</span>ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        max_depth<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>max_depth<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">~</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> now<span class="token punctuation">,</span>sum<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>now<span class="token operator">&gt;&gt;</span>sum<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>sum<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> cn<span class="token punctuation">;</span>            cin<span class="token operator">&gt;&gt;</span>cn<span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span>cn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>cnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>max_depth<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805521431773184">https://pintia.cn/problem-sets/994805342720868352/problems/994805521431773184</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1010题（进制）</title>
      <link href="2021/02/23/pat/jin-zhi-ti/pat-jia-ji-1010/"/>
      <url>2021/02/23/pat/jin-zhi-ti/pat-jia-ji-1010/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1010.JPG" alt="1010"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>进制题，long long数据类型，进制转换，特判，二分查找，难度难。</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token operator">-</span><span class="token string">'a'</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span>LL <span class="token function">calc</span><span class="token punctuation">(</span>string n<span class="token punctuation">,</span> LL r<span class="token punctuation">)</span><span class="token punctuation">{</span>    LL sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> c<span class="token operator">:</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>sum <span class="token operator">*</span> r <span class="token operator">+</span> <span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1e16</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1e18</span><span class="token punctuation">;</span>        sum<span class="token operator">=</span>sum<span class="token operator">*</span>r<span class="token operator">+</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string n1<span class="token punctuation">,</span>n2<span class="token punctuation">;</span>    <span class="token keyword">int</span> tag<span class="token punctuation">,</span>radix<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n1<span class="token operator">&gt;&gt;</span>n2<span class="token operator">&gt;&gt;</span>tag<span class="token operator">&gt;&gt;</span>radix<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tag<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token function">swap</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span>    LL target<span class="token operator">=</span><span class="token function">calc</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>radix<span class="token punctuation">)</span><span class="token punctuation">;</span>    LL l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>target<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> s<span class="token operator">:</span>n2<span class="token punctuation">)</span><span class="token punctuation">{</span>        l<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token punctuation">(</span>LL<span class="token punctuation">)</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        LL mid<span class="token operator">=</span> l<span class="token operator">+</span>r<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token operator">&gt;=</span>target<span class="token punctuation">)</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token keyword">else</span>    l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token operator">!=</span>target<span class="token punctuation">)</span>   <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    cout<span class="token operator">&lt;&lt;</span>r<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805507225665536">https://pintia.cn/problem-sets/994805342720868352/problems/994805507225665536</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进制题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1016题（电话账单）</title>
      <link href="2021/02/23/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1016/"/>
      <url>2021/02/23/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1016/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1016.JPG" alt="1016"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>字符串处理类，vector容器与结构体，字符串格式化转换函数，map容器，，难度难</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    string name<span class="token punctuation">;</span>    string state<span class="token punctuation">;</span>    string format_time<span class="token punctuation">;</span>    <span class="token keyword">int</span> month<span class="token punctuation">;</span>    <span class="token keyword">int</span> time<span class="token punctuation">;</span>    bool operator<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> t<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> time<span class="token operator">&lt;</span>t<span class="token punctuation">.</span>time<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">1440</span><span class="token operator">*</span><span class="token number">31</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> fee<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> cost<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"D:\\PAT\\Clion\\in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">24</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   cin<span class="token operator">&gt;&gt;</span>fee<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>cost<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>fee<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">1440</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">100.0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>N<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>formaltime<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> month<span class="token punctuation">,</span>day<span class="token punctuation">,</span>hour<span class="token punctuation">,</span>minute<span class="token punctuation">,</span>all_time<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %d:%d:%d:%d %s"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>month<span class="token punctuation">,</span><span class="token operator">&amp;</span>day<span class="token punctuation">,</span><span class="token operator">&amp;</span>hour<span class="token punctuation">,</span><span class="token operator">&amp;</span>minute<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>formaltime<span class="token punctuation">,</span><span class="token string">"%02d:%02d:%02d"</span><span class="token punctuation">,</span>day<span class="token punctuation">,</span>hour<span class="token punctuation">,</span>minute<span class="token punctuation">)</span><span class="token punctuation">;</span>        all_time<span class="token operator">=</span><span class="token punctuation">(</span>day<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1440</span><span class="token operator">+</span>hour<span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span>minute<span class="token punctuation">;</span>        m<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>formaltime<span class="token punctuation">,</span>month<span class="token punctuation">,</span>all_time<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> p<span class="token operator">:</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>p<span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>second<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"on-line"</span><span class="token operator">&amp;&amp;</span>p<span class="token punctuation">.</span>second<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"off-line"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>total<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %02d\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span>first<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span>second<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>                    total<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>second<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>format_time<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>second<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>format_time<span class="token punctuation">;</span>                <span class="token keyword">double</span> out<span class="token operator">=</span>cost<span class="token punctuation">[</span>p<span class="token punctuation">.</span>second<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>time<span class="token punctuation">]</span><span class="token operator">-</span>cost<span class="token punctuation">[</span>p<span class="token punctuation">.</span>second<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>time<span class="token punctuation">]</span><span class="token punctuation">;</span>                sum<span class="token operator">+=</span>out<span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d $%.2lf\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span>second<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>time<span class="token operator">-</span>p<span class="token punctuation">.</span>second<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>time<span class="token punctuation">,</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Total amount: $%.2f\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805493648703488">https://pintia.cn/problem-sets/994805342720868352/problems/994805493648703488</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1024题（回文数）</title>
      <link href="2021/02/23/pat/gao-jing-du-ti/pat-jia-ji-1024/"/>
      <url>2021/02/23/pat/gao-jing-du-ti/pat-jia-ji-1024/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1024.JPG" alt="1024"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>高精度题，string字符串处理，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span>string <span class="token function">add</span><span class="token punctuation">(</span>string a<span class="token punctuation">)</span><span class="token punctuation">{</span>    string b<span class="token operator">=</span>a<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        c<span class="token operator">+=</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    c<span class="token operator">+=</span><span class="token function">to_string</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">int</span> step<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>s<span class="token operator">&gt;&gt;</span>step<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>step<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string p<span class="token operator">=</span>s<span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>step<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            s<span class="token operator">=</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805476473028608">https://pintia.cn/problem-sets/994805342720868352/problems/994805476473028608</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1023题（趣味数字）</title>
      <link href="2021/02/23/pat/gao-jing-du-ti/pat-jia-ji-1023/"/>
      <url>2021/02/23/pat/gao-jing-du-ti/pat-jia-ji-1023/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1023.JPG" alt="1023"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>高精度题，string字符串处理，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> in<span class="token punctuation">,</span>re<span class="token punctuation">;</span>    string s<span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        o<span class="token operator">+=</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">(</span>flag<span class="token operator">+</span><span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag<span class="token operator">=</span><span class="token punctuation">(</span>flag<span class="token operator">+</span><span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>        in<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        re<span class="token punctuation">[</span>o<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        o<span class="token operator">+=</span><span class="token function">to_string</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        re<span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">]</span><span class="token operator">==</span>re<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    flag<span class="token operator">?</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"No"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>o<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805478658260992">https://pintia.cn/problem-sets/994805342720868352/problems/994805478658260992</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1071题（说话方式）</title>
      <link href="2021/02/21/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1071/"/>
      <url>2021/02/21/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1071/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1071.JPG" alt="1071"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>字符串处理类，字符串判断，特殊情况，难度中</p><p><strong>注：本题的输入不一定是个句子，句子最后一个字符可能不是句号或者其他非文字字符。</strong></p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"D:\\PAT\\Clion\\in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string s<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> m<span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">transform</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">::</span>tolower<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isalnum</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            m<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>            t<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>            t<span class="token operator">=</span>t<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isalnum</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            m<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    string out<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> item<span class="token operator">:</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>first<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>second<span class="token operator">&gt;</span>M <span class="token operator">||</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>second<span class="token operator">==</span>M <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>first<span class="token operator">&lt;</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            M<span class="token operator">=</span>item<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            out<span class="token operator">=</span>item<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>out<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>M<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805398257647616">https://pintia.cn/problem-sets/994805342720868352/problems/994805398257647616</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1006题（打卡）</title>
      <link href="2021/02/21/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1006/"/>
      <url>2021/02/21/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1006/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1006.JPG" alt="1006"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>字符串处理类，string转int，map容器存储，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><p><strong>string本身存在比较函数，可以直接用string来做比较而不需要转换成int。</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"D:\\PAT\\Clion\\in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    string in<span class="token operator">=</span><span class="token string">"24:00:00"</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token string">"00:00:00"</span><span class="token punctuation">,</span>iid<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>oid<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>string<span class="token operator">&gt;</span> I<span class="token punctuation">,</span>O<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>N<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string id<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>id<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>        I<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        O<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token punctuation">,</span>b<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> s<span class="token operator">:</span>I<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token function">stod</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">stod</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token function">stod</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">stod</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> third <span class="token operator">=</span> <span class="token function">stod</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">stod</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>first<span class="token operator">&gt;</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>first<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> second<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>first<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> second<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> third<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            in<span class="token operator">=</span>s<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            iid<span class="token operator">=</span>s<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> s<span class="token operator">:</span>O<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token function">stod</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">stod</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token function">stod</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">stod</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> third <span class="token operator">=</span> <span class="token function">stod</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">stod</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>first<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>first<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> second<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>first<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> second<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> third<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            out<span class="token operator">=</span>s<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            oid<span class="token operator">=</span>s<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>iid<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>oid<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805516654460928">https://pintia.cn/problem-sets/994805342720868352/problems/994805516654460928</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1035题（密码）</title>
      <link href="2021/02/21/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1035/"/>
      <url>2021/02/21/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1035/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1035.JPG" alt="1035"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>字符串处理类，string的遍历，string个别位置替换，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"D:\\PAT\\Clion\\in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>N<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> va<span class="token punctuation">,</span>vb<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>                b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'@'</span><span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>                b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'%'</span><span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'l'</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>                b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'L'</span><span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'O'</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>                b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            va<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            vb<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>sum<span class="token punctuation">)</span> N<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"There is 1 account and no account is modified"</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"There are "</span><span class="token operator">&lt;&lt;</span>N<span class="token operator">&lt;&lt;</span><span class="token string">" accounts and no account is modified"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>va<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>va<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>vb<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805454989803520">https://pintia.cn/problem-sets/994805342720868352/problems/994805454989803520</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1036题（男孩女孩）</title>
      <link href="2021/02/21/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1036/"/>
      <url>2021/02/21/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1036/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1036.JPG" alt="1036"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>字符串处理类，string相等判断，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"D:\\PAT\\Clion\\in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>N<span class="token punctuation">;</span>    string fn<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">,</span>mn<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">,</span>fc<span class="token punctuation">,</span>mc<span class="token punctuation">;</span>    <span class="token keyword">int</span> fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ms<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        <span class="token keyword">int</span> d<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token operator">&gt;&gt;</span>c<span class="token operator">&gt;&gt;</span>d<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token string">"M"</span> <span class="token operator">&amp;&amp;</span> d<span class="token operator">&lt;</span>ms<span class="token punctuation">)</span><span class="token punctuation">{</span>            ms<span class="token operator">=</span>d<span class="token punctuation">;</span>            mc<span class="token operator">=</span>c<span class="token punctuation">;</span>            mn<span class="token operator">=</span>a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token string">"F"</span> <span class="token operator">&amp;&amp;</span> d<span class="token operator">&gt;</span>fs<span class="token punctuation">)</span><span class="token punctuation">{</span>            fs<span class="token operator">=</span>d<span class="token punctuation">;</span>            fc<span class="token operator">=</span>c<span class="token punctuation">;</span>            fn<span class="token operator">=</span>a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fn<span class="token operator">==</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Absent"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>fn<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>fc<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mn<span class="token operator">==</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Absent"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>mn<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>mc<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    flag<span class="token operator">?</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"NA"</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span>fs<span class="token operator">-</span>ms<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805453203030016">https://pintia.cn/problem-sets/994805342720868352/problems/994805453203030016</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1050题（去重子串）</title>
      <link href="2021/02/20/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1050/"/>
      <url>2021/02/20/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1050/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1050.JPG" alt="1050"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>字符串处理类，字符串字符统计count函数，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// freopen("D:\\PAT\\Clion\\in.txt","r",stdin);</span>    string x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>x<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        s<span class="token operator">+=</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805429018673152">https://pintia.cn/problem-sets/994805342720868352/problems/994805429018673152</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1061题（福尔摩斯）</title>
      <link href="2021/02/20/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1061/"/>
      <url>2021/02/20/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1061/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1061.JPG" alt="1061"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>字符串处理类，char字符判断，字母与数字判断，范围限度，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span>string Week<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"MON "</span><span class="token punctuation">,</span><span class="token string">"TUE "</span><span class="token punctuation">,</span><span class="token string">"WED "</span><span class="token punctuation">,</span><span class="token string">"THU "</span><span class="token punctuation">,</span><span class="token string">"FRI "</span><span class="token punctuation">,</span><span class="token string">"SAT "</span><span class="token punctuation">,</span><span class="token string">"SUN "</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"D:\\PAT\\Clion\\in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>com1<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">,</span>com2<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> com3<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token operator">&gt;&gt;</span>c<span class="token operator">&gt;&gt;</span>d<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>d<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> com2<span class="token operator">==</span><span class="token string">"0"</span> <span class="token operator">&amp;&amp;</span> com1<span class="token operator">!=</span><span class="token string">"0"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'N'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">isdigit</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            com2<span class="token operator">=</span><span class="token function">tolower</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> com1<span class="token operator">==</span><span class="token string">"0"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'G'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            com1<span class="token operator">=</span><span class="token function">tolower</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>c<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isalpha</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            com3<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>Week<span class="token punctuation">[</span>com1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>com2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"0"</span><span class="token operator">&lt;&lt;</span>com2<span class="token operator">&lt;&lt;</span><span class="token string">":"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout<span class="token operator">&lt;&lt;</span><span class="token number">10</span><span class="token operator">+</span>com2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token operator">&lt;&lt;</span><span class="token string">":"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>com3<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"0"</span><span class="token operator">&lt;&lt;</span>com3<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout<span class="token operator">&lt;&lt;</span>com3<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805411985604608">https://pintia.cn/problem-sets/994805342720868352/problems/994805411985604608</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1031题（U字型）</title>
      <link href="2021/02/20/pat/mo-ni-ti/pat-jia-ji-1031/"/>
      <url>2021/02/20/pat/mo-ni-ti/pat-jia-ji-1031/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1031.JPG" alt="1031"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>模拟现实类，字符串处理，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"D:\\PAT\\Clion\\in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>    <span class="token keyword">int</span> v<span class="token punctuation">,</span>h<span class="token punctuation">,</span>l<span class="token punctuation">;</span>    v<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>    h<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>v<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>h<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>h<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>v<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805462535356416">https://pintia.cn/problem-sets/994805342720868352/problems/994805462535356416</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1054题（最大面积）</title>
      <link href="2021/02/20/pat/mo-ni-ti/pat-jia-ji-1054/"/>
      <url>2021/02/20/pat/mo-ni-ti/pat-jia-ji-1054/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1054.JPG" alt="1054"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>模拟现实类，统计数目最大，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"D:\\PAT\\Clion\\in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> m<span class="token punctuation">;</span>    string s<span class="token punctuation">,</span>index<span class="token punctuation">;</span>    <span class="token keyword">int</span> M<span class="token punctuation">,</span>N<span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>M<span class="token operator">&gt;&gt;</span>N<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>            m<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> iter<span class="token operator">:</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span>second<span class="token operator">&gt;</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>            max<span class="token operator">=</span>iter<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            index<span class="token operator">=</span>iter<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>index<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805422639136768">https://pintia.cn/problem-sets/994805342720868352/problems/994805422639136768</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1134题（顶点覆盖）</title>
      <link href="2021/02/19/pat/tu-lun-ti/pat-jia-ji-1134/"/>
      <url>2021/02/19/pat/tu-lun-ti/pat-jia-ji-1134/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1134.JPG" alt="1134"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>图论题，Vector容器使用方法，顶点与边考虑角度变换，难度中</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> nv<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> num<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">hash</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nv<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span>                hash<span class="token punctuation">[</span>v<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//// ******************** 超时版 从节点角度考虑 *****************************</span><span class="token comment">//#include &lt;bits/stdc++.h&gt;</span><span class="token comment">//using namespace std;</span><span class="token comment">//</span><span class="token comment">//int main(){</span><span class="token comment">//</span><span class="token comment">//    freopen("D:\\PAT\\Clion\\in.txt","r",stdin);</span><span class="token comment">//    int N,M,a,b;</span><span class="token comment">//    cin&gt;&gt;N&gt;&gt;M;</span><span class="token comment">//    vector&lt;int&gt; v[N];</span><span class="token comment">//    for(int i=0;i&lt;M;i++){</span><span class="token comment">//        cin&gt;&gt;a&gt;&gt;b;</span><span class="token comment">//        v[a].push_back(b);</span><span class="token comment">//        v[b].push_back(a);</span><span class="token comment">//    }</span><span class="token comment">//    int K;</span><span class="token comment">//    cin&gt;&gt;K;</span><span class="token comment">//    for(int i=0;i&lt;K;i++){</span><span class="token comment">//        int x,input,flag=0;</span><span class="token comment">//        cin&gt;&gt;x;</span><span class="token comment">//        vector&lt;int&gt; result(N),loss;</span><span class="token comment">//        for(int j=0;j&lt;x;j++){</span><span class="token comment">//            scanf("%d",&amp;input);</span><span class="token comment">//            result[input]=1;</span><span class="token comment">//        }</span><span class="token comment">//        for(int j=0;j&lt;N;j++){</span><span class="token comment">//            if(result[j]==0)</span><span class="token comment">//                loss.push_back(j);</span><span class="token comment">//        }</span><span class="token comment">//        for(int p=0;p&lt;loss.size();p++){</span><span class="token comment">//            for(int q=p+1;q&lt;loss.size();q++){</span><span class="token comment">//                if(count(v[loss[p]].begin(),v[loss[p]].end(),loss[q])!=0){</span><span class="token comment">//                    flag=1;</span><span class="token comment">//                    break;</span><span class="token comment">//                }</span><span class="token comment">//            }</span><span class="token comment">//            if(flag==1)break;</span><span class="token comment">//        }</span><span class="token comment">//        flag?cout&lt;&lt;"No"&lt;&lt;endl:cout&lt;&lt;"Yes"&lt;&lt;endl;</span><span class="token comment">//    }</span><span class="token comment">//    return 0;</span><span class="token comment">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805346428633088">https://pintia.cn/problem-sets/994805342720868352/problems/994805346428633088</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1146题（拓扑排序）</title>
      <link href="2021/02/19/pat/tu-lun-ti/pat-jia-ji-1146/"/>
      <url>2021/02/19/pat/tu-lun-ti/pat-jia-ji-1146/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1146.JPG" alt="1146"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>图论题，Vector容器使用方法，拓扑排序，拷贝，散列存储，难度中</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>graph<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//有向图</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"D:\\PAT\\Clion\\in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> degree<span class="token punctuation">[</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//入度数组</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>M<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>degree<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>    bool space<span class="token operator">=</span>false<span class="token punctuation">;</span>   <span class="token comment">//是否输出空格</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>M<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> A<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">[</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copy</span><span class="token punctuation">(</span>degree<span class="token punctuation">,</span>degree<span class="token operator">+</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//将degree数组复制到temp数组中</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//当前入度不为0，不是拓扑序列</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s%d"</span><span class="token punctuation">,</span>space<span class="token operator">?</span><span class="token string">" "</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出</span>                space<span class="token operator">=</span>true<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span>   <span class="token comment">//入度为0</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">:</span>graph<span class="token punctuation">[</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">//遍历能到达的结点并将入度减1</span>                    <span class="token operator">--</span>temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805343043829760">https://pintia.cn/problem-sets/994805342720868352/problems/994805343043829760</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1147题（堆遍历）</title>
      <link href="2021/02/19/pat/shu-ju-jie-gou/pat-jia-ji-1147/"/>
      <url>2021/02/19/pat/shu-ju-jie-gou/pat-jia-ji-1147/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1147.JPG" alt="1147"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>堆数据结构，Vector容器使用方法，堆判断，层次与后序遍历，难度中</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> M<span class="token punctuation">,</span>N<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">postorder</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">&gt;</span>N <span class="token operator">&amp;&amp;</span> index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&gt;</span>N<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;=</span>N<span class="token punctuation">)</span>  <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ans<span class="token punctuation">)</span><span class="token punctuation">{</span>                cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">postorder</span><span class="token punctuation">(</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postorder</span><span class="token punctuation">(</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ans<span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"D:\\PAT\\Clion\\in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s<span class="token punctuation">,</span>ismin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ismax<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>t<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>ismax<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>ismin<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ismax <span class="token operator">&amp;&amp;</span> ismin<span class="token punctuation">)</span>   cout<span class="token operator">&lt;&lt;</span><span class="token string">"Not Heap"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ismin<span class="token punctuation">)</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"Min Heap"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ismax<span class="token punctuation">)</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"Max Heap"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">postorder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805342821531648">https://pintia.cn/problem-sets/994805342720868352/problems/994805342821531648</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1049题（寻找1）</title>
      <link href="2021/02/19/pat/shu-lun-ti/pat-jia-ji-1049/"/>
      <url>2021/02/19/pat/shu-lun-ti/pat-jia-ji-1049/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1049.JPG" alt="1049"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>数论类，数学基础，难度难。</p><p><strong>分析：这是一道数学问题。从第一位（个位）到最高位，设now为当前位的数字，left为now左边的所有数字构成的数字，right是now右边的所有数字构成的数字。只需要一次次累加对于当前位now来说可能出现1的个数，然后把它们累加即可。a表示当前的个位为1，十位为10，百位为100类推</strong><br><strong>对于now，有三种情况：</strong><br><strong>1.now == 0 : 那么 ans += left * a; //因为now==0说明now位只有在left从0-left-1的时候会产生1，所以会产生left次，但是又因为右边会重复从0-999…出现a次</strong><br><strong>2.now == 1 : ans += left * a + right + 1;//now = 1的时候就要比上一步多加一个当now为1的时候右边出现0~right个数导致的now为1的次数</strong><br><strong>3.now &gt;= 2 : ans += (left + 1) * a;//now大于等于2就左边0-left的时候会在now位置产生1，所以会产生left次，但是又因为右边会重复从0-999…出现a次</strong></p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> now <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">/</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        left <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now <span class="token operator">=</span> n <span class="token operator">/</span> a <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">%</span> a<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> left <span class="token operator">*</span> a<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> left <span class="token operator">*</span> a <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> ans <span class="token operator">+=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> a<span class="token punctuation">;</span>        a <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805430595731456">https://pintia.cn/problem-sets/994805342720868352/problems/994805430595731456</a></p><h2 id="5-推导"><a href="#5-推导" class="headerlink" title="5.推导"></a>5.推导</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1049tuidao.jpg" alt="1049推导"></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1141题（机构排序）</title>
      <link href="2021/02/19/pat/pai-xu-ti/pat-jia-ji-1141/"/>
      <url>2021/02/19/pat/pai-xu-ti/pat-jia-ji-1141/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1141.JPG" alt="1141"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>排序题，结构体向量的运用，排序自定义函数，无序映射，难度中</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>    string school<span class="token punctuation">;</span>    <span class="token keyword">int</span> tws<span class="token punctuation">,</span> ns<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span> node b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>tws <span class="token operator">!=</span> b<span class="token punctuation">.</span>tws<span class="token punctuation">)</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>tws <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>tws<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>ns <span class="token operator">!=</span> b<span class="token punctuation">.</span>ns<span class="token punctuation">)</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>ns <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>ns<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>school <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>school<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> cnt<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">&gt;</span> sum<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        string id<span class="token punctuation">,</span> school<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> id<span class="token punctuation">;</span>        <span class="token keyword">double</span> score<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> school<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> school<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            school<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">tolower</span><span class="token punctuation">(</span>school<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">)</span>            score <span class="token operator">=</span> score <span class="token operator">/</span> <span class="token number">1.5</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'T'</span><span class="token punctuation">)</span>            score <span class="token operator">=</span> score <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">;</span>        sum<span class="token punctuation">[</span>school<span class="token punctuation">]</span> <span class="token operator">+=</span> score<span class="token punctuation">;</span>        cnt<span class="token punctuation">[</span>school<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> ans<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> cnt<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> cnt<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>        ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token punctuation">{</span>it<span class="token operator">-&gt;</span>first<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>sum<span class="token punctuation">[</span>it<span class="token operator">-&gt;</span>first<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>it<span class="token operator">-&gt;</span>first<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rank <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pres <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pres <span class="token operator">!=</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tws<span class="token punctuation">)</span> rank <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        pres <span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tws<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> rank<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>school<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d %d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tws<span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ns<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805344222429184">https://pintia.cn/problem-sets/994805342720868352/problems/994805344222429184</a></p><h2 id="5-注意"><a href="#5-注意" class="headerlink" title="5.注意"></a>5.注意</h2><ul><li>map容器无法进行排序，只有vector容器才可以配合sort函数进行排序，同时可以构造结构体来代替多个键的问题。</li><li>总加权分数取整数部分是要对最后的总和取整数部分，不能每次都直接用int存储，不然会有一个3分测试点不通过，<br>，直接使用map，导致在新的PAT系统中提交后最后一个测试点超时，改成了unordered_map即可AC。</li></ul>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日英语</title>
      <link href="2021/02/19/mei-ri-ying-yu/"/>
      <url>2021/02/19/mei-ri-ying-yu/</url>
      
        <content type="html"><![CDATA[<h2 id="2020-01-31"><a href="#2020-01-31" class="headerlink" title="2020.01.31"></a>2020.01.31</h2><div class="table-container"><table><thead><tr><th style="text-align:center">Words</th><th style="text-align:center">Meanings</th><th style="text-align:center">characters</th><th style="text-align:center">sentence</th></tr></thead><tbody><tr><td style="text-align:center">bloc</td><td style="text-align:center">集团</td><td style="text-align:center">n</td><td style="text-align:center">The five countries formed a reginal trade bloc.</td></tr><tr><td style="text-align:center">microphone</td><td style="text-align:center">麦克风</td><td style="text-align:center">n</td><td style="text-align:center">Please speak into the microphone during the interview.</td></tr><tr><td style="text-align:center">aisle</td><td style="text-align:center">走道</td><td style="text-align:center">n</td><td style="text-align:center">He prefers an aisle seat on the train since it’s faster to get off.</td></tr><tr><td style="text-align:center">cotton</td><td style="text-align:center">棉花</td><td style="text-align:center">n</td><td style="text-align:center">bales of cotton</td></tr><tr><td style="text-align:center">hook</td><td style="text-align:center">钩子</td><td style="text-align:center">n</td><td style="text-align:center">Hang your towel on the hook.</td></tr></tbody></table></div><h2 id="2020-02-01"><a href="#2020-02-01" class="headerlink" title="2020.02.01"></a>2020.02.01</h2><div class="table-container"><table><thead><tr><th style="text-align:center">Words</th><th style="text-align:center">Meanings</th><th style="text-align:center">character</th><th style="text-align:center">sentence</th></tr></thead><tbody><tr><td style="text-align:center">patronage</td><td style="text-align:center">赞助，资助</td><td style="text-align:center">n</td><td style="text-align:center">Many small and micro businesses have engjoyed the patronage of their local governments.</td></tr><tr><td style="text-align:center">insanity</td><td style="text-align:center">精神错乱，疯狂</td><td style="text-align:center">n</td><td style="text-align:center">It would be insanity to dump radioactive waste in the sea.</td></tr><tr><td style="text-align:center">melody</td><td style="text-align:center">旋律，曲子，曲调</td><td style="text-align:center">n</td><td style="text-align:center">The pianist played a famous melody.</td></tr><tr><td style="text-align:center">bride</td><td style="text-align:center">新娘</td><td style="text-align:center">n</td><td style="text-align:center">In the presence of partents and friends, the birde and groom exchanged their wedding rings.</td></tr></tbody></table></div><h2 id="2020-02-02"><a href="#2020-02-02" class="headerlink" title="2020.02.02"></a>2020.02.02</h2><div class="table-container"><table><thead><tr><th style="text-align:center">Words</th><th style="text-align:center">Meanings</th><th style="text-align:center">character</th><th style="text-align:center">sentence</th></tr></thead><tbody><tr><td style="text-align:center">likewise</td><td style="text-align:center">同样，亦</td><td style="text-align:center">adv</td><td style="text-align:center">Just water these flowers twice a week, and likewise the ones in the living room.</td></tr><tr><td style="text-align:center">permeation</td><td style="text-align:center">渗透</td><td style="text-align:center">n</td><td style="text-align:center">The thin film can not prevent the permeation of harmful liquids.</td></tr><tr><td style="text-align:center">malicious</td><td style="text-align:center">恶毒的</td><td style="text-align:center">adj</td><td style="text-align:center">She was charged with spreading malicious gossip.</td></tr><tr><td style="text-align:center">ambassador</td><td style="text-align:center">大使</td><td style="text-align:center">n</td><td style="text-align:center">We’re dining the ambassador this week.</td></tr><tr><td style="text-align:center">crave</td><td style="text-align:center">渴望</td><td style="text-align:center">v</td><td style="text-align:center">These orphans desperately crave attention from others.</td></tr></tbody></table></div><h2 id="2020-02-04"><a href="#2020-02-04" class="headerlink" title="2020.02.04"></a>2020.02.04</h2><div class="table-container"><table><thead><tr><th style="text-align:center">Words</th><th style="text-align:center">Meanings</th><th style="text-align:center">character</th><th style="text-align:center">sentence</th></tr></thead><tbody><tr><td style="text-align:center">sincerity</td><td style="text-align:center">诚实</td><td style="text-align:center">n</td><td style="text-align:center">Their sincerity has never been questioned.</td></tr><tr><td style="text-align:center">reproach</td><td style="text-align:center">责备</td><td style="text-align:center">n/v</td><td style="text-align:center">The look of reproach on his mother’s face made Tom feel guilty.</td></tr><tr><td style="text-align:center">militia</td><td style="text-align:center">民兵组织</td><td style="text-align:center">n</td><td style="text-align:center">He joined the local militia as soon as he was eighteen.</td></tr></tbody></table></div><h2 id="2020-02-05"><a href="#2020-02-05" class="headerlink" title="2020.02.05"></a>2020.02.05</h2><div class="table-container"><table><thead><tr><th style="text-align:center">Words</th><th style="text-align:center">Meanings</th><th style="text-align:center">character</th><th style="text-align:center">sentence</th></tr></thead><tbody><tr><td style="text-align:center">sparingly</td><td style="text-align:center">节俭的</td><td style="text-align:center">adv</td><td style="text-align:center">This paint is very expensive, so please use it sparingly.</td></tr><tr><td style="text-align:center">desolate</td><td style="text-align:center">无人居住的</td><td style="text-align:center">adj</td><td style="text-align:center">He woke up to find himself lying on a bleak and desolate island.</td></tr><tr><td style="text-align:center">culmination</td><td style="text-align:center">巅峰</td><td style="text-align:center">n</td><td style="text-align:center">Winning the Nobel prize was the culmination to his writing career.</td></tr><tr><td style="text-align:center">customs</td><td style="text-align:center">海关</td><td style="text-align:center">n</td><td style="text-align:center">The Customs have seized large quantities of smuggled heroin.</td></tr><tr><td style="text-align:center">paradoxical</td><td style="text-align:center">悖论的</td><td style="text-align:center">adj</td><td style="text-align:center">The article is not only illogical, but also full of paradoxical statements.</td></tr></tbody></table></div><h2 id="2020-02-06"><a href="#2020-02-06" class="headerlink" title="2020.02.06"></a>2020.02.06</h2><div class="table-container"><table><thead><tr><th style="text-align:center">Words</th><th style="text-align:center">Meanings</th><th style="text-align:center">character</th><th style="text-align:center">sentence</th></tr></thead><tbody><tr><td style="text-align:center">biographer</td><td style="text-align:center">传记作家</td><td style="text-align:center">n</td><td style="text-align:center">His uncle used to be an important biographer of contemporary artists.</td></tr><tr><td style="text-align:center">greasy</td><td style="text-align:center">多油的</td><td style="text-align:center">adj</td><td style="text-align:center">Her greasy hair left a bad impression on me.</td></tr><tr><td style="text-align:center">henceforth</td><td style="text-align:center">从今往后</td><td style="text-align:center">adv</td><td style="text-align:center">The man said that he would work hard henceforth.</td></tr><tr><td style="text-align:center">blaze</td><td style="text-align:center">燃烧</td><td style="text-align:center">v/n</td><td style="text-align:center">He blazed up without warning.</td></tr><tr><td style="text-align:center">mechanization</td><td style="text-align:center">机械化</td><td style="text-align:center">n</td><td style="text-align:center">The future of agriculture lies in mechanization.</td></tr></tbody></table></div><h2 id="2020-02-07"><a href="#2020-02-07" class="headerlink" title="2020.02.07"></a>2020.02.07</h2><div class="table-container"><table><thead><tr><th style="text-align:center">Words</th><th style="text-align:center">Meanings</th><th style="text-align:center">character</th><th style="text-align:center">sentence</th></tr></thead><tbody><tr><td style="text-align:center">disputable</td><td style="text-align:center">可质疑的</td><td style="text-align:center">adj</td><td style="text-align:center">The suspect claimed that he wasn’t there at the time of the crime, but the police thought that’s disputable.</td></tr><tr><td style="text-align:center">wholesome</td><td style="text-align:center">有益健康的</td><td style="text-align:center">adj</td><td style="text-align:center">This has had a wholesome effect on babies.</td></tr><tr><td style="text-align:center">civilize</td><td style="text-align:center">教化</td><td style="text-align:center">v</td><td style="text-align:center">Many barbarian were civilized under the influence of the Roman Empire.</td></tr><tr><td style="text-align:center">heroine</td><td style="text-align:center">女英雄</td><td style="text-align:center">n</td><td style="text-align:center">She defended her country with her life and was respected as a war heroine.</td></tr><tr><td style="text-align:center">radical</td><td style="text-align:center">激进的</td><td style="text-align:center">adj</td><td style="text-align:center">This thesis led to a radical reshaping of their policies.</td></tr></tbody></table></div><h2 id="2020-02-09"><a href="#2020-02-09" class="headerlink" title="2020.02.09"></a>2020.02.09</h2><div class="table-container"><table><thead><tr><th style="text-align:center">Words</th><th style="text-align:center">Meanings</th><th style="text-align:center">character</th><th style="text-align:center">sentence</th></tr></thead><tbody><tr><td style="text-align:center">subordination</td><td style="text-align:center">从属</td><td style="text-align:center">n</td><td style="text-align:center">The low was designed to maintain the subordination of the masses to the emperor.</td></tr></tbody></table></div><h2 id="2020-02-15"><a href="#2020-02-15" class="headerlink" title="2020.02.15"></a>2020.02.15</h2><div class="table-container"><table><thead><tr><th style="text-align:center">Words</th><th style="text-align:center">Meanings</th><th style="text-align:center">character</th><th style="text-align:center">sentence</th></tr></thead><tbody><tr><td style="text-align:center">scout</td><td style="text-align:center">侦察</td><td style="text-align:center">v</td><td style="text-align:center">He scouted around to see what he could find.</td></tr><tr><td style="text-align:center">peculiar</td><td style="text-align:center">奇怪的</td><td style="text-align:center">adj</td><td style="text-align:center">We are often surprised by her peculiar ideas.</td></tr><tr><td style="text-align:center">identity</td><td style="text-align:center">身份</td><td style="text-align:center">n</td><td style="text-align:center">The police are trying to discover the identity of the killer.</td></tr><tr><td style="text-align:center">scorn</td><td style="text-align:center">轻蔑</td><td style="text-align:center">v/n</td><td style="text-align:center">Other team members poured scorn on my suggestions which they thought unrealistic.</td></tr></tbody></table></div><h2 id="2020-02-17"><a href="#2020-02-17" class="headerlink" title="2020.02.17"></a>2020.02.17</h2><div class="table-container"><table><thead><tr><th style="text-align:center">Words</th><th style="text-align:center">Meanings</th><th style="text-align:center">character</th><th style="text-align:center">sentence</th></tr></thead><tbody><tr><td style="text-align:center">gaol</td><td style="text-align:center">监狱</td><td style="text-align:center">n</td><td style="text-align:center">The murderer has spent twenty years in gaol.</td></tr><tr><td style="text-align:center">satirical</td><td style="text-align:center">嘲讽的</td><td style="text-align:center">adj</td><td style="text-align:center">The movie is a satirical comedy.</td></tr></tbody></table></div><h2 id="2020-02-19"><a href="#2020-02-19" class="headerlink" title="2020.02.19"></a>2020.02.19</h2><div class="table-container"><table><thead><tr><th style="text-align:center">Words</th><th style="text-align:center">Meanings</th><th style="text-align:center">character</th><th style="text-align:center">sentence</th></tr></thead><tbody><tr><td style="text-align:center">tyre</td><td style="text-align:center">轮胎</td><td style="text-align:center">n</td><td style="text-align:center">He got a flat tyre after driving over the broken glass.</td></tr><tr><td style="text-align:center">alternation</td><td style="text-align:center">交替</td><td style="text-align:center">n</td><td style="text-align:center">We have an alternation system of duty.</td></tr><tr><td style="text-align:center">cabinet</td><td style="text-align:center">橱柜，内阁</td><td style="text-align:center">n</td><td style="text-align:center">The cabinet minister votes for a proposal of environmental protection.</td></tr><tr><td style="text-align:center">flour</td><td style="text-align:center">面粉</td><td style="text-align:center">n</td><td style="text-align:center">Mix the wheat flour and water to form a paste.</td></tr><tr><td style="text-align:center">speculation</td><td style="text-align:center">猜测</td><td style="text-align:center">n</td><td style="text-align:center">Rumours that they are about to divorce have been dismissed as pure spectulation.</td></tr><tr><td style="text-align:center">feminine</td><td style="text-align:center">女性的/娇柔的</td><td style="text-align:center">adj</td><td style="text-align:center">That dress makes you look very feminine.</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1145题（哈希查找）</title>
      <link href="2021/02/18/pat/san-lie-ti/pat-jia-ji-1145/"/>
      <url>2021/02/18/pat/san-lie-ti/pat-jia-ji-1145/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1145.JPG" alt="1145"></p><p><strong>Quadratic probing：二次探针</strong></p><p><strong>collisions：冲突</strong></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>散列类，Vector容器，二次探针，哈希表存储，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>using namespace std<span class="token punctuation">;</span>bool <span class="token function">isprime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tsize<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tsize<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isprime</span><span class="token punctuation">(</span>tsize<span class="token punctuation">)</span><span class="token punctuation">)</span> tsize<span class="token operator">++</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span>tsize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> tsize<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> j <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> tsize<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                v<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d cannot be inserted.\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> tsize<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> j <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> tsize<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> a <span class="token operator">||</span> v<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1lf\n"</span><span class="token punctuation">,</span> ans <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805343236767744">https://pintia.cn/problem-sets/994805342720868352/problems/994805343236767744</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散列题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1144题（遗失数）</title>
      <link href="2021/02/17/pat/mo-ni-ti/pat-jia-ji-1144/"/>
      <url>2021/02/17/pat/mo-ni-ti/pat-jia-ji-1144/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1144.JPG" alt="1144"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>模拟现实类，map容器的运用，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>s<span class="token punctuation">,</span>min<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">&lt;</span>min <span class="token operator">&amp;&amp;</span> s<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>   min<span class="token operator">=</span>s<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">&gt;</span>max <span class="token operator">&amp;&amp;</span> s<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>   max<span class="token operator">=</span>s<span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>s<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>min<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>max<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            flag<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    flag<span class="token operator">?</span>cout<span class="token operator">&lt;&lt;</span>flag<span class="token operator">&lt;&lt;</span>endl<span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">++</span>max<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805343463260160">https://pintia.cn/problem-sets/994805342720868352/problems/994805343463260160</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1150题（旅行商）</title>
      <link href="2021/02/15/pat/san-lie-ti/pat-jia-ji-1150/"/>
      <url>2021/02/15/pat/san-lie-ti/pat-jia-ji-1150/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1150.JPG" alt="1150"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>散列类，Vector容器自定义方法，Set容器的运用，难度中</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> e<span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">99999999</span><span class="token punctuation">,</span> ansid<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        sum <span class="token operator">+=</span> e<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Path %d: NA (Not a TS cycle)\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> v<span class="token punctuation">[</span>cnt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Path %d: %d (Not a TS cycle)\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">!=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Path %d: %d (TS cycle)\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> ans<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> sum<span class="token punctuation">;</span>            ansid <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Path %d: %d (TS simple cycle)\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> ans<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> sum<span class="token punctuation">;</span>            ansid <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> t<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">[</span>t1<span class="token punctuation">]</span><span class="token punctuation">[</span>t2<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span>t2<span class="token punctuation">]</span><span class="token punctuation">[</span>t1<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Shortest Dist(%d) = %d\n"</span><span class="token punctuation">,</span> ansid<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1038430013544464384">https://pintia.cn/problem-sets/994805342720868352/problems/1038430013544464384</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散列题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于LaTeX制作学术PPT</title>
      <link href="2021/02/15/ji-yu-latex-zhi-zuo-xue-zhu-ppt/"/>
      <url>2021/02/15/ji-yu-latex-zhi-zuo-xue-zhu-ppt/</url>
      
        <content type="html"><![CDATA[<p>​    LaTeX制作的PPT简洁明了，在各大顶会以及各种分享会上都出现。本文就介绍这些学术会议PPT的简单LaTeX制作方式。</p><h2 id="1-头文件导入部分"><a href="#1-头文件导入部分" class="headerlink" title="1. 头文件导入部分"></a>1. 头文件导入部分</h2><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\documentclass[11pt]{beamer}                                                                                                             \usetheme{Madrid}\usepackage{graphicx}\usepackage{subfigure}\usepackage[english]{babel}\usepackage{times}\usepackage[T1]{fontenc}\usepackage{ctex}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-封面制作部分"><a href="#2-封面制作部分" class="headerlink" title="2. 封面制作部分"></a>2. 封面制作部分</h2><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\begin{document}    \title[Work Summary]{Work Summary}% 主题介绍    \author[Author]{Author} % 作者信息    \institute[ZJUT]{Zhejiang University Of Technology} % 设置学院机构    \date{\today}  % 显示日期        \logo{\includegraphics[width=1.8cm,height=1.8cm]{logo.png}}% 添加学校logo\begin{frame}    \titlepage\end{frame}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-目录部分"><a href="#3-目录部分" class="headerlink" title="3.目录部分"></a>3.目录部分</h2><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\section[Contents]{}% 添加目录内容%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\frame {    \frametitle{\secname}    \tableofcontents}\AtBeginSubsection[] {    \frame&lt;handout:0&gt; {        \frametitle{Contents}        \tableofcontents[current,currentsubsection]    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-正文部分"><a href="#4-正文部分" class="headerlink" title="4.正文部分"></a>4.正文部分</h2><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\section{Section1}\subsection{1.1}\begin{frame}[fragile]    \frametitle{A}\end{frame}\subsection{1.2}\begin{frame}[fragile]    \frametitle{B}\end{frame}\section{Section2}\subsection{2.1}\begin{frame}[fragile]    \frametitle{C}\end{frame}\subsection{2.2}\begin{frame}[fragile]    \frametitle{D}\end{frame}\section{Section3}\subsection{3.1}\begin{frame}[fragile]    \frametitle{E}\end{frame}\subsection{3.2}\begin{frame}[fragile]    \frametitle{F}\end{frame}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-插图部分"><a href="#5-插图部分" class="headerlink" title="5.插图部分"></a>5.插图部分</h2><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\begin{frame}[fragile]    \frametitle{Pearson Correlation}    \begin{figure}[h]%%图        \centering  %插入的图片居中表示        \includegraphics[width=0.9\linewidth]{R1.png}          \caption{Pearson Correlation Heatmap}  %图片的名称    \end{figure}\end{frame}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-举例部分"><a href="#6-举例部分" class="headerlink" title="6.举例部分"></a>6.举例部分</h2><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\subsection{1.2}\begin{frame}[fragile]    \frametitle{B}    \begin{itemize}        \item 1 Hello World        \item 2 Hello World        \item 3 Hello World        \item 4 Hello World    \end{itemize}\end{frame}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-定义部分"><a href="#7-定义部分" class="headerlink" title="7.定义部分"></a>7.定义部分</h2><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\section{Section2}\subsection{2.1}\begin{frame}[fragile]    \frametitle{C}    \begin{block}{定义}        Definition:    \end{block}\end{frame}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-公式部分"><a href="#8-公式部分" class="headerlink" title="8.公式部分"></a>8.公式部分</h2><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\subsection{2.2}\begin{frame}[fragile]    \frametitle{D}        \begin{block}{Scaling}        $$ x^* = \frac{x - x_{min}}{x_{max} - x_{min}} $$    \end{block}\end{frame}%若要公式单独成一行使用 $$    $$%若要公式不单独一行 $   $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-表格部分"><a href="#9-表格部分" class="headerlink" title="9.表格部分"></a>9.表格部分</h2><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\section{Section3}\subsection{3.1}\begin{frame}[fragile]    \frametitle{E}    \begin{table}[]        \begin{tabular}{|c|c|c|}            \hline            index &amp; yD &amp; y2 \\ \hline            x1          &amp;      3.347&amp;    1.330\\ \hline            x2          &amp;      828.885&amp;    172.967\\ \hline            x3 &amp;      0.819&amp;    0.492\\ \hline            x4 &amp;      227.881&amp;    63.610\\ \hline        \end{tabular}        \caption{表格}    \end{table}\end{frame}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-方程组部分"><a href="#10-方程组部分" class="headerlink" title="10.方程组部分"></a>10.方程组部分</h2><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\[ f_{\text{ZINB}(x; \pi, \alpha, \beta, \lambda)}  = \begin{cases} \pi + (1 - \pi)(\frac{\beta}{\beta + \lambda \beta})^{\beta},\quad \ \ &amp; x = 0,\\ (1 - \pi) \frac{\Gamma(x + \beta)}{\Gamma(x + 1) \Gamma(\beta)} (\frac{\beta}{\beta + \lambda \alpha})^{\beta}(\frac{\alpha}{\beta + \lambda \alpha})^{x}, \quad \ \ &amp; x \neq 0, \end{cases} \] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-结束部分"><a href="#11-结束部分" class="headerlink" title="11.结束部分"></a>11.结束部分</h2><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\end{document}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p>[1] <a href="https://www.jianshu.com/p/b41fc167fea5">https://www.jianshu.com/p/b41fc167fea5</a></p><p>[2] <a href="https://www.zhihu.com/question/22446174/answer/130143827">https://www.zhihu.com/question/22446174/answer/130143827</a></p>]]></content>
      
      
      <categories>
          
          <category> LaTeX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科研英语</title>
      <link href="2021/02/14/ke-yan-ying-yu/"/>
      <url>2021/02/14/ke-yan-ying-yu/</url>
      
        <content type="html"><![CDATA[<div class="table-container"><table><thead><tr><th style="text-align:center">word</th><th style="text-align:center">meaning</th><th style="text-align:center">word</th><th style="text-align:center">meaning</th><th style="text-align:center">word</th><th style="text-align:center">meaning</th></tr></thead><tbody><tr><td style="text-align:center">anomaly</td><td style="text-align:center">异常(n.)</td><td style="text-align:center">inhibit</td><td style="text-align:center">抑制(v.)</td><td style="text-align:center">leverage</td><td style="text-align:center">利用(v.)</td></tr><tr><td style="text-align:center">perceptron</td><td style="text-align:center">感知机(n.)</td><td style="text-align:center">neatly</td><td style="text-align:center">整洁地(adv.)</td><td style="text-align:center">marginally</td><td style="text-align:center">略微的(adv.)</td></tr><tr><td style="text-align:center">scenarios</td><td style="text-align:center">情节(n.)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1151题（LCA问题）</title>
      <link href="2021/02/12/pat/er-cha-shu-ti/pat-jia-ji-1151/"/>
      <url>2021/02/12/pat/er-cha-shu-ti/pat-jia-ji-1151/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1151.JPG" alt="1151"></p><p><strong>inorder：中序遍历</strong></p><p><strong>preorder：先序遍历</strong></p><p><strong>distinct：不同的</strong></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>二叉树类，Map容器插入方法，Vector容器的运用，二叉树遍历，难度中</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> in<span class="token punctuation">,</span>pre<span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCA</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> inL<span class="token punctuation">,</span> <span class="token keyword">int</span> inR<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>inL<span class="token operator">&gt;</span>inR<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rtin<span class="token operator">=</span>m<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>vin<span class="token operator">=</span>m<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>uin<span class="token operator">=</span>m<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rtin<span class="token operator">==</span>uin<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is an ancestor of %d.\n"</span><span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>rtin<span class="token operator">==</span>vin<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is an ancestor of %d.\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>vin<span class="token operator">&lt;</span>rtin <span class="token operator">&amp;&amp;</span> uin<span class="token operator">&lt;</span>rtin<span class="token punctuation">)</span> <span class="token function">LCA</span><span class="token punctuation">(</span>root<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>inL<span class="token punctuation">,</span>rtin<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>vin<span class="token operator">&gt;</span>rtin <span class="token operator">&amp;&amp;</span> uin<span class="token operator">&gt;</span>rtin<span class="token punctuation">)</span> <span class="token function">LCA</span><span class="token punctuation">(</span>root<span class="token operator">+</span>rtin<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>inL<span class="token punctuation">,</span>rtin<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>inR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"LCA of %d and %d is %d.\n"</span><span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>pre<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> M<span class="token punctuation">,</span>N<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>M<span class="token operator">&gt;&gt;</span>N<span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    pre<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>u<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">==</span>m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">==</span>m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d and %d are not found.\n"</span><span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">==</span>m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d is not found.\n"</span><span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">==</span>m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d is not found.\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">LCA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1038430130011897856">https://pintia.cn/problem-sets/994805342720868352/problems/1038430130011897856</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1168题（素数日）</title>
      <link href="2021/02/11/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1168/"/>
      <url>2021/02/11/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1168/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1168.jpg" alt=""></p><p>The above picture is from Sina Weibo, showing May 23rd, 2019 as a very cool “Prime Day”. That is, not only that the corresponding number of the date <code>20190523</code> is a prime, but all its sub-strings ended at the last digit <code>3</code> are prime numbers.</p><p>Now your job is to tell if a given date is a Prime Day.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, a date between January 1st, 0001 and December 31st, 9999 is given, in the format <code>yyyymmdd</code>.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each given date, output in the decreasing order of the length of the substrings, each occupies a line. In each line, print the string first, followed by a space, then <code>Yes</code> if it is a prime number, or <code>No</code> if not. If this date is a Prime Day, print in the last line <code>All Prime!</code>.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><pre class="line-numbers language-none"><code class="language-none">20190523<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><pre class="line-numbers language-none"><code class="language-none">20190523 Yes0190523 Yes190523 Yes90523 Yes0523 Yes523 Yes23 Yes3 YesAll Prime!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><pre class="line-numbers language-none"><code class="language-none">20191231<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><pre class="line-numbers language-none"><code class="language-none">20191231 Yes0191231 Yes191231 Yes91231 No1231 Yes231 No31 Yes1 No<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>字符串处理类，string转int，素数判定方法，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>a<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"No"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"All Prime"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://blog.csdn.net/allisonshing/article/details/107626283">https://blog.csdn.net/allisonshing/article/details/107626283</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1149题（不兼容商品）</title>
      <link href="2021/02/09/pat/san-lie-ti/pat-jia-ji-1149/"/>
      <url>2021/02/09/pat/san-lie-ti/pat-jia-ji-1149/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1149.JPG" alt="1149"></p><p><strong>incompatible：不兼容的</strong></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>散列类，Map容器插入方法，Set容器的运用，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>N<span class="token operator">&gt;&gt;</span>M<span class="token punctuation">;</span>    string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>string<span class="token operator">&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>b<span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>l<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>N<span class="token punctuation">;</span>        <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> s<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>o<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>o<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> iter<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token operator">!=</span>m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token operator">*</span>iter<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        flag<span class="token operator">?</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"No"</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1038429908921778176">https://pintia.cn/problem-sets/994805342720868352/problems/1038429908921778176</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散列题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1148题（狼人杀）</title>
      <link href="2021/02/09/pat/mo-ni-ti/pat-jia-ji-1148/"/>
      <url>2021/02/09/pat/mo-ni-ti/pat-jia-ji-1148/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1148.JPG" alt="1148"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>模拟现实类，Vector容器的运用，寻找规律，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>N<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">s</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> lie<span class="token punctuation">,</span><span class="token function">a</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 说谎鉴定</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span><span class="token function">abs</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> lie<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lie<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>lie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>lie<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 人和狼说谎各一</span>                cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>j<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"No Solution"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1038429808099098624">https://pintia.cn/problem-sets/994805342720868352/problems/1038429808099098624</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1155题（堆路径）</title>
      <link href="2021/02/08/pat/shu-ju-jie-gou/pat-jia-ji-1155/"/>
      <url>2021/02/08/pat/shu-ju-jie-gou/pat-jia-ji-1155/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1155.JPG" alt="1155"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>堆数据结构，Vector容器使用方法，递归，难度中</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>using namespace std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1009</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> isMin <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> isMax <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&gt;</span> n <span class="token operator">&amp;&amp;</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 处于叶子节点处</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d%s"</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">" "</span> <span class="token operator">:</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 递归更新v</span>        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>index <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>index <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 判断顺序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> isMin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> isMax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isMin <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Min Heap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> isMax <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"Max Heap"</span> <span class="token operator">:</span> <span class="token string">"Not Heap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1071785408849047552">https://pintia.cn/problem-sets/994805342720868352/problems/1071785408849047552</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1154题（节点染色）</title>
      <link href="2021/02/08/pat/san-lie-ti/pat-jia-ji-1154/"/>
      <url>2021/02/08/pat/san-lie-ti/pat-jia-ji-1154/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1154.JPG" alt="1154"></p><p><strong>vertex：节点</strong></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>散列类，Vector容器自定义方法，Set容器的运用，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span><span class="token keyword">int</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10009</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        bool flag <span class="token operator">=</span> true<span class="token punctuation">;</span>        set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> se<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            se<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t1<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> false<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-coloring\n"</span><span class="token punctuation">,</span> se<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1071785301894295552">https://pintia.cn/problem-sets/994805342720868352/problems/1071785301894295552</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散列题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1153题（准考证排序）</title>
      <link href="2021/02/05/pat/pai-xu-ti/pat-jia-ji-1153/"/>
      <url>2021/02/05/pat/pai-xu-ti/pat-jia-ji-1153/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1153.JPG" alt="1153"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>排序题，结构体向量的运用，排序自定义函数，无序映射，难度中</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>    string t<span class="token punctuation">;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> node <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>value <span class="token operator">!=</span> b<span class="token punctuation">.</span>value <span class="token operator">?</span> a<span class="token punctuation">.</span>value <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>value <span class="token operator">:</span> a<span class="token punctuation">.</span>t <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> num<span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> num <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: %d %s\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> num<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> ans<span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cnt<span class="token operator">++</span><span class="token punctuation">;</span>                    sum <span class="token operator">+=</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> m<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">)</span> m<span class="token punctuation">[</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">:</span> m<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>it<span class="token punctuation">.</span>first<span class="token punctuation">,</span> it<span class="token punctuation">.</span>second<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> num <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NA\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1071785190929788928">https://pintia.cn/problem-sets/994805342720868352/problems/1071785190929788928</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1152题（串中素数）</title>
      <link href="2021/02/05/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1152/"/>
      <url>2021/02/05/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1152/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1152.JPG" alt="1152"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>字符串处理类，string转int，素数判定方法，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">judprime</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>t<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>t<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>K<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token operator">-</span>K<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judprime</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>K<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>K<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"404"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1071785055080476672">https://pintia.cn/problem-sets/994805342720868352/problems/1071785055080476672</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1020题（中序后序遍历得层次遍历）</title>
      <link href="2021/02/04/pat/er-cha-shu-ti/pat-jia-ji-1020/"/>
      <url>2021/02/04/pat/er-cha-shu-ti/pat-jia-ji-1020/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1020.JPG" alt="1020"></p><p><strong>postorder：后序遍历</strong></p><p><strong>inorder：中序遍历</strong></p><p><strong>preorder：先序遍历</strong></p><p><strong>level order：层次遍历</strong></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>二叉树类，Map容器插入方法，Vector容器的运用，二叉树遍历，难度中</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span>using namespace std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> post<span class="token punctuation">,</span> in<span class="token punctuation">;</span>   <span class="token comment">// 后序遍历和中序遍历</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> level<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pre</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// root是相对于后序遍历的</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">&gt;</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> post<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// i是为了找到中序遍历时的根节点</span>    level<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> post<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">pre</span><span class="token punctuation">(</span>root <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> end <span class="token operator">+</span> i<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 左子树根开始递归</span>    <span class="token function">pre</span><span class="token punctuation">(</span>root <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 右子树根开始递归</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    post<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>post<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pre</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> level<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> it<span class="token operator">-&gt;</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">++</span>it <span class="token operator">!=</span> level<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span> it<span class="token operator">-&gt;</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805485033603072">https://pintia.cn/problem-sets/994805342720868352/problems/994805485033603072</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1121题（单身狗）</title>
      <link href="2021/02/01/pat/san-lie-ti/pat-jia-ji-1121/"/>
      <url>2021/02/01/pat/san-lie-ti/pat-jia-ji-1121/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1121.JPG" alt="1121"></p><p><strong>nikename：绰号</strong></p><p><strong>bigamous：重婚的</strong></p><p><strong>dangling：摇摆的</strong></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>散列类，Map容器插入方法，Set容器的运用，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> m<span class="token punctuation">;</span>    set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">,</span>real<span class="token punctuation">;</span>    set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">::</span>iterator iter<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>N<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>b<span class="token punctuation">,</span>a<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cin<span class="token operator">&gt;&gt;</span>M<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">;</span>        real<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>iter<span class="token operator">=</span>real<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">!=</span>real<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token operator">==</span>m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>real<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token operator">*</span>iter<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>real<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>iter<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        iter<span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%05d"</span><span class="token punctuation">,</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %05d"</span><span class="token punctuation">,</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805352359378944">https://pintia.cn/problem-sets/994805342720868352/problems/994805352359378944</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散列题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1116题（欢乐竞赛）</title>
      <link href="2021/02/01/pat/san-lie-ti/pat-jia-ji-1116/"/>
      <url>2021/02/01/pat/san-lie-ti/pat-jia-ji-1116/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1116.JPG" alt="1116"></p><p><strong>prime number：质数</strong><br><strong>query：疑问</strong></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>散列类，Map容器插入方法，Set容器的运用，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span>using namespace std<span class="token punctuation">;</span>bool <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> id<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> rank<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        rank<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> checked<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">==</span> rank<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%04d: Are you kidding?\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>checked<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">!=</span> checked<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%04d: Checked\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                checked<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%04d: Mystery Award\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>rank<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%04d: Minion\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%04d: Chocolate\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// ************* 超时版 *************</span><span class="token comment">//#include &lt;iostream&gt;</span><span class="token comment">//#include &lt;string&gt;</span><span class="token comment">//#include &lt;cstring&gt;</span><span class="token comment">//#include &lt;map&gt;</span><span class="token comment">//using namespace std;</span><span class="token comment">//</span><span class="token comment">//int find_first(string n, string *b, int k){</span><span class="token comment">//    for(int i=0;i&lt;k;i++){</span><span class="token comment">//        if(b[i]==n){</span><span class="token comment">//            return i;</span><span class="token comment">//        }</span><span class="token comment">//    }</span><span class="token comment">//    return -1;</span><span class="token comment">//}</span><span class="token comment">//</span><span class="token comment">//int main(){</span><span class="token comment">//</span><span class="token comment">//    int N,K;</span><span class="token comment">//    map&lt;string,int&gt; m;</span><span class="token comment">//    string s;</span><span class="token comment">//    scanf("%d",&amp;N);</span><span class="token comment">//    getchar();</span><span class="token comment">//    for(int i=0;i&lt;N;i++){</span><span class="token comment">//        getline(cin,s);</span><span class="token comment">//        m.insert(pair&lt;string,int&gt;(s,i+1));</span><span class="token comment">//    }</span><span class="token comment">//</span><span class="token comment">//    scanf("%d",&amp;K);</span><span class="token comment">//    getchar();</span><span class="token comment">//    string *b=new string[K];</span><span class="token comment">//    for(int j=0;j&lt;K;j++){</span><span class="token comment">//        getline(cin,b[j]);</span><span class="token comment">//</span><span class="token comment">//        if(m[b[j]]==0){</span><span class="token comment">//            cout&lt;&lt;b[j]&lt;&lt;": Are you kidding?"&lt;&lt;endl;</span><span class="token comment">//            continue;</span><span class="token comment">//        }</span><span class="token comment">//</span><span class="token comment">//        if(find_first(b[j],b,j+1)&lt;j){</span><span class="token comment">//            cout&lt;&lt;b[j]&lt;&lt;": Checked"&lt;&lt;endl;</span><span class="token comment">//        }</span><span class="token comment">//        else{</span><span class="token comment">//            if(m[b[j]]==1){</span><span class="token comment">//                cout&lt;&lt;b[j]&lt;&lt;": Mystery Award"&lt;&lt;endl;</span><span class="token comment">//            }</span><span class="token comment">//            else if(m[b[j]]==2||m[b[j]]==3){</span><span class="token comment">//                cout&lt;&lt;b[j]&lt;&lt;": Minion"&lt;&lt;endl;</span><span class="token comment">//            }</span><span class="token comment">//            else{</span><span class="token comment">//                cout&lt;&lt;b[j]&lt;&lt;": Chocolate"&lt;&lt;endl;</span><span class="token comment">//            }</span><span class="token comment">//        }</span><span class="token comment">//    }</span><span class="token comment">//</span><span class="token comment">//    return 0;</span><span class="token comment">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805355358306304">https://pintia.cn/problem-sets/994805342720868352/problems/994805355358306304</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散列题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1092题（买珠子）</title>
      <link href="2021/02/01/pat/san-lie-ti/pat-jia-ji-1092/"/>
      <url>2021/02/01/pat/san-lie-ti/pat-jia-ji-1092/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1092.JPG" alt="1092"></p><p><strong>bead：珠子</strong></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>散列类，Map容器插入方法，Map容器遍历方法，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> store<span class="token punctuation">,</span>need<span class="token punctuation">;</span>    map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">::</span>iterator iter<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>store<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            store<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            store<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>need<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            need<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            need<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>iter<span class="token operator">=</span>need<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">!=</span>need<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>iter<span class="token operator">-&gt;</span>second<span class="token operator">&gt;</span>store<span class="token punctuation">[</span>iter<span class="token operator">-&gt;</span>first<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum <span class="token operator">+=</span> iter<span class="token operator">-&gt;</span>second <span class="token operator">-</span> store<span class="token punctuation">[</span>iter<span class="token operator">-&gt;</span>first<span class="token punctuation">]</span><span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    flag<span class="token operator">?</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes "</span><span class="token operator">&lt;&lt;</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"No "</span><span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805374509498368">https://pintia.cn/problem-sets/994805342720868352/problems/994805374509498368</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散列题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1084题（坏键盘）</title>
      <link href="2021/02/01/pat/san-lie-ti/pat-jia-ji-1084/"/>
      <url>2021/02/01/pat/san-lie-ti/pat-jia-ji-1084/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1084.JPG" alt="1084"></p><p><strong>wear out：损坏</strong></p><p><strong>capitalized：大写的</strong></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>散列类，字符查找函数，字符大小写变化函数，字符判断函数，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    string Real<span class="token punctuation">,</span>fase<span class="token punctuation">,</span>result<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>Real<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>fase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Real<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fase<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Real<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">islower</span><span class="token punctuation">(</span>Real<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">toupper</span><span class="token punctuation">(</span>Real<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">islower</span><span class="token punctuation">(</span>Real<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">?</span>result<span class="token operator">+=</span><span class="token function">toupper</span><span class="token punctuation">(</span>Real<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span>result<span class="token operator">+=</span>Real<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">islower</span><span class="token punctuation">(</span>Real<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Real<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>                result<span class="token operator">+=</span>Real<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>result<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805382902300672">https://pintia.cn/problem-sets/994805342720868352/problems/994805382902300672</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散列题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1009题（多项式乘）</title>
      <link href="2021/01/31/pat/gao-jing-du-ti/pat-jia-ji-1009/"/>
      <url>2021/01/31/pat/gao-jing-du-ti/pat-jia-ji-1009/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1009.JPG" alt="1009"></p><p><strong>polynomial：多项式</strong></p><p><strong>exponent：指数</strong></p><p><strong>coefficient：系数</strong></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>高精度题，动态数组，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">double</span> result<span class="token punctuation">[</span><span class="token number">2001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k1<span class="token punctuation">,</span> k2<span class="token punctuation">,</span> exp2<span class="token punctuation">;</span>    <span class="token keyword">double</span> coe2<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 开动态数组</span>    <span class="token keyword">int</span> <span class="token operator">*</span>exp1 <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token operator">*</span>coe1 <span class="token operator">=</span> new <span class="token keyword">double</span><span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%lf"</span><span class="token punctuation">,</span> exp1<span class="token operator">+</span>i<span class="token punctuation">,</span> coe1<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>exp2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>coe2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k1<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            result<span class="token punctuation">[</span>exp1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> exp2<span class="token punctuation">]</span> <span class="token operator">+=</span> coe1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> coe2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2001</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d %.1f"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805509540921344">https://pintia.cn/problem-sets/994805342720868352/problems/994805509540921344</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1002题（多项式加）</title>
      <link href="2021/01/31/pat/gao-jing-du-ti/pat-jia-ji-1002/"/>
      <url>2021/01/31/pat/gao-jing-du-ti/pat-jia-ji-1002/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1002.JPG" alt="1002"></p><p><strong>polynomial：多项式</strong></p><p><strong>exponent：指数</strong></p><p><strong>coefficient：系数</strong></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>高精度题，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span> n<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> a<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1001</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> sum<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d %.1f"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805526272000000">https://pintia.cn/problem-sets/994805342720868352/problems/994805526272000000</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1140题（序列定义）</title>
      <link href="2021/01/30/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1140/"/>
      <url>2021/01/30/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1140/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1140.JPG" alt="1140"></p><p><strong>digits:位数</strong></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>字符串处理类，int转string，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> D<span class="token punctuation">,</span>N<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>D<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>N<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>D<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string s<span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">=</span>s <span class="token operator">+</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string t<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">to_string</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                num<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>                count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        t<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">to_string</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">=</span>t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805344490864640">https://pintia.cn/problem-sets/994805342720868352/problems/994805344490864640</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1132题（切分数字）</title>
      <link href="2021/01/30/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1132/"/>
      <url>2021/01/30/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1132/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1132.JPG" alt="1132"></p><p><strong>digits:位数</strong></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>字符串处理类，子串函数，string转int，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string s<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string a<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string b<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sub1<span class="token punctuation">,</span>sub2<span class="token punctuation">,</span>sum<span class="token punctuation">;</span>        sub1<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        sub2<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sub1<span class="token operator">*</span>sub2<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"No"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">%</span><span class="token punctuation">(</span>sub1<span class="token operator">*</span>sub2<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">else</span>                cout<span class="token operator">&lt;&lt;</span><span class="token string">"No"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805347145859072">https://pintia.cn/problem-sets/994805342720868352/problems/994805347145859072</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1108题（平均数）</title>
      <link href="2021/01/29/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1108/"/>
      <url>2021/01/29/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1108/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1108.JPG" alt="1108"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>字符串处理类，字符串判断，难度中</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> num<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sscanf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 从s字符串中读进与指定格式相符的数据</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"%.2f"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 字符串格式化命令，主要功能是把格式化的数据写入某个字符串中</span>        bool islegal <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> islegal <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>islegal <span class="token operator">&amp;&amp;</span> num <span class="token operator">&gt;=</span> <span class="token operator">-</span><span class="token number">1000</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %s is not a legal number\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The average of 0 numbers is Undefined\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The average of 1 number is %.2f\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The average of %d numbers is %.2f\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> sum <span class="token operator">/</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805360777347072">https://pintia.cn/problem-sets/994805342720868352/problems/994805360777347072</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1005题（按位加法）</title>
      <link href="2021/01/29/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1005/"/>
      <url>2021/01/29/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1005/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1005.JPG" alt="1005"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>字符串处理类，映射对应关系，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">,</span>result<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    string english<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"zero"</span><span class="token punctuation">,</span><span class="token string">"one"</span><span class="token punctuation">,</span><span class="token string">"two"</span><span class="token punctuation">,</span><span class="token string">"three"</span><span class="token punctuation">,</span><span class="token string">"four"</span><span class="token punctuation">,</span><span class="token string">"five"</span><span class="token punctuation">,</span><span class="token string">"six"</span><span class="token punctuation">,</span><span class="token string">"seven"</span><span class="token punctuation">,</span><span class="token string">"eight"</span><span class="token punctuation">,</span><span class="token string">"nine"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> string<span class="token operator">&gt;</span> M<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        M<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> string<span class="token operator">&gt;</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">,</span>english<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        sum<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>    result<span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>M<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>result<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>M<span class="token punctuation">[</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805519074574336">https://pintia.cn/problem-sets/994805342720868352/problems/994805519074574336</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1001题（加法添逗）</title>
      <link href="2021/01/29/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1001/"/>
      <url>2021/01/29/pat/zi-fu-chuan-chu-li-ti/pat-jia-ji-1001/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1001.JPG" alt="1001"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>字符串处理类，隔三位添加逗号，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>    string end<span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fuhao<span class="token punctuation">,</span> count<span class="token punctuation">;</span>    sum<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">?</span> fuhao<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">:</span> fuhao<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    count<span class="token operator">=</span><span class="token punctuation">(</span>end<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>fuhao<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span> <span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        end<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>end<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>end<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805528788582400">https://pintia.cn/problem-sets/994805342720868352/problems/994805528788582400</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级备考指南</title>
      <link href="2021/01/28/pat/pat-jia-ji-bei-kao-zhi-nan/"/>
      <url>2021/01/28/pat/pat-jia-ji-bei-kao-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="1-刷题地址"><a href="#1-刷题地址" class="headerlink" title="1.刷题地址"></a>1.刷题地址</h1><p>PAT计算机程序能力考试官网：<a href="https://www.patest.cn/practice">https://www.patest.cn/practice</a>，如果是备考甲级只要选择甲级选项进入即可。</p><h1 id="2-基础知识"><a href="#2-基础知识" class="headerlink" title="2.基础知识"></a>2.基础知识</h1><h2 id="2-1-algorithm库"><a href="#2-1-algorithm库" class="headerlink" title="2.1 algorithm库"></a>2.1 algorithm库</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"min:%d,max:%d.\n"</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 结果为1和4</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a[0] before:%d.\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 结果为1</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// 数组倒序范围</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a[0] after:%d.\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 结果为-9</span>    cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token comment">// 结果为-9，函数返回是地址，需要加*</span>    cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token comment">// 结果为10，函数返回是地址，需要加*</span>    <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"before b=%d,c=%d\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 交换前结果为：1,2</span>    <span class="token function">swap</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"before b=%d,c=%d\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 交换后结果为：2，1</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-大小写转换"><a href="#2-2-大小写转换" class="headerlink" title="2.2 大小写转换"></a>2.2 大小写转换</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> a<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token string">'B'</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"a:"</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">",b:"</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token comment">// 结果为a和B</span>    a <span class="token operator">=</span> <span class="token function">toupper</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 转化为小写</span>    b <span class="token operator">=</span> <span class="token function">tolower</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 转换成大写</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"a:"</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">",b:"</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token comment">// 结果为A和b</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-STL-map"><a href="#2-3-STL-map" class="headerlink" title="2.3 STL-map"></a>2.3 STL-map</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回指向第一个元素的迭代器</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回指向最后一个元素的迭代器</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回指向最后一个元素的迭代器</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回指向第一个元素的迭代器</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//测试map容器是不是空的</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回容器的大小</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回容器最大的容量，这个是相对于内存来讲的</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//向容器中插入元素</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token comment">//删除容器当中it指向的元素，it为迭代器</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token comment">//删除容器中键值为'c'的元素</span><span class="token function">eras</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> mymap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//删除容器中it和mymap.end()之间的元素，它们两个都是迭代器</span>foo<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token comment">//交换容器foo和bar中的元素</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//清空容器</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment">//返回指向键值为'b'的的迭代器，没有的话就指向end()</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token comment">//查找键值为'c'的元素，在map中返回0或者1,0表示没有这个键值，1表示有，但是在mutimap中就是这个键值出现的次数</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment">//返回指向键值为'b'的迭代器，当没有这个键值时就返回空的迭代器</span><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment">//返回指向键值为'b'的下一个元素的迭代器，没有的话就返回空的迭代器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-STL-vector"><a href="#2-4-STL-vector" class="headerlink" title="2.4 STL-vector"></a>2.4 STL-vector</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回指向第一个元素的迭代器</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回指向最后一个元素的迭代器</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回指向最后一个元素的迭代器</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回指向第一个元素的迭代器</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回容器的元素的个数</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回容器的最大的元素的个数</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//重新调整容器的容量，无论原来的容量是大于还是小于后来的恶容量都可以</span>myvector<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将容器的容量调整为5，如果变短了就直接删除多余的元素，长了就用0将剩余的空间填满</span>myvector<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将容器的容量调整8，并将多出来的位置用100表示</span>myvector<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将容器的容量调整为12，多出的空间用0填充</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回这个容器在内存空间中最多的连续空间</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//测试这个容器是不是空的</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//重新调整容器的capacity</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//返回位置为i处得元素的引用，当超出容器的最后一个位置就抛出一个异常</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回第一个元素的引用</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回最后一个元素的引用</span><span class="token keyword">void</span> <span class="token function">assign</span> <span class="token punctuation">(</span> InputIterator first<span class="token punctuation">,</span> InputIterator last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将迭代器first和迭代器last之间的元素付给调用这个方法的容器</span><span class="token keyword">void</span> <span class="token function">assign</span> <span class="token punctuation">(</span> size_type n<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> u <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将n个u付给容器</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//在容器的末尾添加元素</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//删除容器最后面的一个元素</span>iterator <span class="token function">insert</span> <span class="token punctuation">(</span> iterator position<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在迭代器position的前面插入元素x</span><span class="token keyword">void</span> <span class="token function">insert</span> <span class="token punctuation">(</span> iterator position<span class="token punctuation">,</span> size_type n<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在position的前面插入n个x</span>template <span class="token operator">&lt;</span>class InputIterator<span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">insert</span> <span class="token punctuation">(</span> iterator position<span class="token punctuation">,</span> InputIterator first<span class="token punctuation">,</span> InputIterator last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将迭代器first和last之间的元素插入到position前面</span>iterator <span class="token function">erase</span> <span class="token punctuation">(</span> iterator position <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除迭代器position指向的元素</span>iterator <span class="token function">erase</span> <span class="token punctuation">(</span> iterator first<span class="token punctuation">,</span> iterator last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除迭代器first和last之间的元素，不包括last指向的元素</span><span class="token keyword">void</span> <span class="token function">swap</span> <span class="token punctuation">(</span> vector<span class="token operator">&lt;</span>T<span class="token punctuation">,</span>Allocator<span class="token operator">&gt;</span><span class="token operator">&amp;</span> vec <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换两个容器的元素</span><span class="token keyword">void</span> <span class="token function">clear</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空容器当中的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-STL-set"><a href="#2-5-STL-set" class="headerlink" title="2.5 STL-set"></a>2.5 STL-set</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">set容器<span class="token punctuation">(</span>只存储值不相同的元素，并且按照从小到大的顺序排列<span class="token punctuation">)</span>iterator <span class="token function">begin</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回指向set容器第一个元素的迭代器</span>iterator <span class="token function">end</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回指向容器最后一个元素的迭代器</span>reverse_iterator <span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回指向容器最后一个元素的迭代器</span>reverse_iterator <span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回指向容器第一个元素的迭代器</span>bool <span class="token function">empty</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//测试容器是否为空</span>size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//计算容器当中元素的个数</span>size_type <span class="token function">max_size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//计算容器的最大容量</span>pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span>bool<span class="token operator">&gt;</span> <span class="token function">insert</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将元素x插入到set容器中返回pair对象，first元素为指向插入的元素的迭代器，second元素为指示插入成功与否的bool值</span>iterator <span class="token function">insert</span> <span class="token punctuation">(</span> iterator position<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将x插入</span>template <span class="token operator">&lt;</span>class InputIterator<span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">insert</span> <span class="token punctuation">(</span> InputIterator first<span class="token punctuation">,</span> InputIterator last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将first与last只见到恶元素插入到容器中</span><span class="token keyword">void</span> <span class="token function">erase</span> <span class="token punctuation">(</span> iterator position <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除position位置处得元素</span>size_type <span class="token function">erase</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除值为x的元素</span><span class="token keyword">void</span> <span class="token function">erase</span> <span class="token punctuation">(</span> iterator first<span class="token punctuation">,</span> iterator last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除迭代器first和last之间的元素</span><span class="token keyword">void</span> <span class="token function">swap</span> <span class="token punctuation">(</span> set<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Compare<span class="token punctuation">,</span>Allocator<span class="token operator">&gt;</span><span class="token operator">&amp;</span> st <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换两个set容器的元素</span><span class="token keyword">void</span> <span class="token function">clear</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空set容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-6-STL-stack"><a href="#2-6-STL-stack" class="headerlink" title="2.6 STL-stack"></a>2.6 STL-stack</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">empty</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//测试栈是不是空的返回1表示空0表示非空</span>size_type <span class="token function">size</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//返回当前栈的元素的个数</span>value_type <span class="token function">top</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回当前的栈顶元素，不删除这个元素</span><span class="token keyword">const</span> value_type <span class="token function">top</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//返回栈顶元素的const引用</span><span class="token keyword">void</span> <span class="token function">push</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将当前的元素x入栈</span><span class="token keyword">void</span> <span class="token function">pop</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除栈顶元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-7-STL-queue"><a href="#2-7-STL-queue" class="headerlink" title="2.7 STL-queue"></a>2.7 STL-queue</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">empty</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//测试当前队列是不是空，0表示空，1表示非空</span>size_type <span class="token function">size</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//队列的元素的个数</span>value_type<span class="token operator">&amp;</span> <span class="token function">front</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回队首元素的引用</span><span class="token keyword">const</span> value_type <span class="token function">front</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//返回队首元素的const值</span>value_type<span class="token operator">&amp;</span> <span class="token function">back</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回队尾元素的引用</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> <span class="token function">back</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//返回队尾元素的const值</span><span class="token keyword">void</span> <span class="token function">push</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将x入队列</span><span class="token keyword">void</span> <span class="token function">pop</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除队首元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-8-STL-string"><a href="#2-8-STL-string" class="headerlink" title="2.8 STL-string"></a>2.8 STL-string</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">string<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回的是const char*而非char *，如果想返回char *的话可以这样写：char * a = (char*)string.c_str();</span><span class="token function">strtok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//函数很好用，分割字符串 </span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> string s<span class="token punctuation">)</span><span class="token comment">//在pos位置后面插入s字串</span><span class="token function">transform</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">::</span>tolower<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将s的字串全部变成小写的</span><span class="token function">transform</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">::</span>upper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将s的字串全部变成大写的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-9-判断字符类型"><a href="#2-9-判断字符类型" class="headerlink" title="2.9 判断字符类型"></a>2.9 判断字符类型</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">isalnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断是否数字，大写字母或小写字母；如果是，返回非零值，否则返回零值。</span><span class="token keyword">int</span> <span class="token function">isalpha</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断是否为字母；如果是，返回非零值，否则返回零值</span><span class="token keyword">int</span> <span class="token function">islower</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断是否为小写字母；如果是，返回非零值，否则返回零值。</span><span class="token keyword">int</span> <span class="token function">isupper</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断是否为大写字母；如果是，返回非零值，否则返回零值。</span><span class="token keyword">int</span> <span class="token function">isdigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断是否为数字字符；如果是，返回非零值，否则返回零值。</span><span class="token keyword">int</span> <span class="token function">isxdigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断是否为十六进制数字字符；如果是，返回非零值，否则返回零值。</span><span class="token keyword">int</span> <span class="token function">isspace</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断是否为空白字符；包括空格，换页，换行，回车，水平垂直制表符；</span><span class="token keyword">int</span> <span class="token function">isblank</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断是否为空格字符；如果是，返回非零值，否则返回零值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-刷题总结"><a href="#3-刷题总结" class="headerlink" title="3. 刷题总结"></a>3. 刷题总结</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// ******** 字符串格式化输入 *********** //</span><span class="token keyword">char</span> formattime<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>formattime<span class="token punctuation">,</span> <span class="token string">"%d:%d:%d"</span><span class="token punctuation">,</span>day<span class="token punctuation">,</span>hour<span class="token punctuation">,</span>minute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ******** 结构体重载运算符 *********** //</span><span class="token keyword">struct</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    string name<span class="token punctuation">;</span>    string state<span class="token punctuation">;</span>    string format_time<span class="token punctuation">;</span>    <span class="token keyword">int</span> time<span class="token punctuation">;</span>    bool operator<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> t<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> time<span class="token operator">&lt;</span>t<span class="token punctuation">.</span>time<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// ******** Vector比较 *********** //</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> a<span class="token operator">=</span>b<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">==</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">// 用于比较vector序列是否相同，完全相同就输出true</span><span class="token comment">// ******** Vector倒序遍历 *********** //</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备考指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1100题（火星数）</title>
      <link href="2021/01/28/pat/jin-zhi-zhuan-huan-ti/pat-jia-ji-1100/"/>
      <url>2021/01/28/pat/jin-zhi-zhuan-huan-ti/pat-jia-ji-1100/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1100.JPG" alt="1100"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>进制转换，MAP用法，int与string转换，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string ones<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"tret"</span><span class="token punctuation">,</span> <span class="token string">"jan"</span><span class="token punctuation">,</span> <span class="token string">"feb"</span><span class="token punctuation">,</span> <span class="token string">"mar"</span><span class="token punctuation">,</span> <span class="token string">"apr"</span><span class="token punctuation">,</span> <span class="token string">"may"</span><span class="token punctuation">,</span> <span class="token string">"jun"</span><span class="token punctuation">,</span> <span class="token string">"jly"</span><span class="token punctuation">,</span> <span class="token string">"aug"</span><span class="token punctuation">,</span> <span class="token string">"sep"</span><span class="token punctuation">,</span> <span class="token string">"oct"</span><span class="token punctuation">,</span> <span class="token string">"nov"</span><span class="token punctuation">,</span> <span class="token string">"dec"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>string tens<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"tam"</span><span class="token punctuation">,</span> <span class="token string">"hel"</span><span class="token punctuation">,</span> <span class="token string">"maa"</span><span class="token punctuation">,</span> <span class="token string">"huh"</span><span class="token punctuation">,</span> <span class="token string">"tou"</span><span class="token punctuation">,</span> <span class="token string">"kes"</span><span class="token punctuation">,</span> <span class="token string">"hei"</span><span class="token punctuation">,</span> <span class="token string">"elo"</span><span class="token punctuation">,</span> <span class="token string">"syy"</span><span class="token punctuation">,</span> <span class="token string">"lok"</span><span class="token punctuation">,</span> <span class="token string">"mer"</span><span class="token punctuation">,</span> <span class="token string">"jou"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> M2E<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> M2E<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>ones<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> M2E<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>tens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> N<span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获得一行输入存入s中 </span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> earth <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>earth<span class="token operator">/</span><span class="token number">13</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> tens<span class="token punctuation">[</span>earth<span class="token operator">/</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>earth<span class="token operator">/</span><span class="token number">13</span> <span class="token operator">&amp;&amp;</span> earth<span class="token operator">%</span><span class="token number">13</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>earth<span class="token operator">%</span><span class="token number">13</span> <span class="token operator">||</span> earth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> ones<span class="token punctuation">[</span>earth<span class="token operator">%</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">int</span> earth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> earth <span class="token operator">=</span> M2E<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> M2E<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span> earth <span class="token operator">=</span> M2E<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> earth <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805367156883456">https://pintia.cn/problem-sets/994805342720868352/problems/994805367156883456</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进制转换题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1058题（进制进位）</title>
      <link href="2021/01/27/pat/jin-zhi-zhuan-huan-ti/pat-jia-ji-1058/"/>
      <url>2021/01/27/pat/jin-zhi-zhuan-huan-ti/pat-jia-ji-1058/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1058.JPG" alt="1058"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>进制转换，进制进位，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>upper<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d.%d.%d %d.%d.%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sum<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;=</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">{</span>upper<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>sum <span class="token operator">=</span> sum<span class="token operator">-</span><span class="token number">29</span><span class="token punctuation">;</span><span class="token punctuation">}</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">;</span>sum<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>upper<span class="token punctuation">;</span>upper<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;=</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">{</span>upper<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>sum<span class="token operator">=</span>sum<span class="token operator">-</span><span class="token number">17</span><span class="token punctuation">;</span><span class="token punctuation">}</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">;</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>upper<span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"."</span><span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"."</span><span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805416519647232">https://pintia.cn/problem-sets/994805342720868352/problems/994805416519647232</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进制转换题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1027题（RGB转换）</title>
      <link href="2021/01/27/pat/jin-zhi-zhuan-huan-ti/pat-jia-ji-1027/"/>
      <url>2021/01/27/pat/jin-zhi-zhuan-huan-ti/pat-jia-ji-1027/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1027.JPG" alt="1027"></p><p><strong>radix</strong>:基数</p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>进制转换，字符串处理，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>using namespace std<span class="token punctuation">;</span>string s<span class="token operator">=</span><span class="token string">"#"</span><span class="token punctuation">;</span>string <span class="token function">Map</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">to_string</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">"A"</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">"B"</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">"C"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">num2rgb</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>s<span class="token operator">+=</span><span class="token function">Map</span><span class="token punctuation">(</span>num<span class="token operator">/</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">+=</span><span class="token function">Map</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">,</span><span class="token operator">&amp;</span>g<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">num2rgb</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">num2rgb</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">num2rgb</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805470349344768">https://pintia.cn/problem-sets/994805342720868352/problems/994805470349344768</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进制转换题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1019题（回文数）</title>
      <link href="2021/01/26/pat/jin-zhi-zhuan-huan-ti/pat-jia-ji-1019/"/>
      <url>2021/01/26/pat/jin-zhi-zhuan-huan-ti/pat-jia-ji-1019/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1019.JPG" alt="1019"></p><p>decimal：十进制</p><p>palindromic：回文的</p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>进制转换，回文判断，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> b<span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> bn<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>bn<span class="token punctuation">[</span>num<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> n <span class="token operator">%</span> b<span class="token punctuation">;</span>n <span class="token operator">=</span> n <span class="token operator">/</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bool isPalindromic <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> bn<span class="token punctuation">[</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>isPalindromic <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> isPalindromic <span class="token operator">?</span> <span class="token string">"Yes\n"</span> <span class="token operator">:</span> <span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> bn<span class="token punctuation">[</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span> bn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//错误事例:用字符串则没有考虑到大于十进制后的情况 </span><span class="token comment">//#include &lt;iostream&gt;</span><span class="token comment">//#include &lt;string&gt;</span><span class="token comment">//#include &lt;algorithm&gt;</span><span class="token comment">//using namespace std;</span><span class="token comment">//</span><span class="token comment">//string rev(int N, int b){</span><span class="token comment">//string s="";</span><span class="token comment">//do{</span><span class="token comment">//s+=to_string(N%b);</span><span class="token comment">//N=N/b;</span><span class="token comment">//}while(N&gt;0);</span><span class="token comment">//return s;</span><span class="token comment">//}</span><span class="token comment">//</span><span class="token comment">//int main(){</span><span class="token comment">//int N,b;</span><span class="token comment">//string Real, Rev;</span><span class="token comment">//scanf("%d %d",&amp;N,&amp;b);</span><span class="token comment">//Rev = Real = rev(N,b);</span><span class="token comment">//reverse(Rev.begin(),Rev.end()); </span><span class="token comment">//Real==Rev?cout&lt;&lt;"Yes"&lt;&lt;endl:cout&lt;&lt;"No"&lt;&lt;endl;</span><span class="token comment">//for(int i=0;i&lt;Rev.size();i++){</span><span class="token comment">//i==Rev.size()-1?printf("%c",Rev[i]):printf("%c ",Rev[i]);</span><span class="token comment">//}</span><span class="token comment">//return 0;</span><span class="token comment">//} </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805487143337984">https://pintia.cn/problem-sets/994805342720868352/problems/994805487143337984</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进制转换题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1015题（逆素）</title>
      <link href="2021/01/25/pat/jin-zhi-zhuan-huan-ti/pat-jia-ji-1015/"/>
      <url>2021/01/25/pat/jin-zhi-zhuan-huan-ti/pat-jia-ji-1015/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1015.JPG" alt="1015"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>进制转换，素数判定，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token comment">/*判断素数函数 */</span>bool <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*进制转化函数 */</span><span class="token keyword">int</span> <span class="token function">revD</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> D<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n2D<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>n2D<span class="token punctuation">[</span>num<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> n <span class="token operator">%</span> D<span class="token punctuation">;</span>n <span class="token operator">=</span> n <span class="token operator">/</span> D<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> result <span class="token operator">=</span> result <span class="token operator">*</span> D <span class="token operator">+</span> n2D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> D<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>D<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token function">isPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token function">revD</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>D<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"Yes\n"</span> <span class="token operator">:</span> <span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原题地址"><a href="#4-原题地址" class="headerlink" title="4.原题地址"></a>4.原题地址</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805495863296000">https://pintia.cn/problem-sets/994805342720868352/problems/994805495863296000</a></p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进制转换题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1128题（八皇后）</title>
      <link href="2021/01/24/pat/mo-ni-ti/pat-jia-ji-1128/"/>
      <url>2021/01/24/pat/mo-ni-ti/pat-jia-ji-1128/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1128.PNG" alt="1128"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>模拟现实类，数组操作，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> K<span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> K<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>bool issolution <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> seq<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> seq<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> issolution<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>seq<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> seq<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">abs</span><span class="token punctuation">(</span>seq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>seq<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">abs</span><span class="token punctuation">(</span>j<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>issolution <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> issolution <span class="token operator">?</span> <span class="token string">"YES\n"</span> <span class="token operator">:</span> <span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1117题（均分问题）</title>
      <link href="2021/01/24/pat/mo-ni-ti/pat-jia-ji-1117/"/>
      <url>2021/01/24/pat/mo-ni-ti/pat-jia-ji-1117/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1117.PNG" alt="1117"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>模拟现实类，排序函数，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> dis<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> dis<span class="token operator">+</span>n<span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从大到小排序 </span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1051题（堆栈）</title>
      <link href="2021/01/24/pat/mo-ni-ti/pat-jia-ji-1051/"/>
      <url>2021/01/24/pat/mo-ni-ti/pat-jia-ji-1051/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1051.PNG" alt="1051"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>模拟现实类，模拟堆栈，数据结构，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> seq<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> pop<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> seq<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>pop<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> m<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pop<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pop<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> seq<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>pop<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>current<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1046题（最短路径）</title>
      <link href="2021/01/24/pat/mo-ni-ti/pat-jia-ji-1046/"/>
      <url>2021/01/24/pat/mo-ni-ti/pat-jia-ji-1046/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1046.PNG" alt="1046"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>模拟现实类，问题转换题，最短路径，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> d<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> distance<span class="token punctuation">[</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>sum <span class="token operator">+=</span> temp<span class="token punctuation">;</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>d <span class="token operator">=</span> distance<span class="token punctuation">[</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> distance<span class="token punctuation">[</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> sum<span class="token operator">-</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1042题（刷牌器）</title>
      <link href="2021/01/24/pat/mo-ni-ti/pat-jia-ji-1042/"/>
      <url>2021/01/24/pat/mo-ni-ti/pat-jia-ji-1042/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1042.png" alt="1042"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>模拟现实类，字符串操作，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> order<span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> listone<span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">,</span>listtwo<span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">54</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>order<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>listone<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">54</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>listtwo<span class="token punctuation">[</span>order<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>listone<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">54</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>listone<span class="token punctuation">[</span>order<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>listtwo<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>string out<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>N<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">54</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token punctuation">(</span>listone<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">13</span><span class="token punctuation">,</span>abs<span class="token operator">=</span><span class="token punctuation">(</span>listone<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">13</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> out<span class="token operator">=</span><span class="token string">"S"</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>abs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> out<span class="token operator">=</span><span class="token string">"H"</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>abs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> out<span class="token operator">=</span><span class="token string">"C"</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>abs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> out<span class="token operator">=</span><span class="token string">"D"</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>abs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span> out<span class="token operator">=</span><span class="token string">"J"</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>abs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>out<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>out<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">54</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token punctuation">(</span>listtwo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">13</span><span class="token punctuation">,</span>abs<span class="token operator">=</span><span class="token punctuation">(</span>listtwo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">13</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> out<span class="token operator">=</span><span class="token string">"S"</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>abs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> out<span class="token operator">=</span><span class="token string">"H"</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>abs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> out<span class="token operator">=</span><span class="token string">"C"</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>abs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> out<span class="token operator">=</span><span class="token string">"D"</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>abs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span> out<span class="token operator">=</span><span class="token string">"J"</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>abs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>out<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>out<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1008题（电梯）</title>
      <link href="2021/01/24/pat/mo-ni-ti/pat-jia-ji-1008/"/>
      <url>2021/01/24/pat/mo-ni-ti/pat-jia-ji-1008/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目介绍"><a href="#1-题目介绍" class="headerlink" title="1.题目介绍"></a>1.题目介绍</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/1008.PNG" alt="1008"></p><h2 id="2-考察点，难度"><a href="#2-考察点，难度" class="headerlink" title="2.考察点，难度"></a>2.考察点，难度</h2><p>模拟现实类，难度易</p><h2 id="3-解题代码"><a href="#3-解题代码" class="headerlink" title="3.解题代码"></a>3.解题代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>N<span class="token punctuation">;</span><span class="token keyword">int</span> floor<span class="token punctuation">[</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>floor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> wait<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> up<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> down<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>floor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>wait<span class="token operator">+=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>floor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span>floor<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>up<span class="token operator">+=</span><span class="token number">6</span><span class="token operator">*</span><span class="token punctuation">(</span>floor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>floor<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>down<span class="token operator">+=</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>floor<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>floor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>up<span class="token operator">+</span>down<span class="token operator">+</span>wait<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理之错切问题</title>
      <link href="2020/11/01/matlab/shu-zi-tu-xiang-chu-li-ke-cheng-zuo-ye/"/>
      <url>2020/11/01/matlab/shu-zi-tu-xiang-chu-li-ke-cheng-zuo-ye/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/%E5%9B%BE1.PNG" alt="图1"></p><h2 id="修正原理"><a href="#修正原理" class="headerlink" title="修正原理"></a>修正原理</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/%E5%9B%BE2.PNG" alt="图2"></p><h2 id="MATLAB代码实现"><a href="#MATLAB代码实现" class="headerlink" title="MATLAB代码实现"></a>MATLAB代码实现</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Stamp</span><span class="token punctuation">(</span>Origin_path<span class="token punctuation">,</span> Need_to_fix_picture_path<span class="token punctuation">)</span><span class="token comment">%% 本函数用于修正印章的错切问题</span><span class="token comment">% Input:</span><span class="token comment">%    Origin_path:原始理想图的存放路径</span><span class="token comment">%    Need_to_fix_picture_path：待修复的图存放路径</span>    <span class="token comment">% 手动映射采点</span>    bad<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">285</span><span class="token punctuation">,</span><span class="token number">165</span><span class="token punctuation">;</span>        <span class="token number">170</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">;</span>        <span class="token number">265</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">;</span>        <span class="token number">294</span><span class="token punctuation">,</span><span class="token number">133</span><span class="token punctuation">;</span>        <span class="token number">81</span><span class="token punctuation">,</span><span class="token number">71</span><span class="token punctuation">;</span>        <span class="token number">240</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">;</span>        <span class="token number">220</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">;</span>        <span class="token number">79</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">;</span>        <span class="token number">148</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    good<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">,</span><span class="token number">167</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">139</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">216</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">231</span><span class="token punctuation">,</span><span class="token number">133</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">211</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">163</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">% 回归得到错切修正系数</span>    Parameter_X<span class="token operator">=</span><span class="token function">regress</span><span class="token punctuation">(</span><span class="token function">bad</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>good<span class="token punctuation">)</span><span class="token punctuation">;</span>    Parameter_Y<span class="token operator">=</span><span class="token function">regress</span><span class="token punctuation">(</span><span class="token function">bad</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>good<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">% 载入错切后图片与原图片,并显示</span>    picture<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span>Need_to_fix_picture_path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">% 错切图存放地址</span>    Shape<span class="token operator">=</span><span class="token function">size</span><span class="token punctuation">(</span>picture<span class="token punctuation">)</span><span class="token punctuation">;</span>    target<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span>Origin_path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">% 原始图存放地址</span>    target_size<span class="token operator">=</span><span class="token function">size</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imshow</span><span class="token punctuation">(</span>picture<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Need to fix'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imshow</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">% 根据原图和错切图建立映射，修复错切问题</span>    Store_Matrix<span class="token operator">=</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token function">target_size</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">target_size</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> channel<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span>        <span class="token keyword">for</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">target_size</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> y<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">target_size</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>Parameter_X<span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token function">Shape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token keyword">if</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>Parameter_Y<span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token function">Shape</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token function">Store_Matrix</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>channel<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">picture</span><span class="token punctuation">(</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>Parameter_X<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>Parameter_Y<span class="token punctuation">)</span><span class="token punctuation">,</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>        <span class="token comment">% 显示修复后结果</span>    Store_Matrix<span class="token operator">=</span><span class="token function">uint8</span><span class="token punctuation">(</span>Store_Matrix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imshow</span><span class="token punctuation">(</span>Store_Matrix<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'fixed picture'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修正结果"><a href="#修正结果" class="headerlink" title="修正结果"></a>修正结果</h2><p><img src="https://github.com/Peyton-Chen/Picture/raw/master/%E5%9B%BE3.png" alt="图3"></p>]]></content>
      
      
      <categories>
          
          <category> 数字图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
            <tag> 数字图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VHDL语言入门</title>
      <link href="2020/07/11/vhdl-yu-yan-ru-men/"/>
      <url>2020/07/11/vhdl-yu-yan-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="语言描述法"><a href="#语言描述法" class="headerlink" title="语言描述法"></a>语言描述法</h2><h3 id="1-结构描述法"><a href="#1-结构描述法" class="headerlink" title="1. 结构描述法"></a>1. 结构描述法</h3><p>这种方法的前提是知道逻辑函数的表达式。下面以2位比较器为例子来进一步说明。<br></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl">AeqB<span class="token operator">&lt;=</span><span class="token function">NOT</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">XOR</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">OR</span> <span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">XOR</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">OR</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">XOR</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">OR</span> <span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">XOR</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h3 id="2-行为描述法"><a href="#2-行为描述法" class="headerlink" title="2. 行为描述法"></a>2. 行为描述法</h3><p>这种方法从功能上进行编程，效率非常高。<br></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl">AeqB<span class="token operator">&lt;=</span><span class="token number">'1'</span> <span class="token keyword">WHEN</span> a<span class="token operator">=</span>b <span class="token keyword">ELSE</span> <span class="token number">'0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol><li>BIT:位类型，其值只能为‘0’或‘1’。</li><li>Std_Logic标准逻辑类型。</li></ol><p>(1).可以代替BIT和BIT_VECTOR(多位)。</p><p>(2).电路中存在三态逻辑必须用STD_LOGIC和STD_LOGIC_VECTOR。</p><p>(3)在使用Std_Logic数据类型时必须声明库和程序包说明语句：<br></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token constant">LIBRARY</span> ieee<span class="token punctuation">;</span><span class="token constant">USE</span> ieee<span class="token punctuation">.</span>std_logic_1164<span class="token punctuation">.</span><span class="token keyword">ALL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p></p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><div class="table-container"><table><thead><tr><th>运算符</th><th>功能</th><th>运算符</th><th>功能</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>SLL</td><td>逻辑左移</td></tr><tr><td>-</td><td>减</td><td>SRL</td><td>逻辑右移</td></tr><tr><td>*</td><td>乘</td><td>SLA</td><td>算术左移</td></tr><tr><td>/</td><td>除</td><td>SRA</td><td>算术右移</td></tr><tr><td>**</td><td>乘方</td><td>ROL</td><td>逻辑循环左移</td></tr><tr><td>MOD</td><td>取模</td><td>ROR</td><td>逻辑循环右移</td></tr><tr><td>REM</td><td>取余</td><td>ABS</td><td>取绝对值</td></tr></tbody></table></div><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">AND</td><td style="text-align:left">与</td></tr><tr><td style="text-align:left">OR</td><td style="text-align:left">或</td></tr><tr><td style="text-align:left">NAND</td><td style="text-align:left">与非</td></tr><tr><td style="text-align:left">NOR</td><td style="text-align:left">或非</td></tr><tr><td style="text-align:left">XOR</td><td style="text-align:left">亦或</td></tr><tr><td style="text-align:left">XNOR</td><td style="text-align:left">亦或非</td></tr><tr><td style="text-align:left">NOT</td><td style="text-align:left">非</td></tr></tbody></table></div><h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><div class="table-container"><table><thead><tr><th>运算符</th><th>功能</th></tr></thead><tbody><tr><td>+</td><td>正</td></tr><tr><td>-</td><td>负</td></tr><tr><td>&amp;</td><td>并置</td></tr></tbody></table></div><h2 id="VHDL程序基本结构"><a href="#VHDL程序基本结构" class="headerlink" title="VHDL程序基本结构"></a>VHDL程序基本结构</h2><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token constant">LIBRARY</span> ieee<span class="token punctuation">;</span><span class="token constant">USE</span> ieee<span class="token punctuation">.</span>std_logic_1164<span class="token punctuation">.</span><span class="token keyword">ALL</span><span class="token punctuation">;</span>    <span class="token comment">--库说明</span><span class="token keyword">ENTITY</span> mux21 <span class="token keyword">IS</span>                 <span class="token comment">--实体说明</span>    <span class="token keyword">PORT</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> SEL<span class="token punctuation">:</span><span class="token keyword">IN</span> STD_LOGIC<span class="token punctuation">;</span>        Y<span class="token punctuation">:</span><span class="token keyword">OUT</span> STD_LOGIC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span> mux21<span class="token punctuation">;</span><span class="token keyword">ARCHITECTURE</span> one <span class="token keyword">OF</span> mux21 <span class="token keyword">IS</span>     <span class="token comment">--结构体说明</span>    <span class="token keyword">BEGIN</span>Y<span class="token operator">&lt;=</span><span class="token punctuation">(</span>A <span class="token operator">AND</span> <span class="token operator">NOT</span> SEL<span class="token punctuation">)</span> <span class="token operator">OR</span> <span class="token punctuation">(</span>B <span class="token operator">AND</span> SEL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="并行语句"><a href="#并行语句" class="headerlink" title="并行语句"></a>并行语句</h2><ol><li>布尔表达式<pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl">Y<span class="token operator">&lt;=</span><span class="token punctuation">(</span>A <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token operator">NOT</span> S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">OR</span> <span class="token punctuation">(</span>B <span class="token operator">AND</span> S<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>条件信号赋值语句<pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl">X<span class="token operator">&lt;=</span> a <span class="token keyword">when</span><span class="token punctuation">(</span>s<span class="token operator">=</span><span class="token operator">=</span><span class="token vhdl-vectors number">"00"</span><span class="token punctuation">)</span> <span class="token keyword">else</span>    b <span class="token keyword">when</span><span class="token punctuation">(</span>s<span class="token operator">=</span><span class="token operator">=</span><span class="token vhdl-vectors number">"01"</span><span class="token punctuation">)</span> <span class="token keyword">else</span>    c <span class="token keyword">when</span><span class="token punctuation">(</span>s<span class="token operator">=</span><span class="token operator">=</span><span class="token vhdl-vectors number">"10"</span><span class="token punctuation">)</span> <span class="token keyword">else</span>    d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>选择信号赋值语句<pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">WITH</span> s <span class="token keyword">SELECT</span>X<span class="token operator">&lt;=</span> a <span class="token keyword">WHEN</span><span class="token vhdl-vectors number">"00"</span><span class="token punctuation">,</span>    b <span class="token keyword">WHEN</span><span class="token vhdl-vectors number">"01"</span><span class="token punctuation">,</span>    c <span class="token keyword">WHEN</span><span class="token vhdl-vectors number">"10"</span><span class="token punctuation">,</span>    d <span class="token keyword">WHEN</span> <span class="token keyword">OTHERS</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>进程语句<pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token comment">--D触发器上升沿触发</span><span class="token keyword">ARCHITECTURE</span> one <span class="token keyword">OF</span> dff <span class="token keyword">IS</span> <span class="token keyword">BEGIN</span>  <span class="token keyword">PROCESS</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span>   <span class="token keyword">BEGIN</span>    <span class="token keyword">IF</span> clk<span class="token keyword">'event</span> <span class="token operator">AND</span> clk<span class="token operator">=</span><span class="token number">'1'</span> <span class="token keyword">THEN</span>        q<span class="token operator">&lt;=</span>d<span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>  <span class="token keyword">END</span> <span class="token keyword">PROCESS</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token comment">--D锁存器</span><span class="token keyword">PROCESS</span><span class="token punctuation">(</span>oe<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">IF</span> oe<span class="token operator">=</span><span class="token number">'1'</span> <span class="token keyword">THEN</span>        y<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">PROCESS</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>顺序语句</li></ol><p>每一条顺序语句的执行顺序是和它们的书写顺序是一致的。它只能出现在进程，函数和过程中。</p><p>（1）顺序赋值语句</p><p>变量赋值目标：=赋值源</p><p>信号赋值目标：&lt;=赋值源</p><p>（2）IF语句<br></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">IF</span> 条件句 <span class="token keyword">THEN</span>    顺序语句<span class="token keyword">ELSE</span>    顺序语句<span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token comment">----------------------------</span><span class="token keyword">IF</span> 条件句 <span class="token keyword">THEN</span>    顺序语句   <span class="token keyword">ELSIF</span> 条件句 <span class="token keyword">THEN</span>    顺序语句   <span class="token keyword">ELSE</span>    顺序语句<span class="token keyword">END</span> <span class="token keyword">IF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>(3)CASE_WHEN语句<br><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">CASE</span> 表达式 <span class="token keyword">IS</span>    <span class="token keyword">WHEN</span> 选择值<span class="token operator">=</span><span class="token operator">&gt;</span>顺序语句；    ………    <span class="token keyword">WHEN</span> 选择值<span class="token operator">=</span><span class="token operator">&gt;</span>顺序语句；    <span class="token punctuation">[</span><span class="token keyword">WHEN</span> <span class="token keyword">OTHERS</span><span class="token operator">=</span><span class="token operator">&gt;</span>顺序语句；<span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>下面以四选一数据选择器为例：<br><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl">mux4_1<span class="token punctuation">:</span><span class="token keyword">PROCESS</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>s<span class="token punctuation">)</span>    <span class="token keyword">BEGIN</span>        <span class="token keyword">CASE</span> s <span class="token keyword">IS</span>            <span class="token keyword">WHEN</span><span class="token vhdl-vectors number">"00"</span><span class="token operator">=</span><span class="token operator">&gt;</span> x<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>            <span class="token keyword">WHEN</span><span class="token vhdl-vectors number">"01"</span><span class="token operator">=</span><span class="token operator">&gt;</span> x<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>            <span class="token keyword">WHEN</span><span class="token vhdl-vectors number">"10"</span><span class="token operator">=</span><span class="token operator">&gt;</span> x<span class="token operator">&lt;=</span>c<span class="token punctuation">;</span>            <span class="token keyword">WHEN</span> <span class="token keyword">OTHERS</span><span class="token operator">=</span><span class="token operator">&gt;</span> x<span class="token operator">&lt;=</span>d<span class="token punctuation">;</span>        <span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">PROCESS</span> mux4_1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token comment">---变量声明</span><span class="token keyword">VARIABLE</span> tmp<span class="token punctuation">:</span> Bit<span class="token punctuation">;</span><span class="token comment">---整体赋值</span>temp<span class="token operator">:=</span><span class="token vhdl-vectors number">"1010101010"</span><span class="token punctuation">;</span>temp<span class="token operator">:=</span><span class="token vhdl-vectors number">x"AA"</span><span class="token punctuation">;</span><span class="token comment">---逐位赋值</span><span class="token function">temp</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">:=</span><span class="token number">'1'</span><span class="token punctuation">;</span><span class="token comment">---多位赋值</span><span class="token function">temp</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">:=</span><span class="token vhdl-vectors number">"1010"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl">IBRARY ieee<span class="token punctuation">;</span><span class="token constant">USE</span> ieee<span class="token punctuation">.</span>std_logic_1164<span class="token punctuation">.</span><span class="token keyword">ALL</span><span class="token punctuation">;</span>   <span class="token keyword">ENTITY</span> zuhe <span class="token keyword">IS</span>                     <span class="token keyword">PORT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">:</span><span class="token keyword">IN</span> STD_LOGIC<span class="token punctuation">;</span>        g<span class="token punctuation">:</span><span class="token keyword">OUT</span> STD_LOGIC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span> zuhe<span class="token punctuation">;</span><span class="token keyword">ARCHITECTURE</span> one <span class="token keyword">OF</span> zuhe <span class="token keyword">IS</span>     <span class="token keyword">SIGNAL</span> e<span class="token punctuation">,</span>f<span class="token punctuation">:</span>Std_Logic<span class="token punctuation">;</span>      <span class="token comment">--信号全局声明</span> <span class="token keyword">BEGIN</span>    e<span class="token operator">&lt;=</span>a <span class="token operator">OR</span> b<span class="token punctuation">;</span>    f<span class="token operator">&lt;=</span><span class="token function">NOT</span><span class="token punctuation">(</span>c <span class="token operator">OR</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    g<span class="token operator">&lt;=</span>e <span class="token operator">AND</span> f<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> VHDL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VHDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode优雅配置LaTeX</title>
      <link href="2020/07/11/vscode-you-ya-pei-zhi-latex/"/>
      <url>2020/07/11/vscode-you-ya-pei-zhi-latex/</url>
      
        <content type="html"><![CDATA[<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ol><li><ul><li><a href="https://blog.eatgrape.top/2020/07/02/LaTeX%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html">TeXlive安装</a></li></ul></li><li><ul><li><a href="https://code.visualstudio.com/">VSCode安装</a></li></ul></li></ol><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><ol><li>在VSCode插件商店中下载LaTex Workshop插件。</li><li>使用ctrl+shift+p快捷键搜索Preferences: Open Settings(JSON)。打开的json文件即是VSCode的配置文件，可能在之前配置过python等其他语言，这次LaTeX配置只需要在末尾追加并保存：<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"latex-workshop.latex.recipes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"xelatex"</span><span class="token punctuation">,</span>          <span class="token property">"tools"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token string">"xelatex"</span>         <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"xe*2"</span><span class="token punctuation">,</span>          <span class="token property">"tools"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token string">"xelatex"</span><span class="token punctuation">,</span>              <span class="token string">"xelatex"</span>         <span class="token punctuation">]</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"xelatex -&gt; bibtex -&gt; xelatex*2"</span><span class="token punctuation">,</span>        <span class="token property">"tools"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"xelatex"</span><span class="token punctuation">,</span>            <span class="token string">"bibtex"</span><span class="token punctuation">,</span>            <span class="token string">"xelatex"</span><span class="token punctuation">,</span>            <span class="token string">"xelatex"</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"latex-workshop.latex.tools"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"latexmk"</span><span class="token punctuation">,</span>      <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"latexmk"</span><span class="token punctuation">,</span>      <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"-synctex=1"</span><span class="token punctuation">,</span>        <span class="token string">"-interaction=nonstopmode"</span><span class="token punctuation">,</span>        <span class="token string">"-file-line-error"</span><span class="token punctuation">,</span>        <span class="token string">"-pdf"</span><span class="token punctuation">,</span>        <span class="token string">"%DOC%"</span>      <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"xelatex"</span><span class="token punctuation">,</span>      <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"xelatex"</span><span class="token punctuation">,</span>      <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"-synctex=1"</span><span class="token punctuation">,</span>        <span class="token string">"-interaction=nonstopmode"</span><span class="token punctuation">,</span>        <span class="token string">"-file-line-error"</span><span class="token punctuation">,</span>        <span class="token string">"%DOC%"</span>      <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"pdflatex"</span><span class="token punctuation">,</span>      <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"pdflatex"</span><span class="token punctuation">,</span>      <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"-synctex=1"</span><span class="token punctuation">,</span>        <span class="token string">"-interaction=nonstopmode"</span><span class="token punctuation">,</span>        <span class="token string">"-file-line-error"</span><span class="token punctuation">,</span>        <span class="token string">"%DOC%"</span>      <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"bibtex"</span><span class="token punctuation">,</span>      <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"bibtex"</span><span class="token punctuation">,</span>      <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"%DOCFILE%"</span>      <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"latex-workshop.view.pdf.viewer"</span><span class="token operator">:</span> <span class="token string">"tab"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>创建一个如下内容的.tex文件测试：<pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\documentclass[letterpaper,11pt]{article} \usepackage{latexsym}\usepackage[empty]{fullpage}\usepackage{titlesec}\usepackage{marvosym}\usepackage[usenames,dvipsnames]{color}\usepackage{verbatim}\usepackage{enumitem}\usepackage[hidelinks]{hyperref}\usepackage{fancyhdr}\usepackage[english]{babel}\usepackage{tabularx}\usepackage[UTF8]{ctex} \begin{document}\textbf{hello world 2020!}\end{document}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>按如下过程，编译运行。<center>![](https://github.com/Petr-Chan/tuchuang/raw/master/VSCode_Latex.png) </center></li></ol><ol><li>结果展示：<center>![](https://github.com/Petr-Chan/tuchuang/raw/master/VSCode_LaTex1.png) </center></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>1.<a href="https://blog.csdn.net/GodWriter/article/details/99829734">https://blog.csdn.net/GodWriter/article/details/99829734</a><br>2.<a href="https://blog.csdn.net/yyhaohaoxuexi/article/details/86520926">https://blog.csdn.net/yyhaohaoxuexi/article/details/86520926</a></p>]]></content>
      
      
      <categories>
          
          <category> LaTeX </category>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTex </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫实战--当当网</title>
      <link href="2020/07/10/python/scrapy-pa-chong-shi-zhan-dang-dang-wang/"/>
      <url>2020/07/10/python/scrapy-pa-chong-shi-zhan-dang-dang-wang/</url>
      
        <content type="html"><![CDATA[<p>看完Scrapy的概述，我们大概对Scrapy这个爬虫框架有了一个大致的了解。下面就通过爬取当当网python书籍信息来对Scrapy这个框架做一个实战。</p><ol><li>创建一个项目文件夹，并打开终端cd到创建文件夹处。在该目录下，在终端输入：<pre class="line-numbers language-none"><code class="language-none">scrapy startproject (爬虫项目名)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>   通过执行这条命令，便会在当前文件夹下创建Scrapy的大致模板了。</li></ol><hr><ol><li>进入工程文件夹，在终端输入：<pre class="line-numbers language-none"><code class="language-none">scrapy genspider (爬虫py的名字) （爬取的范围）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><ol><li>在items.py中添加item项。<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Define here the models for your scraped items</span><span class="token comment">#</span><span class="token comment"># See documentation in:</span><span class="token comment"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token comment">#导入第三方库scrapy</span><span class="token keyword">import</span> scrapy<span class="token comment">#定义有关需要爬取的数据的类DdpythonItem（当当pythonItem）</span><span class="token keyword">class</span> <span class="token class-name">DdpythonItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># define the fields for your item here like:</span>    <span class="token comment"># name = scrapy.Field()</span>    name<span class="token operator">=</span>scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment">#书名</span>    author<span class="token operator">=</span>scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment">#作者</span>    introduction<span class="token operator">=</span>scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">#简介</span>    price<span class="token operator">=</span>scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">#价格</span>    press<span class="token operator">=</span>scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">#出版社</span>    time<span class="token operator">=</span>scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment">#出版时间</span>    comment_num<span class="token operator">=</span>scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">#评价数目</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><ol><li>进入前面生成的爬虫py文件中，进行爬取方法的定义。<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># 导入第三方库scrapy以及自定义库items中的Item类DdpythonItem</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>items <span class="token keyword">import</span> DdpythonItem<span class="token comment"># 定义爬虫类DdSpider（当当Spider），爬虫名字命名为dd</span><span class="token keyword">class</span> <span class="token class-name">DdSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'dd'</span>    <span class="token comment"># 爬取的网站为当当网，开始的url为'http://search.dangdang.com/?key=python'（python类图书界面）</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'dangdang.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://search.dangdang.com/?key=python'</span><span class="token punctuation">]</span>    <span class="token comment"># 定义解析response对象的方法</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 使用 XPath 从页面的HTML源码中选择需要提取的数据</span>        <span class="token comment"># 根据对HTML源码的观察，设置XPath解析规则提取出所有书籍信息books</span>        books <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@class="bigimg"]/li'</span><span class="token punctuation">)</span>        <span class="token comment"># 对提取到的所有图书信息进行遍历，提取每一本书的相关信息</span>        <span class="token keyword">for</span> book <span class="token keyword">in</span> books<span class="token punctuation">:</span>            item <span class="token operator">=</span> DdpythonItem<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># 生成一个Item对象，用于存储提取到的信息</span>            item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> book<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a[@class="pic"]/@title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'introduction'</span><span class="token punctuation">]</span> <span class="token operator">=</span> book<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p[@class="detail"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p[@class="detail"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">'无介绍信息'</span>            item<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span> <span class="token operator">=</span> book<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p/span[1]/a[1]/@title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p/span[1]/a[1]/@title'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">'无作者信息'</span>            item<span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span> <span class="token operator">=</span> book<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p/span[@class="search_now_price"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'press'</span><span class="token punctuation">]</span> <span class="token operator">=</span> book<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p/span[3]/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p/span[3]/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">'无出版社信息'</span>            item<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> book<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p[5]/span[2]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p[5]/span[2]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">'无出版时间信息'</span>            item<span class="token punctuation">[</span><span class="token string">'comment_num'</span><span class="token punctuation">]</span> <span class="token operator">=</span> book<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p[@class="search_star_line"]/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 将提取到的数据提交给pipelines进行保存输出</span>            <span class="token keyword">yield</span> item        <span class="token comment"># 设置爬取的页面数pageNum，爬取10个页面的python图书信息</span>        pageNum <span class="token operator">=</span> <span class="token number">10</span>        <span class="token comment"># 根据url的规则进行构建新的url，即page，将page提交给scrapy engine进行处理</span>        <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> pageNum<span class="token punctuation">)</span><span class="token punctuation">:</span>            page <span class="token operator">=</span> <span class="token string">'http://search.dangdang.com/?key=python&amp;page_index={}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>            <span class="token comment"># 对页面page提交request请求，利用自定义的解析方法parse对获取到的页面进行解析</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>page<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><ol><li>在pipelines.py文件中，将item中提取的数据保存下来。<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Define your item pipelines here</span><span class="token comment">#</span><span class="token comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment"># 导入第三方库pymysql，用于对MySQL数据库进行处理</span><span class="token keyword">import</span> pymysql<span class="token comment"># 定义用于输出数据到MySQL数据库的Pipeline类DdpythonPipeline</span><span class="token keyword">class</span> <span class="token class-name">DdpythonPipeline</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 定义处理item对象的方法process_item</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 通过pymysql对本地数据库进行连接，并且指定连接的数据库为“dd”</span>        db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"Localhost"</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">"cpt200406"</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">"dd"</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>        cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 获取db的游标对象，用于对事务进行处理</span>        <span class="token comment"># 根据提取的数据进行再次处理加工，转换成最终存储到数据库中的类型</span>        name <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        introduction<span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token string">"introduction"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        author<span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        price <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"price"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'¥'</span><span class="token punctuation">)</span>     <span class="token comment"># 删除价格前面的货币符￥</span>        press <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"press"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        time <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"time"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>   <span class="token comment"># 删除时间前面的‘/’</span>        comment_num<span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token string">"comment_num"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'条评论'</span><span class="token punctuation">)</span><span class="token comment"># 删除原始数据中的汉字‘条评论’</span>        <span class="token comment"># 对数据库进行插入操作，将提取到的item对象中的数据插入到dd数据库的ddpython数据表中</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'INSERT INTO ddpython(book_name,introduction,author,price,press,publication_time,comment_num) VALUES (%s,%s,%s,%s,%s,%s,%s)'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>introduction<span class="token punctuation">,</span>author<span class="token punctuation">,</span>price<span class="token punctuation">,</span>press<span class="token punctuation">,</span>time<span class="token punctuation">,</span>comment_num<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 对事务操作进行提交</span>        db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 关闭游标对象cursor以及数据库对象db</span>        cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 返回item对象</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><ol><li>在settings.py中,将pipelines的配置打开<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Scrapy settings for DDPython project</span><span class="token comment">#</span><span class="token comment"># For simplicity, this file contains only settings considered important or</span><span class="token comment"># commonly used. You can find more settings consulting the documentation:</span><span class="token comment">#</span><span class="token comment">#     https://docs.scrapy.org/en/latest/topics/settings.html</span><span class="token comment">#     https://docs.scrapy.org/en/latest/topics/downloader-middleware.html</span><span class="token comment">#     https://docs.scrapy.org/en/latest/topics/spider-middleware.html</span>BOT_NAME <span class="token operator">=</span> <span class="token string">'DDPython'</span>SPIDER_MODULES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'DDPython.spiders'</span><span class="token punctuation">]</span>NEWSPIDER_MODULE <span class="token operator">=</span> <span class="token string">'DDPython.spiders'</span><span class="token comment"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span><span class="token comment">#USER_AGENT = 'DDPython (+http://www.yourdomain.com)'</span><span class="token comment"># Obey robots.txt rules</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span><span class="token comment">#CONCURRENT_REQUESTS = 32</span><span class="token comment"># Configure a delay for requests for the same website (default: 0)</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/settings.html#download-delay</span><span class="token comment"># See also autothrottle settings and docs</span><span class="token comment">#DOWNLOAD_DELAY = 3</span><span class="token comment"># The download delay setting will honor only one of:</span><span class="token comment">#CONCURRENT_REQUESTS_PER_DOMAIN = 16</span><span class="token comment">#CONCURRENT_REQUESTS_PER_IP = 16</span><span class="token comment"># Disable cookies (enabled by default)</span><span class="token comment">#COOKIES_ENABLED = False</span><span class="token comment"># Disable Telnet Console (enabled by default)</span><span class="token comment">#TELNETCONSOLE_ENABLED = False</span><span class="token comment"># Override the default request headers:</span><span class="token comment">#DEFAULT_REQUEST_HEADERS = {</span><span class="token comment">#   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',</span><span class="token comment">#   'Accept-Language': 'en',</span><span class="token comment">#}</span><span class="token comment"># Enable or disable spider middlewares</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/spider-middleware.html</span><span class="token comment">#SPIDER_MIDDLEWARES = {</span><span class="token comment">#    'DDPython.middlewares.DdpythonSpiderMiddleware': 543,</span><span class="token comment">#}</span><span class="token comment"># Enable or disable downloader middlewares</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html</span><span class="token comment">#DOWNLOADER_MIDDLEWARES = {</span><span class="token comment">#    'DDPython.middlewares.DdpythonDownloaderMiddleware': 543,</span><span class="token comment">#}</span><span class="token comment"># Enable or disable extensions</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/extensions.html</span><span class="token comment">#EXTENSIONS = {</span><span class="token comment">#    'scrapy.extensions.telnet.TelnetConsole': None,</span><span class="token comment">#}</span><span class="token comment"># Configure item pipelines</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'DDPython.pipelines.DdpythonPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment"># Enable and configure the AutoThrottle extension (disabled by default)</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/autothrottle.html</span><span class="token comment">#AUTOTHROTTLE_ENABLED = True</span><span class="token comment"># The initial download delay</span><span class="token comment">#AUTOTHROTTLE_START_DELAY = 5</span><span class="token comment"># The maximum download delay to be set in case of high latencies</span><span class="token comment">#AUTOTHROTTLE_MAX_DELAY = 60</span><span class="token comment"># The average number of requests Scrapy should be sending in parallel to</span><span class="token comment"># each remote server</span><span class="token comment">#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span><span class="token comment"># Enable showing throttling stats for every response received:</span><span class="token comment">#AUTOTHROTTLE_DEBUG = False</span><span class="token comment"># Enable and configure HTTP caching (disabled by default)</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span><span class="token comment">#HTTPCACHE_ENABLED = True</span><span class="token comment">#HTTPCACHE_EXPIRATION_SECS = 0</span><span class="token comment">#HTTPCACHE_DIR = 'httpcache'</span><span class="token comment">#HTTPCACHE_IGNORE_HTTP_CODES = []</span><span class="token comment">#HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><ol><li>进入工作目录文件夹，输入以下命令启动爬虫：<pre class="line-numbers language-none"><code class="language-none">scrapy crawl (爬虫名)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫简介</title>
      <link href="2020/07/08/python/scrapy-pa-chong-jian-jie/"/>
      <url>2020/07/08/python/scrapy-pa-chong-jian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://github.com/Petr-Chan/tuchuang/raw/master/Scrapy_processing.png" alt="img"></p><p>1.Spiders(爬虫):它负责处理所有Responses,从中分析提取数据，获取Item字段需要的数据，并将需要跟进的URL提交给引擎，再次进入Scheduler(调度器)</p><p>2.Engine(引擎)：负责Spider、ItemPipeline、Downloader、Scheduler中间的通讯，信号、数据传递等。</p><p>3.Scheduler(调度器)：它负责接受引擎发送过来的Request请求，并按照一定的方式进行整理排列，入队，当引擎需要时，交还给引擎。</p><p>4.Downloader(下载器)：负责下载Scrapy Engine(引擎)发送的所有Requests请求，并将其获取到的Responses交还给Scrapy Engine(引擎)，由引擎交给Spider来处理</p><p>5.ItemPipeline(管道):它负责处理Spider中获取到的Item，并进行进行后期处理（详细分析、过滤、存储等）的地方.</p><p>6.Downloader Middlewares（下载中间件）：你可以当作是一个可以自定义扩展下载功能的组件。</p><p>7.Spider Middlewares（Spider中间件）：你可以理解为是一个可以自定扩展和操作引擎和Spider中间通信的功能组件（比如进入Spider的Responses;和从Spider出去的Requests）</p><p><img src="https://github.com/Petr-Chan/tuchuang/raw/master/Scrapy_struct.png" alt=""></p><h2 id="入门使用"><a href="#入门使用" class="headerlink" title="入门使用"></a>入门使用</h2><h3 id="创建过程："><a href="#创建过程：" class="headerlink" title="创建过程："></a>创建过程：</h3><p><img src="https://github.com/Petr-Chan/tuchuang/raw/master/Scrapy_way.png" alt=""></p><hr><h3 id="结构："><a href="#结构：" class="headerlink" title="结构："></a>结构：</h3><p><img src="https://github.com/Petr-Chan/tuchuang/raw/master/Scrapt_file.png" alt=""></p><hr><h3 id="spider使用："><a href="#spider使用：" class="headerlink" title="spider使用："></a>spider使用：</h3><p><img src="https://github.com/Petr-Chan/tuchuang/raw/master/Scrapy_spider.png" alt=""></p><hr><h3 id="pipeline更改和使用："><a href="#pipeline更改和使用：" class="headerlink" title="pipeline更改和使用："></a>pipeline更改和使用：</h3><p><img src="https://github.com/Petr-Chan/tuchuang/raw/master/Scrapy_pipeline_1.png" alt=""></p><p><img src="https://github.com/Petr-Chan/tuchuang/raw/master/Scrapy_pipeline_2.png" alt=""></p><hr><h3 id="log简单设置："><a href="#log简单设置：" class="headerlink" title="log简单设置："></a>log简单设置：</h3><p><img src="https://github.com/Petr-Chan/tuchuang/raw/master/Scrapy_log.png" alt=""></p><hr><h3 id="翻页爬取方法："><a href="#翻页爬取方法：" class="headerlink" title="翻页爬取方法："></a>翻页爬取方法：</h3><p><img src="https://github.com/Petr-Chan/tuchuang/raw/master/Scrapy_turnpage.png" alt=""></p><p><img src="https://github.com/Petr-Chan/tuchuang/raw/master/Scrapy_turnpage1.png" alt=""></p><h3 id="item的设置："><a href="#item的设置：" class="headerlink" title="item的设置："></a>item的设置：</h3><p><img src="https://github.com/Petr-Chan/tuchuang/raw/master/Scrapy_item.png" alt=""></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.bilibili.com/video/BV1mf4y127S5#reply3147097466">https://www.bilibili.com/video/BV1mf4y127S5#reply3147097466</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX环境搭建</title>
      <link href="2020/07/02/latex-huan-jing-da-jian/"/>
      <url>2020/07/02/latex-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>工欲善其事，必先利其器。所以第一步当然是安装软件啦！主要安装的东西分为2部分：一部分是LaTex的编译器，另一部分则是LaTex的IDE环境，下面就开始我们的入门之旅吧！</p><h3 id="1-TeXlive安装"><a href="#1-TeXlive安装" class="headerlink" title="1).TeXlive安装"></a>1).TeXlive安装</h3><ul><li><p><a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive2020.iso">TeXlive镜像文件下载地址</a></p></li><li><p>下载完成后，使用虚拟光驱运行如下文件<img src="https://github.com/Petr-Chan/tuchuang/raw/master/Latex1.png" alt="Latex1"></p></li><li><p>然后根据自己的需求安装需要的包：<img src="https://github.com/Petr-Chan/tuchuang/raw/master/Latex2.png" alt="Latex2"></p></li><li><p>为了验证是否安装成功，可以进入Windows的命令行敲入如下命令。</p></li></ul><p><img src="https://github.com/Petr-Chan/tuchuang/raw/master/Latex3.png" alt="Latex3"></p><h3 id="2-IDE的安装"><a href="#2-IDE的安装" class="headerlink" title="2).IDE的安装"></a>2).IDE的安装</h3><p>① <a href="https://sourceforge.net/projects/texstudio/">TeXstudio下载地址</a></p><p>② <a href="http://www.tug.org/texworks/">TeXworks editor下载地址</a></p>]]></content>
      
      
      <categories>
          
          <category> LaTeX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java期末练习</title>
      <link href="2020/06/14/java/java-qi-mo-lian-xi/"/>
      <url>2020/06/14/java/java-qi-mo-lian-xi/</url>
      
        <content type="html"><![CDATA[<p>这期可能是关于Java的最后一期更新了！期末考试即将来临，老师终于官方的发题目啦！这让我倍感涕零。下面二话不说就抛代码了~</p><h3 id="题一（基本循环、选择语句）"><a href="#题一（基本循环、选择语句）" class="headerlink" title="题一（基本循环、选择语句）"></a>题一（基本循环、选择语句）</h3><p> 编写Demo.java，输出10～100以内既能被2整除，又能被3整除的整数，要求每行只能打印5个数。</p><h2 id=""><a href="#" class="headerlink" title=""></a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> agrs<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>count<span class="token operator">++</span><span class="token punctuation">;</span>s<span class="token operator">+=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">+=</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>s<span class="token operator">+=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">+=</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h3 id="题二（类变量与类方法操作）"><a href="#题二（类变量与类方法操作）" class="headerlink" title="题二（类变量与类方法操作）"></a>题二（类变量与类方法操作）</h3><p>  编写一汽车类Car，其具有以下属性：</p><p>品牌：brand，类型String；发动机排量:engineDisplacement, 类型：double；</p><p>速度：speed，类型double；状态：status，类型boolean；</p><p>最高时速：maxSpeed，类型double</p><p>Car的方法：</p><p>构造方法：Car(String brand, double engineDisplacement, double maxSpeed)</p><p>启动：start( )，该方法使得status值变为true；</p><p>加速：speedUp( )，当汽车处于启动状态时，每调用一次，速度增加5，但速度不高于最高时速；</p><p>减速：slowDown( )，当汽车处于启动状态时，每调用一次，速度减5，但速度不小于0；</p><p>熄火：stop( )，当speed为0时，将status值变为false。</p><p>每个方法除改变成员变量外，还要打印出方法执行后的状态和速度。</p><p>试完成Car类的实现，并且编写main方法，实例化一个Car对象，其中品牌为”宝马”，排量2.0，最高时速为160，依次执行启动该汽车，加速到120，再减速到0，最后熄火，要求显示各执行结果。</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> engineDisplacement<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> speed<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> status<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> maxSpeed<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">,</span> <span class="token keyword">double</span> engineDisplacement<span class="token punctuation">,</span><span class="token keyword">double</span> maxSpeed<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>brand<span class="token operator">=</span>brand<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>engineDisplacement<span class="token operator">=</span>engineDisplacement<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxSpeed<span class="token operator">=</span>maxSpeed<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Car构造函数执行后的status:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token operator">+</span><span class="token string">",speed:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start函数执行后的status:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token operator">+</span><span class="token string">",speed:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speedUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token operator">+</span><span class="token number">5</span><span class="token operator">&lt;=</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxSpeed<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token operator">+=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"speedUp函数执行后的status:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token operator">+</span><span class="token string">",speed:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">slowDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token operator">-</span><span class="token number">5</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token operator">-=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"slowDown函数执行后的status:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token operator">+</span><span class="token string">",speed:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stop函数执行后的status:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token operator">+</span><span class="token string">",speed:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Car</span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"宝马"</span><span class="token punctuation">,</span><span class="token number">2.0</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">24</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">speedUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">24</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">slowDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h3 id="题三（异常处理）"><a href="#题三（异常处理）" class="headerlink" title="题三（异常处理）"></a>题三（异常处理）</h3><p>编写一银行类Bank，其中存款余额：balance，要求：</p><p>(1)构造函数：Bank(int balance)；</p><p>(2)存款操作：deposit( )；</p><p>(3)取款操作：withdraw( )；</p><p>(4)获取余额：getBalance( )；</p><p>编写main函数，实例化Bank对象，初始给定存款100，存入50，打印余额，连续取款120，40，打印余额。要求用自定义异常处理方式解决余额不足的问题。</p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token operator">=</span>balance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">double</span> store<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token operator">+=</span>store<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> draw<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token operator">-</span>draw<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"余额不足！无法取出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token operator">-=</span>draw<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Bank</span> bk<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原账户余额："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bk<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bk<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"存入50元操作后余额："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bk<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bk<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"去除120元操作后余额："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bk<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bk<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"去除40元操作后余额："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bk<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h3 id="题四（GUI设计）"><a href="#题四（GUI设计）" class="headerlink" title="题四（GUI设计）"></a>题四（GUI设计）</h3><p> 利用Swing组件编写一个界面大小400×300像素的简易文本编辑器MyTextEditor，要求：</p><p>(1)程序启动后，多行文本输入框JTextArea中显示当前目录下myText.txt文件中原有内容，如果该文件不存在，则新建文件；</p><p>(2)保存(按钮)功能：将编辑器界面输入的内容写入myText.txt文件中保存；</p><p>(3)取消(按钮)功能：将文本框中内容清空；</p><p>(4)退出(按钮)功能：退出程序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTextEditor</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">{</span><span class="token comment">//成员变量</span><span class="token class-name">JButton</span> b1<span class="token punctuation">,</span>b2<span class="token punctuation">,</span>b3<span class="token punctuation">;</span><span class="token class-name">JTextArea</span> area<span class="token punctuation">;</span><span class="token class-name">String</span> text<span class="token punctuation">;</span><span class="token comment">//构造函数</span><span class="token class-name">MyTextEditor</span><span class="token punctuation">(</span><span class="token class-name">String</span> xTitle<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>xTitle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置标题</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置窗口大小</span><span class="token class-name">Container</span> c<span class="token operator">=</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获得容器</span>c<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置布局</span><span class="token class-name">JPanel</span> panel1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置输入框小容器</span>panel1<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token class-name">FlowLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>area<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>area<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">;</span>area<span class="token punctuation">.</span><span class="token function">setLineWrap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>panel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JPanel</span> panel2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置保存，取消，退出按钮</span>panel2<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token class-name">FlowLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"保存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b1<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置事件监督</span>b2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"取消"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b2<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b3<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>panel2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>panel2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>panel2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//小容器放入大容器中</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示许可</span><span class="token class-name">File</span> f<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"myText.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建File变量</span><span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//是否存在该目录，不存在创建</span><span class="token keyword">try</span><span class="token punctuation">{</span>f<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//读入txt中的文字</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">FileReader</span> fr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"myText.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> br<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> aline<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>br<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>aline<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>area<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>aline<span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//编写事件的接口方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>b1<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//若按下保存按钮</span><span class="token class-name">String</span> store<span class="token punctuation">;</span>store<span class="token operator">=</span>area<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得目前文本框中内容</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">//实现写入txt功能</span><span class="token class-name">FileWriter</span> fw<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"myText.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>b2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//按下取消按钮</span>area<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空文本框中内容</span>area<span class="token punctuation">.</span><span class="token function">setEditable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按下退出按钮，退出</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//测试main函数</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> agrs<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">MyTextEditor</span> m<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyTextEditor</span><span class="token punctuation">(</span><span class="token string">"MyTextEditor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Java的GUI设计</title>
      <link href="2020/06/13/java/java-de-gui-she-ji/"/>
      <url>2020/06/13/java/java-de-gui-she-ji/</url>
      
        <content type="html"><![CDATA[<p>在2020的今天，GUI，可能已经是大家耳熟能详的词了。所谓GUI即是用户界面，像我们的QQ，WeChat等等都是以用户界面的形式呈现在我们眼前的。而Java作为一种运用广泛的程序语言，自然在GUI设计上也有其独特之处。下面就以2道常规GUI题来实战一下吧！此次的题目以及代码是我们优秀的冯py同学投稿！大家慢慢欣赏哦！</p><hr><h3 id="题1"><a href="#题1" class="headerlink" title="题1"></a>题1</h3><p>创建一个可以移动、改变大小、最大化、且可以关闭的JFrame窗口，并且添加菜单和工具条；设计相应的菜单加速键以及快捷键图标。</p><h2 id=""><a href="#" class="headerlink" title=""></a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">{</span><span class="token comment">//定义菜单</span>    <span class="token class-name">JMenuBar</span> mb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//工具栏对象</span>    <span class="token class-name">JToolBar</span> mtb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JToolBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JMenu</span> mFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">"文件(F)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JMenuItem</span> miNew<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"新建(N)"</span><span class="token punctuation">,</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_N<span class="token punctuation">)</span><span class="token punctuation">,</span>            miOpen<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"打开(O)..."</span><span class="token punctuation">,</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_O<span class="token punctuation">)</span><span class="token punctuation">,</span>            miSave<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"保存(S)"</span><span class="token punctuation">,</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_S<span class="token punctuation">)</span><span class="token punctuation">,</span>            miFont<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"字体与颜色(F)..."</span><span class="token punctuation">,</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_F<span class="token punctuation">)</span><span class="token punctuation">,</span>            miQuit<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">"退出(X)"</span><span class="token punctuation">,</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_X<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//菜单选项</span>            <span class="token comment">//构造函数</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> sTitle<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>sTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加组件</span>        <span class="token function">addMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置窗口大小</span>        <span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置close按钮操作</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置工具栏</span>        <span class="token function">addToolBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置输入框</span>        <span class="token function">addTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加按钮</span>        <span class="token function">addButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//添加菜单</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setJMenuBar</span><span class="token punctuation">(</span>mb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置快捷键</span>        miNew<span class="token punctuation">.</span><span class="token function">setAccelerator</span><span class="token punctuation">(</span><span class="token class-name">KeyStroke</span><span class="token punctuation">.</span><span class="token function">getKeyStroke</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_N<span class="token punctuation">,</span><span class="token class-name">InputEvent</span><span class="token punctuation">.</span>CTRL_DOWN_MASK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        miOpen<span class="token punctuation">.</span><span class="token function">setAccelerator</span><span class="token punctuation">(</span><span class="token class-name">KeyStroke</span><span class="token punctuation">.</span><span class="token function">getKeyStroke</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_O<span class="token punctuation">,</span><span class="token class-name">InputEvent</span><span class="token punctuation">.</span>CTRL_DOWN_MASK<span class="token operator">|</span><span class="token class-name">InputEvent</span><span class="token punctuation">.</span>SHIFT_DOWN_MASK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mFile<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>miNew<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//新建</span>        mFile<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>miOpen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//打开</span>        mFile<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>miSave<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//保存</span>        mFile<span class="token punctuation">.</span><span class="token function">addSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//分割线</span>        mFile<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>miFont<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//字体和颜色</span>        mFile<span class="token punctuation">.</span><span class="token function">addSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//分割线</span>        mFile<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>miQuit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//退出</span>        mb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*//改变窗口坐标        Toolkit tk = getToolkit();//得到一个Toolkit对象        Image icon = tk.getImage("online.gif");        setIconImage(icon);*/</span>    <span class="token punctuation">}</span>            <span class="token comment">//添加工具条</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addToolBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//工具条</span>        <span class="token class-name">Container</span> c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">,</span>mtb<span class="token punctuation">)</span><span class="token punctuation">;</span>                mtb<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token class-name">FlowLayout</span><span class="token punctuation">.</span>LEFT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FgButton</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> btn <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">FgButton</span><span class="token punctuation">(</span><span class="token string">"新建文件"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">FgButton</span><span class="token punctuation">(</span><span class="token string">"打开文件"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">FgButton</span><span class="token punctuation">(</span><span class="token string">"保存文件"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btn<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                btn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span><span class="token class-name">BorderFactory</span><span class="token punctuation">.</span><span class="token function">createEmptyBorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mtb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//设置不可以浮动</span>        mtb<span class="token punctuation">.</span><span class="token function">setFloatable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//添加标签和输入框</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Container</span> c <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"用户名："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"密   码 ："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JPasswordField</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//按钮添加</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Container</span> c<span class="token operator">=</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JButton</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"登入"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ic<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//测试函数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建窗口对象</span>        test frm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//显示窗口</span>        frm<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">//自定义按钮</span><span class="token keyword">class</span> <span class="token class-name">FgButton</span> <span class="token keyword">extends</span> <span class="token class-name">JButton</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">FgButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//Icon对象用来引入图片</span>        <span class="token keyword">public</span> <span class="token class-name">FgButton</span><span class="token punctuation">(</span><span class="token class-name">Icon</span> icon<span class="token punctuation">,</span><span class="token class-name">String</span> strToolTipText<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setToolTipText</span><span class="token punctuation">(</span>strToolTipText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">FgButton</span><span class="token punctuation">(</span><span class="token class-name">String</span> strToolTipText<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">setToolTipText</span><span class="token punctuation">(</span>strToolTipText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h3 id="题2"><a href="#题2" class="headerlink" title="题2"></a>题2</h3><p>设计编写登录窗口，该应用程序维护一张记录合法用户名和密码的列表；只有合法的用户才能通过登录程序；需要实现：1）最多尝试3次；2）登录成功推出登录窗口；3）用户名或密码为空时，提示信息；4）用户名和密码错误时，清空密码，并将用户名选中；5）居中显示窗口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTextField</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">{</span><span class="token class-name">JTextField</span> t0<span class="token punctuation">,</span>t1<span class="token punctuation">;</span><span class="token class-name">JButton</span> jb<span class="token punctuation">;</span><span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造函数</span><span class="token keyword">public</span> <span class="token class-name">TestTextField</span><span class="token punctuation">(</span><span class="token class-name">String</span> xTitle<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>xTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//为窗口设置名字</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置窗口大小</span><span class="token class-name">Container</span> c<span class="token operator">=</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获得窗口容器</span>c<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 为容器设置布局</span><span class="token comment">//用户名panel</span><span class="token class-name">JPanel</span> panel1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建小容器</span>panel1<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token class-name">FlowLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置小容器的布局</span>panel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"用户名:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加标签</span>t0<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>panel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加输入框</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把小容器放到大容器中</span><span class="token comment">//密码panel</span><span class="token class-name">JPanel</span> panel2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建小容器</span>panel2<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token class-name">FlowLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置小容器的布局</span>panel2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"密    码:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加标签</span>t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPasswordField</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>panel2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加输入框</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把小容器放到大容器中</span><span class="token comment">//登录按钮panel</span><span class="token class-name">JPanel</span> panel3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建小容器</span>panel3<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token class-name">FlowLayout</span><span class="token punctuation">.</span>RIGHT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置小容器的布局</span>jb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jb<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注册监听者</span>panel3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jb<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//添加按钮</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把小容器放到大容器中</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置可见</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cpt"</span><span class="token punctuation">,</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//列表初始化</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fpy"</span><span class="token punctuation">,</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//接口函数实现</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>count<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//测试次数减一</span><span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//若尝试次数超过3次</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你没机会了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">String</span> name<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">int</span> password<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">//获得用户输入</span>name<span class="token operator">=</span>t0<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>password<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">String</span> message<span class="token operator">=</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用户名检验</span><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>message<span class="token punctuation">,</span><span class="token string">"信息提示"</span><span class="token punctuation">,</span><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span>INFORMATION_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出提示框</span><span class="token punctuation">}</span><span class="token comment">//检验用户函数</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//使用Map内部接口Entry进行迭代</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> entry<span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">String</span> key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token string">"用户名或密码为空,还有"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"次机会"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>password <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    t1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token string">"密码错误,还有"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"次机会"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        t1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空密码</span>        <span class="token keyword">return</span> <span class="token string">"用户名是非法的,还有"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"次机会"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//测试函数</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">TestTextField</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TestTextField</span><span class="token punctuation">(</span><span class="token string">"登入界面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大致效果是酱紫哒！</p><p></p><div align="center"><img src="https://github.com/Petr-Chan/tuchuang/raw/master/java_GUI.png" alt="最终效果"><p></p></div>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用类实战</title>
      <link href="2020/06/05/java/java-chang-yong-lei-shi-zhan/"/>
      <url>2020/06/05/java/java-chang-yong-lei-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h2><p>题：假设52张扑克牌（去掉大小王），实现随机洗牌操作，为参加游戏的人每人生成一手牌，每手牌的牌数是指定的，并将每个人分到的牌按花色排序后输出。</p><h2 id=""><a href="#" class="headerlink" title=""></a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDealCard</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> numHands<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> cardsPerHand<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> suit<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"♠"</span><span class="token punctuation">,</span><span class="token string">"♣"</span><span class="token punctuation">,</span><span class="token string">"♥"</span><span class="token punctuation">,</span><span class="token string">"♦"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rank<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token string">"9"</span><span class="token punctuation">,</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token string">"J"</span><span class="token punctuation">,</span><span class="token string">"Q"</span><span class="token punctuation">,</span><span class="token string">"K"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">List</span> deck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>suit<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>rank<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>deck<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>suit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>rank<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>deck<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numHands<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">List</span> p<span class="token operator">=</span><span class="token function">dealCard</span><span class="token punctuation">(</span>deck<span class="token punctuation">,</span> cardsPerHand<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deck<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span> <span class="token function">dealCard</span><span class="token punctuation">(</span><span class="token class-name">List</span> deck<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> deckSize<span class="token operator">=</span>deck<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span> handView<span class="token operator">=</span>deck<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>deckSize<span class="token operator">-</span>n<span class="token punctuation">,</span> deckSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span> hand<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>handView<span class="token punctuation">)</span><span class="token punctuation">;</span>handView<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> hand<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h2 id="LinkList类"><a href="#LinkList类" class="headerlink" title="LinkList类"></a>LinkList类</h2><p>题：用LinkList写一个Stack的数据结构测试。</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStack</span> <span class="token punctuation">{</span><span class="token comment">//创建链表linkList</span><span class="token class-name">LinkedList</span> linkList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>linkList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>linkList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> linkList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> linkList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>linkList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> linkList<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">"栈内无数"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">TestStack</span> myStack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TestStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h2 id="Vector类"><a href="#Vector类" class="headerlink" title="Vector类"></a>Vector类</h2><p>题：写一个简单的Vector测试。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestVector</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Vector</span> v<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"J"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"J"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"J"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> size<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Size:"</span><span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题：演示一个简单的学生信息管理：利用向量记录实现学生管理，能支持学生对象的增加、删除操作，每个学生对象包括学号，性别，姓名。删除学生必须输入学生的学号。可以设计一个操作菜单，包括增加，删除，显示以及退出4项。</p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">long</span> stno<span class="token punctuation">;</span><span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">long</span> stno<span class="token punctuation">,</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>stno<span class="token operator">=</span>stno<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"姓名:"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",学号:"</span><span class="token operator">+</span>stno<span class="token operator">+</span><span class="token string">",性别:"</span><span class="token operator">+</span>sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> group<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outer<span class="token operator">:</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> ch<span class="token operator">=</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"选择：1--增加，2--删除，3--显示，4--退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> choice<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">inputStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token keyword">long</span> stno<span class="token operator">=</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"请输入学号:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>group<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Student</span> x<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span>group<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>stno<span class="token operator">==</span>stno<span class="token punctuation">)</span>group<span class="token punctuation">.</span><span class="token function">removeElement</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token comment">//迭代输出Vector存储</span><span class="token class-name">Iterator</span> p<span class="token operator">=</span>group<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==&gt;"</span><span class="token operator">+</span>p<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token keyword">break</span> outer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token class-name">String</span> hint<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> x<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">//字符串输入</span><span class="token class-name">BufferedReader</span> br<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hint<span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Student</span> <span class="token function">inputStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token operator">=</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"请输入姓名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> stno<span class="token operator">=</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"请输入学号:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> sex<span class="token operator">=</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"请输入性别:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>stno<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h2 id="Map类"><a href="#Map类" class="headerlink" title="Map类"></a>Map类</h2><p>题：写一个测试映射集合的代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTreeMap</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Map</span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span> iter<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> key<span class="token operator">=</span>iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tab key"</span><span class="token operator">+</span>key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"value="</span><span class="token operator">+</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">TreeMap</span> tab<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tab<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tab<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tab<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tab<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span> iter2<span class="token operator">=</span>tab<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iter2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> key<span class="token operator">=</span>iter2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map key"</span><span class="token operator">+</span>key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"value="</span><span class="token operator">+</span>tab<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorBoard实战</title>
      <link href="2020/06/05/python/tensorboardrs/"/>
      <url>2020/06/05/python/tensorboardrs/</url>
      
        <content type="html"><![CDATA[<p>今天我们来介绍一款机器学习中很实用的工具：TensorBoard。它之所以实用，主要是因为它将机器学习这一个类似黑盒的东西可视化出来，让用户对训练过程有一个更好的理解。下面就基于MNIST数据集来实战一下TensorBoard的使用方法。</p><hr><h2 id="TensorBoard可视化MNIST分类代码"><a href="#TensorBoard可视化MNIST分类代码" class="headerlink" title="TensorBoard可视化MNIST分类代码"></a>TensorBoard可视化MNIST分类代码</h2><h2 id=""><a href="#" class="headerlink" title=""></a><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Input<span class="token punctuation">,</span> Dense<span class="token punctuation">,</span> Dropout<span class="token punctuation">,</span> Activation<span class="token punctuation">,</span> Conv2D<span class="token punctuation">,</span> MaxPool2D<span class="token punctuation">,</span> Flatten<span class="token keyword">from</span> keras<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> mnist<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Model<span class="token keyword">from</span> keras<span class="token punctuation">.</span>utils <span class="token keyword">import</span> to_categorical<span class="token keyword">from</span> keras<span class="token punctuation">.</span>callbacks <span class="token keyword">import</span> TensorBoard<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#数据集处理</span>    <span class="token comment"># (X_train, y_train), (X_test, y_test) = mnist.load_data() # 使用keras导入数据集</span>    data <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'mnist.npz'</span><span class="token punctuation">)</span>    x_train<span class="token punctuation">,</span> y_train <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'x_train'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'y_train'</span><span class="token punctuation">]</span>    x_test<span class="token punctuation">,</span> y_test <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'x_test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'y_test'</span><span class="token punctuation">]</span>    x_train <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    x_test <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    y_train<span class="token operator">=</span>to_categorical<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    y_test<span class="token operator">=</span>to_categorical<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment">#参数配置</span>    batch_size <span class="token operator">=</span><span class="token number">128</span>    epoch <span class="token operator">=</span> <span class="token number">10</span>    <span class="token comment"># 模型搭建</span>    inputs <span class="token operator">=</span> Input<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span> <span class="token punctuation">)</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>    x <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    x <span class="token operator">=</span> MaxPool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    x <span class="token operator">=</span> Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    x <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    x <span class="token operator">=</span> Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    x <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    model <span class="token operator">=</span> Model<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token comment">#模型编译</span>    model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'categorical_crossentropy'</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span>metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'acc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#面板配置</span>    Tensorboard <span class="token operator">=</span> TensorBoard<span class="token punctuation">(</span>log_dir<span class="token operator">=</span><span class="token string">'.\model'</span><span class="token punctuation">,</span> histogram_freq<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> write_grads<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment">#log_dir保存目录</span><span class="token comment">#模型训练</span>    result <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> epochs<span class="token operator">=</span>epoch<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> validation_split<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>callbacks<span class="token operator">=</span><span class="token punctuation">[</span>Tensorboard<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#在回调函数中加入TensorBoard！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h2 id="TensorBoard启动"><a href="#TensorBoard启动" class="headerlink" title="TensorBoard启动"></a>TensorBoard启动</h2><p>实际上，训练信息已经保存在TensorBoard配置的目录中了。下面进入当前*.py目录下的PowerShell，敲入</p><pre class="line-numbers language-none"><code class="language-none">tensorboard --logdir= XXX（前文中的model）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PowerShell会反馈一个本地6006端口开放的提示信息。此时打开浏览器输入</p><pre class="line-numbers language-none"><code class="language-none">http://localhost:6006<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就成功进入TensorBoard界面啦！</p><h2 id="TensorBoard配置"><a href="#TensorBoard配置" class="headerlink" title="TensorBoard配置"></a>TensorBoard配置</h2><p>我们上述实战例子中，我们只能够看到Loss和Acc的训练曲线，而其他信息是没有保存下来的。但世界上TensorBoard的可视化功能非常强大，目前可以支持一下7种可视化类别：</p><ol><li>SCALARS：展示训练过程中的准确率、损失值、权重/偏置的变化情况</li><li>IMAGES：展示训练过程中及记录的图像</li><li>AUDIO：展示训练过程中记录的音频</li><li>GRAPHS：展示模型的数据流图，以及各个设备上消耗的内存和时间</li><li>DISTRIBUTIONS：展示训练过程中记录的数据的分布图</li><li>HISTOGRAMS：展示训练过程中记录的数据的柱状图</li><li>EMBEDDINGS：展示词向量后的投影分布</li></ol><p>具体的参数配置后续再加~</p><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><ol><li><a href="https://blog.csdn.net/fendouaini/article/details/80368770?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase">https://blog.csdn.net/fendouaini/article/details/80368770?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase</a></li><li><a href="https://blog.csdn.net/u010099080/article/details/77426577">https://blog.csdn.net/u010099080/article/details/77426577</a></li><li><a href="https://blog.csdn.net/hnwolfs/article/details/81122380?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1">https://blog.csdn.net/hnwolfs/article/details/81122380?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Keras </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tensorboard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>screen常用命令</title>
      <link href="2020/06/05/screen-jiao-cheng/"/>
      <url>2020/06/05/screen-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<p>​    想必在Linux云服务器上跑过代码的同学都会有这样子的苦恼：我们通过SSH访问云服务器，将我们需要执行的代码在服务器上运行，但当你断开SSH连接后，你的代码也会随之停止运行。此时你可能开始寻找一种即使SSH离线也能让服务器运行目标代码的方法。这种方法确实存在，那就是下面提到的：screen（窗口）。这个东西实际上可以这样理解：我们通过SSH连接服务器，这时相当于开了一个主窗口。而我们关闭SSH连接后，这个主窗口也就关闭了，所以运行于主窗口的代码也就这样挂掉了。而通过screen操作相当于通过主窗口创建子窗口，主窗口湮灭了但子窗口还是存在的，所以将我们的目标代码放在子窗口运行便能够解决我们上述提到的无法离线运行的问题。</p><p>下面就介绍几种screen最常见的操作：</p><h2 id="screen创建"><a href="#screen创建" class="headerlink" title="screen创建"></a>screen创建</h2><pre class="line-numbers language-none"><code class="language-none">screen -S ###（窗口名）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="screen列表查看"><a href="#screen列表查看" class="headerlink" title="screen列表查看"></a>screen列表查看</h2><pre class="line-numbers language-none"><code class="language-none">screen -ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="screen恢复"><a href="#screen恢复" class="headerlink" title="screen恢复"></a>screen恢复</h2><pre class="line-numbers language-none"><code class="language-none">screen -r ###（窗口名）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="screen删除"><a href="#screen删除" class="headerlink" title="screen删除"></a>screen删除</h2><pre class="line-numbers language-none"><code class="language-none">screen -S ###(窗口名) -X quit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="screen恢复异常"><a href="#screen恢复异常" class="headerlink" title="screen恢复异常"></a>screen恢复异常</h2><pre class="line-numbers language-none"><code class="language-none">screen -d ###（窗口名）screen -r ###（窗口名）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="screen返回主窗口"><a href="#screen返回主窗口" class="headerlink" title="screen返回主窗口"></a>screen返回主窗口</h2><pre class="line-numbers language-none"><code class="language-none">Ctrl + A + D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> screen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础练习</title>
      <link href="2020/06/01/java/java-chang-gui-cao-zuo/"/>
      <url>2020/06/01/java/java-chang-gui-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>时间之矢稍纵即逝，接近2周就要Java期末考了。作为一个一学期没怎么认真听Java课的我来说，内心波澜起伏。借着空余的时间，把Java的重点稍微总结了一下，下面就以涵盖全书的4个例子展开。</p><h3 id="题1-数组-："><a href="#题1-数组-：" class="headerlink" title="题1(数组)："></a>题1(数组)：</h3><p>使用Scanner输入n个数(小于100)，并将之升序输出。</p><h2 id=""><a href="#" class="headerlink" title=""></a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> haha <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Scanner</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> xiang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>xiang<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>xiang<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>xiang<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h3 id="题2-继承-："><a href="#题2-继承-：" class="headerlink" title="题2(继承)："></a>题2(继承)：</h3><p>（1）编写一个圆类Circle，该类拥有：<br>①一个成员变量<br>Radius（私有，浮点型）；  // 存放圆的半径；<br>②两个构造方法<br>    Circle( )           // 将半径设为0<br>    Circle(double  r )         //创建Circle对象时将半径初始化为r<br>③ 三个成员方法<br>    double getArea( )       //获取圆的面积<br>    double getPerimeter( )   //获取圆的周长<br>     void  show( )          //将圆的半径、周长、面积输出到屏幕<br>（2）编写一个圆柱体类Cylinder，它继承于上面的Circle类。还拥有：<br>①一个成员变量<br>    double hight（私有，浮点型）；  // 圆柱体的高；<br>②构造方法<br>    Cylinder (double r, double  h )      //创建Circle对象时将半径初始化为r<br>③ 成员方法<br>    double getVolume( )             //获取圆柱体的体积<br>    void  showVolume( )             //将圆柱体的体积输出到屏幕<br>编写应用程序，创建类的对象，分别设置圆的半径、圆柱体的高，计算并分别显示圆半径、圆面积、圆周长，圆柱体的体积。</p><hr><p>Circle.java:</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token class-name">Radius</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Radius</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Radius</span><span class="token operator">=</span>r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span>PI<span class="token operator">*</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token class-name">Radius</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPerimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span><span class="token class-name">Math</span><span class="token punctuation">.</span>PI<span class="token operator">*</span><span class="token class-name">Radius</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"圆半径："</span><span class="token operator">+</span><span class="token class-name">Radius</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"圆面积："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"圆周长:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPerimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><p>Cylinder.java</p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cylinder</span> <span class="token keyword">extends</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">double</span> hight<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Cylinder</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">,</span><span class="token keyword">double</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>hight <span class="token operator">=</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>hight<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"圆柱体体积："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Cylinder</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cylinder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">showVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h3 id="题3-抽象类"><a href="#题3-抽象类" class="headerlink" title="题3(抽象类)"></a>题3(抽象类)</h3><p>1.设计Person抽象类，具有年龄、性别、体重、身高等属性，其中年龄、性别为一般方法，体重、身高为抽象方法；</p><p>2.在Person抽象类基础上，进一步派生Teacher类，包含工号、系别等信息；</p><p>3.设计Teacher测试运行例子，输出相应信息。</p><hr><p>Person.java</p><h2 id="-3"><a href="#-3" class="headerlink" title=""></a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setWeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><p>Teacher.java</p><h2 id="-4"><a href="#-4" class="headerlink" title=""></a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> weight<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> document<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> number<span class="token punctuation">;</span><span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>sex <span class="token operator">=</span> <span class="token string">"x"</span><span class="token punctuation">;</span>document <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>number <span class="token operator">=</span> <span class="token string">"xxxx"</span><span class="token punctuation">;</span>height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>weight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setWeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>weight <span class="token operator">=</span> w<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>height <span class="token operator">=</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sex <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setDocument</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    number <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"teacher"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"age:"</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sex:"</span><span class="token operator">+</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"height:"</span><span class="token operator">+</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"weight:"</span><span class="token operator">+</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doucument:"</span><span class="token operator">+</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"number:"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//测试</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Teacher</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">183.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">setWeight</span><span class="token punctuation">(</span><span class="token number">42.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">setDocument</span><span class="token punctuation">(</span><span class="token string">"自动化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token string">"1801"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h3 id="题4-接口-："><a href="#题4-接口-：" class="headerlink" title="题4(接口)："></a>题4(接口)：</h3><ol><li>设计Person接口，具有获取和设置年龄、性别、体重、身高等属性的方法</li><li>设计Teacher类实现Person接口，包含工号、系别等信息；实现信息输出功能；</li><li>设计Student类实现Person接口，包含学号信息；实现输出功能；</li><li>设计Student、Tercher测试运行类，体现接口的应用</li></ol><hr><p>Person.java</p><h2 id="-5"><a href="#-5" class="headerlink" title=""></a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getaAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setWeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token class-name">W</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><p>Teacher.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> document<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> number<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> weight<span class="token punctuation">;</span><span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>age<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>sex<span class="token operator">=</span><span class="token string">"x"</span><span class="token punctuation">;</span>document<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">;</span>number<span class="token operator">=</span><span class="token string">"xxxx"</span><span class="token punctuation">;</span>height<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>weight<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>age <span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>sex <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>height<span class="token operator">=</span>h<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>weight <span class="token operator">=</span> w<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> weight<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDocument</span><span class="token punctuation">(</span><span class="token class-name">String</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>document<span class="token operator">=</span>d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>number <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> document<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"teacher"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"age:"</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sex:"</span><span class="token operator">+</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"height:"</span><span class="token operator">+</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"weight:"</span><span class="token operator">+</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"number:"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"document:"</span><span class="token operator">+</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Teacher</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"age:"</span><span class="token operator">+</span>t<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sex:"</span><span class="token operator">+</span>t<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">123.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"heght:"</span><span class="token operator">+</span>t<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还剩下Student类，就…就自行解决吧！毕竟道理都是相通的啦！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda常用命令</title>
      <link href="2020/05/29/python/conda-cao-zuo/"/>
      <url>2020/05/29/python/conda-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>conda可以说是每个学习python的人都应该了解的。当我们安装python包，或者创建环境的时候都会和它打交道。为了帮助大家对conda有一个更好的了解，下面总结了一些关于conda的命令行操作。主要是关于conda换源问题以及conda虚拟环境操作问题。那下面就开始吧！.0.0.</p><hr><h2 id="window环境下"><a href="#window环境下" class="headerlink" title="window环境下"></a>window环境下</h2><h3 id="conda查包"><a href="#conda查包" class="headerlink" title="conda查包"></a>conda查包</h3><pre class="line-numbers language-none"><code class="language-none">conda list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="conda配置情况查询"><a href="#conda配置情况查询" class="headerlink" title="conda配置情况查询"></a>conda配置情况查询</h3><pre class="line-numbers language-none"><code class="language-none">conda info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="conda换源"><a href="#conda换源" class="headerlink" title="conda换源"></a>conda换源</h3><pre class="line-numbers language-none"><code class="language-none">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --set show_channel_urls yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="conda换回默认源"><a href="#conda换回默认源" class="headerlink" title="conda换回默认源"></a>conda换回默认源</h3><pre class="line-numbers language-none"><code class="language-none">conda config --remove-key channels<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="conda虚拟环境创建"><a href="#conda虚拟环境创建" class="headerlink" title="conda虚拟环境创建"></a>conda虚拟环境创建</h3><pre class="line-numbers language-none"><code class="language-none">conda create -n your_env_name python=X.X<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="conda虚拟环境激活"><a href="#conda虚拟环境激活" class="headerlink" title="conda虚拟环境激活"></a>conda虚拟环境激活</h3><pre class="line-numbers language-none"><code class="language-none">activate your_env_name(虚拟环境名称)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="conda查询环境信息"><a href="#conda查询环境信息" class="headerlink" title="conda查询环境信息"></a>conda查询环境信息</h3><pre class="line-numbers language-none"><code class="language-none">conda env list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="conda关闭虚拟环境"><a href="#conda关闭虚拟环境" class="headerlink" title="conda关闭虚拟环境"></a>conda关闭虚拟环境</h3><pre class="line-numbers language-none"><code class="language-none">deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="conda删除虚拟环境"><a href="#conda删除虚拟环境" class="headerlink" title="conda删除虚拟环境"></a>conda删除虚拟环境</h3><pre class="line-numbers language-none"><code class="language-none">conda remove -n your_env_name(虚拟环境名称) --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="conda删除虚拟环境中的某些包"><a href="#conda删除虚拟环境中的某些包" class="headerlink" title="conda删除虚拟环境中的某些包"></a>conda删除虚拟环境中的某些包</h3><pre class="line-numbers language-none"><code class="language-none">conda remove --name your_env_name  package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Linux环境下"><a href="#Linux环境下" class="headerlink" title="Linux环境下"></a>Linux环境下</h2><p>如果与windows环境下操作方式相同的，则以下不再赘述。</p><h3 id="conda虚拟环境激活-1"><a href="#conda虚拟环境激活-1" class="headerlink" title="conda虚拟环境激活"></a>conda虚拟环境激活</h3><pre class="line-numbers language-none"><code class="language-none">source activate your_env_name(虚拟环境名称)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="conda关闭虚拟环境-1"><a href="#conda关闭虚拟环境-1" class="headerlink" title="conda关闭虚拟环境"></a>conda关闭虚拟环境</h3><pre class="line-numbers language-none"><code class="language-none">source deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="conda换源-1"><a href="#conda换源-1" class="headerlink" title="conda换源"></a>conda换源</h3><p>在终端输入：</p><pre class="line-numbers language-none"><code class="language-none">vim ~/.condarc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就进入了conda源的配置文件了。下面（选择其一就好）将文件改为：</p><p>清华源：</p><pre class="line-numbers language-none"><code class="language-none">channels:  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ssl_verify: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中科大源：</p><pre class="line-numbers language-none"><code class="language-none">channels:  - https://mirrors.ustc.edu.cn/anaconda/pkgs/main/  - https://mirrors.ustc.edu.cn/anaconda/pkgs/free/  - https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/ssl_verify: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上交源：</p><pre class="line-numbers language-none"><code class="language-none">channels:  - https://mirrors.sjtug.sjtu.edu.cn/anaconda/pkgs/main/  - https://mirrors.sjtug.sjtu.edu.cn/anaconda/pkgs/free/  - https://mirrors.sjtug.sjtu.edu.cn/anaconda/cloud/conda-forge/ssl_verify: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文献：</p><p><a href="https://zhuanlan.zhihu.com/p/87123943">https://zhuanlan.zhihu.com/p/87123943</a></p><p><a href="https://blog.csdn.net/sean2100/article/details/80998643">https://blog.csdn.net/sean2100/article/details/80998643</a></p><p><a href="https://blog.csdn.net/lyy14011305/article/details/59500819">https://blog.csdn.net/lyy14011305/article/details/59500819</a></p><p><a href="https://blog.csdn.net/weixin_34613450/article/details/87457631">https://blog.csdn.net/weixin_34613450/article/details/87457631</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
